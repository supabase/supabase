# The spec divided into 3 main sections:
#   info: general information about the library
#   types: a list of custom types
#   functions: public functions which the user can access

sdkspec: '001'

info:
  id: reference/supabase-js
  version: 'next' # {string} The current version number of the library.
  title: Supabase Client
  language: 'javascript' # {string} The language where this library is used.
  source: 'https://github.com/supabase/supabase-js' # {string} Where developers can find the source code.
  bugs: 'https://github.com/supabase/supabase-js/issues' # {string} Where developers can file bugs.
  spec: 'https://github.com/supabase/supabase-js/spec/libspec-v001.yml' # {string} Where developers can find this spec (to link directly in the docs).
  description: |

    Supabase JavaScript.

functions:
  - id: function-create-client
    summary: 'Initializing'
    name: 'createClient()'
    tags: []
    links: []
    description: |
      You can initialize a new Supabase client using the `createClient()` method.

      The Supabase client is your entrypoint to the rest of the Supabase functionality
      and is the easiest way to interact with everything we offer within the Supabase ecosystem.
    usage: |
      ```js
      import { createClient } from '@supabase/supabase-js'

      const supabase = createClient('<SUPABASE_URL>', '<SUPABASE_ANON_KEY>')
      ```
    examples:
      - id: example-init-basic
        summary: Create a Supabase client.
        code: |
          ```js
          import { createClient } from '@supabase/supabase-js'

          // Create a single supabase client for interacting with your database 
          const supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key')
          ```
      - id: example-init-with-params
        summary: With additional parameters
        code: |
          ```js
          import { createClient } from '@supabase/supabase-js'

          const options = {
            schema: 'public',
            headers: { 'x-my-custom-header': 'my-app-name' },
            autoRefreshToken: true,
            persistSession: true,
            detectSessionInUrl: true
          }
          const supabase = createClient("https://xyzcompany.supabase.co", "public-anon-key", options)
          ```
      - id: example-init-scheams
        summary: API schemas
        description: |
          By default the API server points to the `public` schema. You can enable other database schemas within the Dashboard. 
          Go to `Settings > API > Schema` and add the schema which you want to expose to the API.

          Note: each client connection can only access a single schema, so the code above can access the `other_schema` schema but cannot access the `public` schema.
        code: |
          ```js
          import { createClient } from '@supabase/supabase-js'

          // Provide a custom schema. Defaults to "public".
          const supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key', { 
            schema: 'other_schema' 
          })
          ```
      - id: example-init-fetch
        summary: Custom `fetch` implementation
        description: |
          `supabase-js` uses the [`cross-fetch`](https://www.npmjs.com/package/cross-fetch) library to make HTTP requests, 
          but an alternative `fetch` implementation can be provided as an option. 
          This is most useful in environments where `cross-fetch` is not compatible (for instance Cloudflare Workers).
        code: |
          ```js
          import { createClient } from '@supabase/supabase-js'

          const supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key', { 
            fetch: fetch.bind(globalThis) 
          })
          ```

  - id: function-auth-signup
    summary: 'Sign up'
    name: 'signUp()'
    tags: ['auth']
    links: []
    usage: |
      ```js
      const { user, session, error } = await supabase.auth.signUp(options)
      ```
    description: |
      - By default, the user will need to verify their email address before logging in. If you would like to change this, you can disable "Email Confirmations" by going to Authentication -> Settings on [app.supabase.com](https://app.supabase.com)
      - If "Email Confirmations" is turned on, a `user` is returned but `session` will be null
      - If "Email Confirmations" is turned off, both a `user` and a `session` will be returned
      - When the user confirms their email address, they will be redirected to localhost:3000 by default. To change this, you can go to Authentication -> Settings on [app.supabase.com](https://app.supabase.com)
      - If signUp() is called for an existing confirmed user:
          - If "Enable email confirmations" is enabled on the "Authentication" -> "Settings" page, an obfuscated / fake user object will be returned.
          - If "Enable email confirmations" is disabled, an error with a message "User already registered" will be returned.
      - To check if a user already exists, refer to getUser().
    examples:
      - id: example-auth-signup-email
        summary: With email and password.
        code: |
          ```js
          const { user, session, error } = await supabase.auth.signUp({
            email: 'example@email.com',
            password: 'example-password',
          })
          ```
      - id: example-auth-signup-meta
        summary: With additional user meta data.
        code: |
          ```js
          const { user, session, error } = await supabase.auth.signUp(
            {
              email: 'example@email.com',
              password: 'example-password',
            },
            {
              data: { 
                first_name: 'John', 
                age: 27,
              }
            }
          )
          ```
      - id: example-auth-signup-phone
        summary: Sign up with Phone.
        description: |
          Supabase supports Phone Auth. After a user has verified their number, they can use the [`signIn()`](/docs/reference/javascript/auth-signin#sign-in-using-phone) method.
        code: |
          ```js
          const { user, session, error } = await supabase.auth.signIn({
            phone: '+13334445555',
            password: 'some-password',
          })

          // After receiving an SMS with One Time Password.
          let { session, error } = await supabase.auth.verifyOTP({
            phone: '+13334445555',
            token: '123456',
          })
          ```

  - id: function-auth-signin
    summary: 'Sign in'
    name: 'signIn()'
    description: |
      - A user can sign up either via email or OAuth.
      - If you provide `email` without a `password`, the user will be sent a magic link.
      - The magic link's destination URL is determined by the SITE_URL config variable. To change this, you can go to Authentication -> Settings on [app.supabase.com](https://app.supabase.com)
      - Specifying a `provider` will open the browser to the relevant login page.
    examples:
      - id: example-signin-email
        summary: Sign in with email.
        code: |
          ```js
          const { user, session, error } = await supabase.auth.signIn({
            email: 'example@email.com',
            password: 'example-password',
          })
          ```
      - id: example-signin-magic
        summary: Sign in with magic link.
        description: If no password is provided, the user will be sent a "magic link" to their email address, which they can click to open your application with a valid session. By default, a given user can only request a Magic Link once every 60 seconds.
        code: |
          ```js
          const { user, session, error } = await supabase.auth.signIn({
            email: 'example@email.com'
          })
          ```
      - id: example-signin-third-party
        summary: Sign in using third-party providers.
        description: Supabase supports many different [third-party providers](https://supabase.com/docs/guides/auth#providers).
        code: |
          ```js
          const { user, session, error } = await supabase.auth.signIn({
            // provider can be 'github', 'google', 'gitlab', and more
            provider: 'github'
          })
          ```
      - id: example-signin-phone
        summary: Sign in with Phone.
        description: Supabase supports Phone Auth.
        code: |
          ```js
          const { user, session, error } = await supabase.auth.signIn({
            phone: '+13334445555',
            password: 'some-password',
          })
          ```
      - id: example-signin-redirect
        summary: Sign in with redirect.
        description: |
          Note that the `redirectTo` param is only relevant for OAuth logins, where the login flow is managed by 
          the Auth server. If you are using email/phone logins you should set up your own redirects (within the email/sms template).
           
          Sometimes you want to control where the user is redirected to after they are logged in. Supabase supports this for 
          any URL path on your website (the URL must either be on the same domain as your Site URL [see Auth>Settings in dashboard], or must match one of the Additional Redirect URLs [also in Auth>Settings]).
        code: |
          ```js
          const { user, session, error } = await supabase.auth.signIn({
            provider: 'github'
          }, {
            redirectTo: 'https://example.com/welcome'
          })
          ```
      - id: example-signin-scopes
        summary: Sign in with scopes.
        description: |
          If you need additional data from an OAuth provider, you can include a space-separated list of scopes in your request to get back an OAuth provider token.
          You may also need to specify the scopes in the provider's OAuth app settings, depending on the provider.
        code: |
          ```js
          const { user, session, error } = await supabase.auth.signIn({
            provider: 'github'
          }, {
            scopes: 'repo gist notifications'
          })
          const oAuthToken = session.provider_token // use to access provider API
          ```
      - id: example-signin-refresh-token
        summary: Sign in using a refresh token (e.g. in React Native).
        description: |
          If you are completing a sign up or login in a React Native app you can pass the refresh token obtained from the provider to obtain a session.
        code: |
          ```js
          // An example using Expo's `AuthSession`
          const redirectUri = AuthSession.makeRedirectUri({ useProxy: false });
          const provider = 'google';

          AuthSession.startAsync({
            authUrl: `https://MYSUPABASEAPP.supabase.co/auth/v1/authorize?provider=${provider}&redirect_to=${redirectUri}`,
            returnUrl: redirectUri,
          }).then(async (response: any) => {
            if (!response) return;
            const { user, session, error } = await supabase.auth.signIn({
              refreshToken: response.params?.refresh_token,
            });
          });
          ```

  - id: function-auth-signout
    summary: 'Sign out'
    name: 'signOut()'
    examples:
      - id: example-signout
        summary: Sign out
        code: |
          ```js
          const { error } = await supabase.auth.signOut()
          ```

  - id: function-auth-session
    summary: 'Get user session'
    name: 'session()'
    examples:
      - id: example-session-basic
        summary: Get the session data
        code: |
          ```js
          const session = supabase.auth.session()
          ```

  - id: function-auth-user
    summary: 'Get user data'
    name: 'auth.user()'
    description: |
      This method gets the user object from memory.
    examples:
      - id: example-auth-user-get
        summary: Get the logged in user
        code: |
          ```js
          const user = supabase.auth.user()
          ```

  - id: function-auth-update
    summary: 'Update user metadata'
    name: 'update()'
    description: |
      User email: Email updates will send an email to both the user's current and new email with a confirmation link by default.
      To toggle this behavior off and only send a single confirmation link to the new email, toggle "Double confirm email changes" under "Authentication" -> "Settings" off.


      User metadata: It's generally better to store user data in a table inside your public schema (i.e. `public.users`). 
      Use the `update()` method if you have data which rarely changes or is specific only to the logged in user.
    examples:
      - id: example-auth-update-email
        summary: Update email for authenticated user.
        description: Sends a "Confirm Email Change" email to the new email address.
        code: |
          ```js
          const { user, error } = await supabase.auth.update({email: 'new@email.com'})
          ```
      - id: example-auth-update-password
        summary: Update password for authenticated user.
        code: |
          ```js
          const { user, error } = await supabase.auth.update({password: 'new password'})
          ```
      - id: example-auth-update-meta
        summary: Update a user's metadata.
        code: |
          ```js
          const { user, error } = await supabase.auth.update({ 
            data: { hello: 'world' } 
          })
          ```

  - id: function-auth-set-auth
    summary: 'Set the authenticated users'
    name: 'setAuth()'
    description: This is most useful on server-side functions where you cannot log the user in, but have access to the user's access token.
    examples:
      - id: example-auth-set-auth
        summary: Basic example
        code: |
          ```js
          function apiFunction(req, res) {
            // Assuming the access token was sent as a header "X-Supabase-Auth"
            const { access_token } = req.get('X-Supabase-Auth') 

            // You can now use it within a Supabase Client 
            const supabase = createClient("https://xyzcompany.supabase.co", "public-anon-key")
            const { user, error } = supabase.auth.setAuth(access_token)

            // This client will now send requests as this user
            const { data } = await supabase.from('your_table').select()
          }
          ```
      - id: example-auth-set-auth-express
        summary: With Express.
        code: |
          ```js

          /**
          * Make a request from the client to your server function
          */
          async function makeApiRequest() {
            const token = newClient.session()?.access_token

            await fetch('https://example.com/withAuth', {
               method: 'GET',
               withCredentials: true,
               credentials: 'include',
               headers: {
                'Content-Type': 'application/json',
                'Authorization': bearer, // Your own auth
                'X-Supabase-Auth': token, // Set the Supabase user
               }
            })
          }

          /**
          * Use the Auth token in your server-side function.
          */
          async function apiFunction(req, res) {
            const { access_token } = req.get('X-Supabase-Auth') 

            // You can now use it within a Supabase Client 
            const supabase = createClient("https://xyzcompany.supabase.co", "public-anon-key")
            const { user, error } = supabase.auth.setAuth(access_token)

            // This client will now send requests as this user
            const { data } = await supabase.from('your_table').select()
          }
          ```

  - id: function-onauthstatechange
    summary: 'Listen to auth events'
    name: 'onAuthStateChange()'
    examples:
      - id: example-onauthstatechange
        summary: Listen to auth changes
        code: |
          ```js
          supabase.auth.onAuthStateChange((event, session) => {
            console.log(event, session)
          })
          ```
      - id: example-onauthstatechange-signin
        summary: Listen to sign in
        code: |
          ```js
          supabase.auth.onAuthStateChange((event, session) => {
            if (event == 'SIGNED_IN') console.log('SIGNED_IN', session)
          })
          ```
      - id: example-onauthstatechange-signout
        summary: Listen to sign out
        code: |
          ```js
          supabase.auth.onAuthStateChange((event, session) => {
            if (event == 'SIGNED_OUT') console.log('SIGNED_OUT', session)
          })
          ```
      - id: example-onauthstatechange-refresh
        summary: Listen to token refresh
        code: |
          ```js
          supabase.auth.onAuthStateChange((event, session) => {
            if (event == 'TOKEN_REFRESHED') console.log('TOKEN_REFRESHED', session)
          })
          ```
      - id: example-onauthstatechange-updates
        summary: Listen to user updates
        code: |
          ```js
          supabase.auth.onAuthStateChange((event, session) => {
            if (event == 'USER_UPDATED') console.log('USER_UPDATED', session)
          })
          ```
      - id: example-onauthstatechange-delete
        summary: Listen to user deleted
        code: |
          ```js
          supabase.auth.onAuthStateChange((event, session) => {
            if (event == 'USER_DELETED') console.log('USER_DELETED', session)
          })
          ```
      - id: example-onauthstatechange-password-recovery
        summary: Listen to password recovery events
        code: |
          ```js
          supabase.auth.onAuthStateChange((event, session) => {
            if (event == 'PASSWORD_RECOVERY') console.log('PASSWORD_RECOVERY', session)
          })
          ```
  - id: function-auth-getuser
    summary: 'Get User'
    name: 'getUser()'
    description: |
      - Fetches the user object from the database instead of local storage.
      - Note that user() fetches the user object from local storage which might not be the most updated.
      - Requires the user's access_token.
    examples:
      - id: example-auth-getuser
        summary: Fetch the user object using the access_token jwt.
        code: |
          ```js
          const { user, error } = await supabase.auth.api.getUser(
            'ACCESS_TOKEN_JWT',
          )
          ```

  - id: function-auth-list-users
    summary: 'List all users'
    name: 'listUsers()'
    description: |
      - Requires a `service_role` key.
      - This function should be called on a server. Never expose your `service_role` key in the browser.
    examples:
      - id: example-auth-list-users
        summary: Get a full list of users.
        code: |
          ```js
          const { data: user, error } = await supabase.auth.api.listUsers()
          ```

  - id: function-auth-create-user
    summary: 'Create user'
    name: 'auth.createUser()'
    description: |
      - Requires a `service_role` key.
      - This function should be called on a server. Never expose your `service_role` key in the browser.
      - If you do not provide the `email_confirm` and `phone_confirm` options to this function, both will default to false.
    examples:
      - id: example-create-user
        summary: Create a new user.
        code: |
          ```js
          const { data: user, error } = await supabase.auth.api.createUser({
            email: 'user@email.com',
            password: 'password',
            user_metadata: { name: 'Yoda' }
          })
          ```
      - id: example-create-user-email
        summary: Auto-confirm email.
        code: |
          ```js
          const { data: user, error } = await supabase.auth.api.createUser({
            email: 'user@email.com',
            email_confirm: true
          })
          ```
      - id: example-create-phone
        summary: Auto-confirm phone.
        code: |
          ```js
          const { data: user, error } = await supabase.auth.api.createUser({
            phone: '1234567890',
            phone_confirm: true
          })
          ```

  - id: function-auth-delete-user
    summary: 'Delete user'
    name: 'deleteUser()'
    description: |
      - Requires a `service_role` key.
      - This function should be called on a server. Never expose your `service_role` key in the browser.
    examples:
      - id: example-delete-user
        summary: Remove a user completely.
        code: |
          ```js
          const { data: user, error } = await supabase.auth.api.deleteUser(
            '715ed5db-f090-4b8c-a067-640ecee36aa0'
          )
          ```

  - id: function-auth-invite-by-email
    summary: Invite user by email
    name: 'inviteUserByEmail()'
    description: |
      - Requires a `service_role` key.
      - This function should only be called on a server. Never expose your `service_role` key in the browser.
    examples:
      - id: example-auth-invite-by-email
        summary: Basic example.
        code: |
          ```js
          const { data: user, error } = await supabase.auth
            .api
            .inviteUserByEmail('email@example.com')
          ```

  - id: function-auth-send-mobile-otp
    summary: 'Send mobile OTP'
    name: 'sendMobileOTP()'
    description: |
      - Requires a `service_role` key.
      - This function should only be called on a server. Never expose your `service_role` key in the browser.
    examples:
      - id: example-auth-mobile-otp
        summary: Basic example.
        code: |
          ```js
          const { data: user, error } = await supabase.auth
            .api
            .sendMobileOTP('12345879')
          ```

  - id: 'function-auth-reset-password'
    summary: 'Reset passwprd for email address'
    name: 'resetPasswordForEmail()'
    description: |
      Sends a reset request to an email address.

      When the user clicks the reset link in the email they will be forwarded to:

      `<SITE_URL>#access_token=x&refresh_token=y&expires_in=z&token_type=bearer&type=recovery`

      Your app must detect `type=recovery` in the fragment and display a password reset form to the user.

      You should then use the access_token in the url and new password to update the user as follows:

      ```js
      const { error, data } = await supabase.auth.api
            .updateUser(access_token, { password : new_password })
      ```
    examples:
      - id: example-auth-reset-password
        summary: Reset password
        code: |
          ```js
          const { data, error } = await supabase.auth.api
            .resetPasswordForEmail('user@email.com')
          ```

  - id: function-auth-generate-link
    summary: 'Generate Auth Link'
    name: 'generateLink()'
    description: |
      - Requires a `service_role` key.
      - This function should only be called on a server. Never expose your `service_role` key in the browser.
    examples:
      - id: example-auth-generate-link
        summary: Generate invite link.
        code: |
          ```js
          const { data: user, error } = await supabase.auth.api.generateLink(
            'invite',
            'email@example.com'
          )
          ```

  - id: function-auth-update-user
    summary: 'Update user by ID'
    name: 'updateUserById()'
    description: |
      - Requires a `service_role` key.
      - This function should only be called on a server. Never expose your `service_role` key in the browser.
    examples:
      - id: example-auth-server-update-email
        summary: Updates a user's email.
        code: |
          ```js
          const { data: user, error } = await supabase.auth.api.updateUserById(
            '6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4',
            { email: 'new@email.com' }
          )
          ```
      - id: example-auth-server-update-password
        summary: Updates a user's password.
        code: |
          ```js
          const { data: user, error } = await supabase.auth.api.updateUserById(
            '6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4',
            { password: 'new_password' }
          )
          ```
      - id: example-auth-server-update-meta
        summary: Updates a user's metadata.
        code: |
          ```js
          const { data: user, error } = await supabase.auth.api.updateUserById(
            '6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4',
            { user_metadata: { hello: 'world' } }
          )
          ```
      - id: example-auth-server-update-app-data
        summary: Updates a user's app_metadata.
        code: |
          ```js
          const { data: user, error } = await supabase.auth.api.updateUserById(
            '6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4',
            { app_metadata: { plan: 'trial' } }
          )
          ```
      - id: example-auth-server-confirm-email
        summary: Confirms a user's email address.
        code: |
          ```js
          const { data: user, error } = await supabase.auth.api.updateUserById(
            '6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4',
            { email_confirm: true }
          )
          ```
      - id: example-auth-server-confirm-phone
        summary: Confirms a user's phone number.
        code: |
          ```js
          const { data: user, error } = await supabase.auth.api.updateUserById(
            '6aa5d0d4-2a9f-4483-b6c8-0cf4c6c98ac4',
            { phone_confirm: true }
          )
          ```
  - id: function-functions-invoke
    summary: 'Invoke an Edge Function'
    name: 'invoke()'
    description: |
      Invokes a Supabase Function.

      :::caution

      Edge Functions are Experimental until 1 August 2022. There will breaking changes. Do not use them in Production.

      :::

      We have released Supabase Functions to gather feedback. You're welcome to try them out and send us feedback but we strongly advise against using them for anything in production.
      There will be breaking changes with no notice.

      - Requires an Authorization header.
      - Invoke params generally match the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) spec.
    examples:
      - id: example-functions-invoke-basic
        summary: Basic invocation.
        code: |
          ```js
          const { data: user, error } = await supabase.functions.invoke('hello', {
            body: JSON.stringify({ foo: 'bar' })
          })
          ```
      - id: example-functions-invoke-response
        summary: Specifying response type.
        description: |
          By default, `invoke()` will parse the response as JSON. You can parse the response in the following formats: `json`, `blob`, `text`, and `arrayBuffer`.
        code: |
          ```js
          const { data: user, error } = await supabase.functions.invoke('hello', {
            responseType: 'text',
            body: JSON.stringify({ foo: 'bar' })
          })
          ```
      - id: example-functions-invoke-headers
        summary: Parsing custom headers.
        description: |
          You can pass custom headers to your function. Note: supabase-js automatically passes the `Authorization` header with the signed in user's JWT.
        code: |
          ```js
          const { data: user, error } = await supabase.functions.invoke('hello', {
            headers: {
              "my-custom-header": 'my-custom-header-value'
            },
            body: JSON.stringify({ foo: 'bar' })
          })
          ```

  - id: function-data-select
    summary: 'Fetch data from database'
    name: 'select()'
    description: |
      - By default, Supabase projects will return a maximum of 1,000 rows. This setting can be changed in Project API Settings. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.
      - `select()` can be combined with [Modifiers](https://supabase.com/docs/reference/javascript/using-modifiers)
      - `select()` can be combined with [Filters](https://supabase.com/docs/reference/javascript/using-filters)
      - If using the Supabase hosted platform `apikey` is technically a reserved keyword, since the API gateway will pluck it out for authentication. [It should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).
    examples:
      - id: example-data-select
        summary: Getting your data
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .select()
          ```
      - id: example-data-select-columns
        summary: Selecting specific columns
        description: You can select specific fields from your tables.
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .select('name')
          ```
      - id: example-data-select-foreign
        summary: Query foreign tables
        description: |
          If your database has foreign key relationships, you can query related tables too.

          If you're in a situation where your tables are **NOT** directly related, but instead are joined by a _join table_,
          you can still use the `select()` method to query the related data. The PostgREST engine detects the relationship automatically.
          For more details, [follow the link](https://postgrest.org/en/latest/api.html#embedding-through-join-tables).
        code: |
          ```js
          const { data, error } = await supabase
            .from('countries')
            .select(`
              name,
              cities (
                name
              )
            `)
          ```
      - id: example-data-select-foreign-multiple
        summary: Query the same foreign table multiple times
        description: |
          Sometimes you will need to query the same foreign table twice.
          In this case, you can use the name of the joined column to identify
          which join you intend to use. For convenience, you can also give an
          alias for each column. For example, if we had a shop of products,
          and we wanted to get the supplier and the purchaser at the same time
          (both in the users) table:
        code: |
          ```js
          const { data, error } = await supabase
            .from('products')
            .select(`
              id,
              supplier:supplier_id ( name ),
              purchaser:purchaser_id ( name )
            `)
          ```
      - id: example-data-select-inner
        summary: Filtering with inner joins
        description: |
          If you want to filter a table based on a child table's values you can use the `!inner()` function. For example, if you wanted
          to select all rows in a `message` table which belong to a user with the `username` "Jane":
        code: |
          ```js
          const { data, error } = await supabase
            .from('messages')
            .select('*, users!inner(*)')
            .eq('users.username', 'Jane')
          ```
      - id: example-data-select-count
        summary: Querying with count option
        description: |
          You can get the number of rows by using the count option.
          Allowed values for count option are `null`, [exact](https://postgrest.org/en/stable/api.html#exact-count), [planned](https://postgrest.org/en/stable/api.html#planned-count) and [estimated](https://postgrest.org/en/stable/api.html#estimated-count).
        code: |
          ```js
          const { data, error, count } = await supabase
            .from('cities')
            .select('name', { count: 'exact' }) // if you don't want to return any rows, you can use { count: 'exact', head: true }
          ```
      - id: example-data-select-json
        summary: Querying JSON data
        description: |
          If you have data inside of a JSONB column, you can apply select
          and query filters to the data values. Postgres offers a
          [number of operators](https://www.postgresql.org/docs/current/functions-json.html)
          for querying JSON data. Also see
          [PostgREST docs](http://postgrest.org/en/v7.0.0/api.html#json-columns) for more details.
        code: |
          ```js
          const { data, error } = await supabase
            .from('users')
            .select(`
              id, name,
              address->street
            `)
            .eq('address->postcode', 90210)
          ```
      - id: example-data-select-csv
        summary: Return data as CSV
        description: |
          By default the data is returned in JSON format, however you can also request for it to be returned as Comma Separated Values.
        code: |
          ```js
          const { data, error } = await supabase
            .from('users')
            .select()
            .csv()
          ```
      - id: example-data-select-abort
        summary: Aborting requests in-flight
        description: |
          You can use an [`AbortController`](https://developer.mozilla.org/en-US/docs/Web/API/AbortController) to abort requests. Note that `status` and `statusText` doesn't mean anything for aborted requests, since the request wasn't actually fulfilled.
        code: |
          ```js
          const ac = new AbortController()
          supabase
            .from('very_big_table')
            .select()
            .abortSignal(ac.signal)
            .then(console.log)
          ac.abort()
          // {
          //   error: {
          //     message: 'FetchError: The user aborted a request.',
          //     details: '',
          //     hint: '',
          //     code: ''
          //   },
          //   data: null,
          //   body: null,
          //   count: null,
          //   status: 400,
          //   statusText: 'Bad Request'
          // }
          ```

  - id: 'function-data-insert'
    summary: 'Insert data into database'
    name: 'insert()'
    description: |
      - By default, every time you run `insert()`, the client library will make a `select` to return the full record.
      This is convenient, but it can also cause problems if your Policies are not configured to allow the `select` operation.
      If you are using Row Level Security and you are encountering problems, try setting the `returning` param to `minimal`.
    examples:
      - id: example-data-create
        summary: Create a record
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .insert([
              { name: 'The Shire', country_id: 554 }
            ])
          ```
      - id: example-data-create-bulk
        summary: Bulk create
        description: |
          When running a bulk create, the operation is handled in a single transaction. If any of the inserts fail, all other operations are
          rolled back.
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .insert([
              { name: 'The Shire', country_id: 554 },
              { name: 'Rohan', country_id: 555 },
            ])
          ```
      - id: example-data-create-upsert
        summary: Upsert
        description: |
          For upsert, if set to true, primary key columns would need to be included
          in the data parameter in order for an update to properly happen. Also, primary keys
          used must be natural, not surrogate. There are however,
          [workarounds](https://github.com/PostgREST/postgrest/issues/1118)
          for surrogate primary keys.
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .insert(
              [
                { name: 'The Shire', country_id: 554 },
                { name: 'Rohan', country_id: 555 },
                { name: 'City by the Bay', country_id:840}
              ],
              { upsert: true })
          ```

  - id: function-data-update
    summary: 'Update data in database'
    name: 'update()'
    description: |
      - `update()` should always be combined with [Filters](https://supabase.com/docs/reference/javascript/using-filters) to target the item(s) you wish to update.
    examples:
      - id: example-data-update-basic
        summary: Updating your data
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .update({ name: 'Middle Earth' })
            .match({ name: 'Auckland' })
          ```
      - id: example-data-update-json
        summary: Updating JSON data
        description: |
          Postgres offers a
          [number of operators](https://www.postgresql.org/docs/current/functions-json.html)
          for working with JSON data. Right now it is only possible to update an entire JSON document,
          but we are [working on ideas](https://github.com/PostgREST/postgrest/issues/465) for updating individual keys.
        code: |
          ```js
          const { data, error } = await supabase
            .from('users')
            .update(`
              address: {
                street: 'Melrose Place',
                postcode: 90210
              }
            `)
            .eq('address->postcode', 90210)
          ```

  - id: function-data-upsert
    summary: 'Upsert data into database'
    name: 'upsert()'
    description: |
      - Primary keys should be included in the data payload in order for an update to work correctly.
      - Primary keys  must be natural, not surrogate. There are however, [workarounds](https://github.com/PostgREST/postgrest/issues/1118) for surrogate primary keys.
    examples:
      - id: example-data-upsert-basic
        summary: Upsert your data
        code: |
          ```js
          const { data, error } = await supabase
            .from('messages')
            .upsert({ id: 3, message: 'foo', username: 'supabot' })
          ```
      - id: example-data-upsert-bulk
        summary: Bulk Upsert your data
        code: |
          ```js
          const { data, error } = await supabase
            .from('messages')
            .upsert([
            { id: 3, message: 'foo', username: 'supabot' },
            { id: 4, message: 'bar', username: 'supabot' }
            ])
          ```
      - id: example-data-upsert-constraints
        summary: Upserting into tables with constraints
        description: |
          Running the following will cause supabase to upsert data into the `users` table.
          If the username 'supabot' already exists, the `onConflict` argument tells supabase to overwrite that row
          based on the column passed into `onConflict`.
        code: |
          ```js
          const { data, error } = await supabase
            .from('users')
            .upsert({ username: 'supabot' }, { onConflict: 'username' })
          ```
      - id: example-data-upsert-exact
        summary: Return the exact number of rows
        code: |
          ```js
          const { data, error, count } = await supabase
            .from('users')
            .upsert({
                id: 3, message: 'foo',
                username: 'supabot'
            }, {
              count: 'exact'
            })
          ```

  - id: function-data-delete
    summary: 'Delete data from database'
    name: 'delete()'
    description: |
      - `delete()` should always be combined with [filters](https://supabase.com/docs/reference/javascript/using-filters) to target the item(s) you wish to delete.
      - If you use `delete()` with filters and you have
        [RLS](https://supabase.com/docs/learn/auth-deep-dive/auth-row-level-security) enabled, only
        rows visible through `SELECT` policies are deleted. Note that by default
        no rows are visible, so you need at least one `SELECT`/`ALL` policy that
        makes the rows visible.
    examples:
      - id: example-data-delete-basic
        summary: Delete records
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .delete()
            .match({ id: 666 })
          ```

  - id: function-data-rpc
    summary: 'Execute Postgres functions'
    name: 'rpc()'
    description: |
      You can call Postgres functions as a "Remote Procedure Call".

      That's a fancy way of saying that you can put some logic into your database then call it from anywhere.
      It's especially useful when the logic rarely changes - like password resets and updates.

      ```sql
      create or replace function hello_world() returns text as $$
        select 'Hello world';
      $$ language sql;
      ```
    examples:
      - id: example-data-rpc-basic
        summary: Call a Postgres function
        description: This is an example of invoking a Postgres function with no parameters.
        code: |
          ```js
          const { data, error } = await supabase
            .rpc('hello_world')
          ```
      - id: example-data-rpc-parameters
        summary: With Parameters
        code: |
          ```js
          const { data, error } = await supabase
            .rpc('echo_city', { name: 'The Shire' })
          ```
      - id: example-data-rpc-bulk
        summary: Bulk processing
        description: You can process large payloads at once using [array parameters](https://postgrest.org/en/stable/api.html#calling-functions-with-array-parameters).
        code: |
          ```js
          const { data, error } = await postgrest
            .rpc('echo_cities', { names: ['The Shire', 'Mordor'] })
          ```
      - id: example-data-rpc-filters
        summary: With filters
        description: |
          Postgres functions that return tables can also be combined with
          [Modifiers](/docs/reference/javascript/using-modifiers) and
          [Filters](https://supabase.com/docs/reference/javascript/using-filters).
        code: |
          ```js
          const { data, error } = await supabase
            .rpc('echo_all_cities')
            .select('name, population')
            .eq('name', 'The Shire')
          ```
      - id: example-data-rpc-count
        summary: With count option
        description: |
          You can specify a count option to get the row count along with your data.
          Allowed values for count option are `null`, `exact`, `planned` and `estimated`.
        code: |
          ```js
          const { data, error, count } = await supabase
            .rpc('hello_world', {}, { count: 'exact' })
          ```

  - id: function-realtime-subscribe
    summary: 'Subscribe to database changes'
    name: 'on().subscribe()'
    description: |
      - Realtime is disabled by default for new Projects for better database performance and security. You can turn it on by [managing replication](https://supabase.com/docs/guides/api#managing-realtime).
      - If you want to receive the "previous" data for updates and deletes, you will need to set `REPLICA IDENTITY` to `FULL`, like this: `ALTER TABLE your_table REPLICA IDENTITY FULL;`
    examples:
      - id: example-data-realtime-basic
        summary: Listen to all database changes
        code: |
          ```js
          const mySubscription = supabase
            .from('*')
            .on('*', payload => {
              console.log('Change received!', payload)
            })
            .subscribe()
          ```
      - id: example-data-realtime-table
        summary: Listening to a specific table
        code: |
          ```js
          const mySubscription = supabase
            .from('countries')
            .on('*', payload => {
              console.log('Change received!', payload)
            })
            .subscribe()
          ```
      - id: example-data-realtime-inserts
        summary: Listening to inserts
        code: |
          ```js
          const mySubscription = supabase
            .from('countries')
            .on('INSERT', payload => {
              console.log('Change received!', payload)
            })
            .subscribe()
          ```
      - id: example-data-realtime-updates
        summary: Listening to updates
        description: |
          By default, Supabase will send only the updated record. If you want to receive the previous values as well you can
          enable full replication for the table you are listening too:

          ```sql
          alter table "your_table" replica identity full;
          ```
        code: |
          ```js
          const mySubscription = supabase
            .from('countries')
            .on('UPDATE', payload => {
              console.log('Change received!', payload)
            })
            .subscribe()
          ```
      - id: example-data-realtime-deletes
        summary: Listening to deletes
        description: |
          By default, Supabase does not send deleted records. If you want to receive the deleted record you can
          enable full replication for the table you are listening too:

          ```sql
          alter table "your_table" replica identity full;
          ```
        code: |
          ```js
          const mySubscription = supabase
            .from('countries')
            .on('DELETE', payload => {
              console.log('Change received!', payload)
            })
            .subscribe()
          ```
      - id: example-data-realtime-multiple-events
        summary: Listening to multiple events
        description: You can chain listeners if you want to listen to multiple events for each table.
        code: |
          ```js
          const mySubscription = supabase
            .from('countries')
            .on('INSERT', handleRecordInserted)
            .on('DELETE', handleRecordDeleted)
            .subscribe()
          ```
      - id: example-data-realtime-rls
        summary: Listening to row level changes
        description: |
          You can listen to individual rows using the format `{table}:{col}=eq.{val}` - where `{col}` is the column name, and `{val}` is the value which you want to match.

          - ``eq`` filter works with all database types as under the hood, it's casting both the filter value and the database value to the correct type and then comparing them.
        code: |
          ```js
          const mySubscription = supabase
            .from('countries:id=eq.200')
            .on('UPDATE', handleRecordUpdated)
            .subscribe()
          ```

  - id: function-realtime-remove
    summary: 'Remove database subscription'
    name: 'removeSubscription()'
    description: |
      - Removing subscriptions is a great way to maintain the performance of your project's database. Supabase will automatically handle cleanup 30 seconds after a user is disconnected, but unused subscriptions may cause degradation as more users are simultaneously subscribed.
    examples:
      - id: example-data-realtime-remove
        summary: Remove a subscription
        code: |
          ```js
          supabase.removeSubscription(mySubscription)
          ```

  - id: function-realtime-remove-all
    summary: 'Remove all subscriptions'
    name: 'removeAllSubscriptions()'
    description: |
      - Removing subscriptions is a great way to maintain the performance of your project's database. Supabase will automatically handle cleanup 30 seconds after a user is disconnected, but unused subscriptions may cause degradation as more users are simultaneously subscribed.
    examples:
      - id: example-data-realtime-removeall
        summary: Removes all subscriptions
        code: |
          ```js
          supabase.removeAllSubscriptions()
          ```

  - id: function-realtime-getsubscription
    summary: 'Get all subcscriptions'
    name: 'getSubscriptions()'
    examples:
      - id: example-data-realtime-getsubscriptions
        summary: Get all subscriptions
        code: |
          ```js
          const subscriptions = supabase.getSubscriptions()
          ```

  - id: function-storage-list-buckets
    summary: 'List all buckets'
    name: 'listBuckets()'
    description: |
      - Policy permissions required:
        - `buckets` permissions: `select`
        - `objects` permissions: none
    examples:
      - id: example-storage-list-buckets
        summary: List buckets
        code: |
          ```js
          const { data, error } = await supabase
            .storage
            .listBuckets()
          ```

  - id: function-storage-bucket-get
    summary: 'Get a single bucket'
    name: 'getBucket()'
    description: |
      - Policy permissions required:
        - `buckets` permissions: `select`
        - `objects` permissions: none
    examples:
      - id: example-storage-bucket-get
        summary: Get bucket
        code: |
          ```js
          const { data, error } = await supabase
            .storage
            .getBucket('avatars')
          ```

  - id: function-storage-bucket-create
    summary: 'Create a new bucket'
    name: 'createBucket()'
    description: |
      - Policy permissions required:
        - `buckets` permissions: `insert`
        - `objects` permissions: none
    examples:
      - id: example-storage-bucket-create
        summary: Create bucket
        code: |
          ```js
          const { data, error } = await supabase
            .storage
            .createBucket('avatars', { public: false })
          ```

  - id: function-storate-bucket-empty
    summary: 'Empty a bucket'
    name: 'emptyBucket()'
    description: |
      - Policy permissions required:
        - `buckets` permissions: `select`
        - `objects` permissions: `select` and `delete`
    examples:
      - id: example-storage-bucket-empty
        summary: Empty bucket
        code: |
          ```js
          const { data, error } = await supabase
            .storage
            .emptyBucket('avatars')
          ```
  - id: function-storage-bucket-update
    summary: 'updateBucket()'
    description: |
      - Policy permissions required:
        - `buckets` permissions: `update`
        - `objects` permissions: none
    examples:
      - id: example-storage-bucket-update
        summary: Update bucket
        code: |
          ```js
          const { data, error } = await supabase
            .storage
            .updateBucket('avatars', { public: false })
          ```

  - id: function-storage-bucket-delete
    summary: 'deleteBucket()'
    description: |
      - Policy permissions required:
        - `buckets` permissions: `select` and `delete`
        - `objects` permissions: none
    examples:
      - id: example-storage-bucket-delete
        summary: Delete bucket
        code: |
          ```js
          const { data, error } = await supabase
            .storage
            .deleteBucket('avatars')
          ```

  - id: function-storage-upload
    summary: 'Upload a file'
    name: 'from.upload()'
    description: |
      - Policy permissions required:
        - `buckets` permissions: none
        - `objects` permissions: `insert`
      - For React Native, using either `Blob`, `File` or `FormData` does not work as intended. Upload file using `ArrayBuffer` from base64 file data instead, see example below.
    examples:
      - id: example-storage-file-upload
        summary: Upload file
        code: |
          ```js
          const avatarFile = event.target.files[0]
          const { data, error } = await supabase
            .storage
            .from('avatars')
            .upload('public/avatar1.png', avatarFile, {
              cacheControl: '3600',
              upsert: false
            })
          ```
      - id: example-storage-file-upload-base64
        summary: Upload file using `ArrayBuffer` from base64 file data
        code: |
          ```js
          import { decode } from 'base64-arraybuffer'

          const { data, error } = await supabase
            .storage
            .from('avatars')
            .upload('public/avatar1.png', decode('base64FileData'), {
              contentType: 'image/png'
            })
          ```

  - id: functions-storage-file-update
    summary: 'Update a file'
    name: 'storage.update()'
    description: |
      - Policy permissions required:
        - `buckets` permissions: none
        - `objects` permissions: `update` and `select`
      - For React Native, using either `Blob`, `File` or `FormData` does not work as intended. Update file using `ArrayBuffer` from base64 file data instead, see example below.
    examples:
      - id: example-storage-file-update
        summary: Update file
        code: |
          ```js
          const avatarFile = event.target.files[0]
          const { data, error } = await supabase
            .storage
            .from('avatars')
            .update('public/avatar1.png', avatarFile, {
              cacheControl: '3600',
              upsert: false
            })
          ```
      - id: example-storage-file-upload-base-64
        summary: Update file using `ArrayBuffer` from base64 file data
        code: |
          ```js
          import {decode} from 'base64-arraybuffer'

          const { data, error } = await supabase
            .storage
            .from('avatars')
            .update('public/avatar1.png', decode('base64FileData'), {
              contentType: 'image/png'
            })
          ```

  - id: function-storage-file-move
    summary: 'Move a file'
    name: 'from.move()'
    description: |
      - Policy permissions required:
        - `buckets` permissions: none
        - `objects` permissions: `update` and `select`
    examples:
      - id: example-storage-file-move
        summary: Move file
        code: |
          ```js
          const { data, error } = await supabase
            .storage
            .from('avatars')
            .move('public/avatar1.png', 'private/avatar2.png')
          ```

  - id: function-storage-file-copy
    summary: 'Copy a file'
    name: 'from.copy()'
    description: |
      - Policy permissions required:
        - `buckets` permissions: none
        - `objects` permissions: `update` and `select`
    examples:
      - id: example-storage-file-copy
        summary: Copy file
        code: |
          ```js
          const { data, error } = await supabase
            .storage
            .from('avatars')
            .copy('public/avatar1.png', 'private/avatar2.png')
          ```

  - id: function-storage-signed-url
    summary: 'Create a signed URL'
    name: 'from.createSignedUrl()'
    description: |
      - Policy permissions required:
        - `buckets` permissions: none
        - `objects` permissions: `select`
    examples:
      - id: example-storage-file-signed-url
        summary: Create Signed URL
        code: |
          ```js
          const { signedURL, error } = await supabase
            .storage
            .from('avatars')
            .createSignedUrl('folder/avatar1.png', 60)
          ```

  - id: function-storage-signed-urls
    summary: 'Sign multiple URLs'
    name: 'storage.createSignedUrls()'
    description: |
      - Policy permissions required:
        - `buckets` permissions: none
        - `objects` permissions: `select`
    examples:
      - id: example-storage-file-signed-urls
        summary: Create Signed URLs
        code: |
          ```js
          const { data, error } = await supabase
            .storage
            .from('avatars')
            .createSignedUrls(['folder/avatar1.png', 'folder/avatar2.png'], 60)
          ```

  - id: function-storage-public-url
    summary: 'Get public URL'
    name: 'from.getPublicUrl()'
    description: |
      - The bucket needs to be set to public, either via [updateBucket()](https://supabase.com/docs/reference/javascript/storage-updatebucket) or by going to Storage on [app.supabase.com](https://app.supabase.com), clicking the overflow menu on a bucket and choosing "Make public"
      - Policy permissions required:
        - `buckets` permissions: none
        - `objects` permissions: none
    examples:
      - id: example-storage-file-public
        summary: Returns the URL for an asset in a public bucket
        code: |
          ```js
          const { publicURL, error } = supabase
            .storage
            .from('public-bucket')
            .getPublicUrl('folder/avatar1.png')
          ```

  - id: function-storage-download
    summary: 'Download a file'
    name: 'from.download()'
    description: |
      - Policy permissions required:
        - `buckets` permissions: none
        - `objects` permissions: `select`
    examples:
      - id: example-storage-file-download
        summary: Download file
        code: |
          ```js
          const { data, error } = await supabase
            .storage
            .from('avatars')
            .download('folder/avatar1.png')
          ```

  - id: function-storage-file-remove
    summary: 'from.remove()'
    description: |
      - Policy permissions required:
        - `buckets` permissions: none
        - `objects` permissions: `delete` and `select`
    examples:
      - id: example-storage-file-upload
        summary: Delete file
        code: |
          ```js
          const { data, error } = await supabase
            .storage
            .from('avatars')
            .remove(['folder/avatar1.png'])
          ```

  - id: function-storage-file-list
    summary: 'List files'
    name: 'from.list()'
    description: |
      - Policy permissions required:
        - `buckets` permissions: none
        - `objects` permissions: `select`
    examples:
      - id: example-storage-file-list
        summary: List files in a bucket
        code: |
          ```js
          const { data, error } = await supabase
            .storage
            .from('avatars')
            .list('folder', {
              limit: 100,
              offset: 0,
              sortBy: { column: 'name', order: 'asc' },
            })
          ```
      - id: example-storage-file-search
        summary: Search files in a bucket
        code: |
          ```js
          const { data, error } = await supabase
            .storage
            .from('avatars')
            .list('folder', {
              limit: 100,
              offset: 0,
              sortBy: { column: 'name', order: 'asc' },
              search: 'jon'
            })
          ```

  - id: function-data-limit
    summary: 'Limit rows returned'
    name: 'limit()'
    description: |
      Modifiers can be used on `select()` queries.

      If a Postgres function returns a table response, you can also apply modifiers to the `rpc()` function.
    examples:
      - id: example-data-limit-select
        summary: With `select()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .select('name, country_id')
            .limit(1)
          ```
      - id: example-data-limit-embedded
        summary: With embedded resources
        code: |
          ```js
          const { data, error } = await supabase
            .from('countries')
            .select('name, cities(name)')
            .eq('name', 'United States')
            .limit(1, { foreignTable: 'cities' })
          ```

  - id: function-data-order
    summary: 'Order results'
    name: 'order()'
    examples:
      - id: example-data-order-select
        summary: With `select()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .select('name, country_id')
            .order('id', { ascending: false })
          ```
      - id: example-data-order-embedded
        summary: With embedded resources
        code: |
          ```js
          const { data, error } = await supabase
            .from('countries')
            .select('name, cities(name)')
            .eq('name', 'United States')
            .order('name', {foreignTable: 'cities'})
          ```

  - id: function-data-range
    summary: 'Select a range of data'
    name: 'range()'
    examples:
      - id: example-data-range-select
        summary: With `select()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .select('name, country_id')
            .range(0,3)
          ```

  - id: function-data-single
    summary: 'Get a single row of data'
    name: 'single()'
    examples:
      - id: example-data-single-select
        summary: With `select()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .select('name, country_id')
            .limit(1)
            .single()
          ```

  - id: function-data-maybe-single
    summary: 'Return a single row if it exists'
    name: maybeSingle()
    examples:
      - id: example-data-maybe-single
        summary: With `select()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .select('name, country_id')
            .eq('name', 'Singapore')
            .maybeSingle()
          ```

  - id: function-filter-or
    summary: 'Apply multiple filters with OR conditional'
    name: .or()
    description: |
      - `.or()` expects you to use the raw [PostgREST syntax](https://postgrest.org/en/stable/api.html#horizontal-filtering-rows) for the filter names and values.

        ```js
        .or('id.in.(6,7), arraycol.cs.{"a","b"}')  // Use Postgres list () for in filter. Array {} for array column and 'cs' for contains.
        .or(`id.in.(${arrList}),arraycol.cs.{${arr}}`)	// You can insert a javascipt array for list or array on array column.
        .or(`id.in.(${arrList}),rangecol.cs.[${arrRange})`)	// You can insert a javascipt array for list or range on a range column.
        ```
    examples:
      - id: example-filter-or-select
        summary: With `select()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .select('name, country_id')
            .or('id.eq.20,id.eq.30')
          ```
      - id: example-filter-or-and
        summary: Use `or` with `and`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .select('name, country_id')
            .or('id.gt.20,and(name.eq.New Zealand,name.eq.France)')
          ```
      - id: example-filter-or-select-foreign
        summary: Use `or` on foreign tables
        code: |
          ```js
          const { data, error } = await supabase
            .from('countries')
            .select('id, cities(*)')
            .or('name.eq.Wellington,name.eq.Paris', { foreignTable: "cities" })
          ```

  - id: function-filter-not
    summary: 'Apply a "not" filter'
    name: .not()
    description: |
      - `.not()` expects you to use the raw [PostgREST syntax](https://postgrest.org/en/stable/api.html#horizontal-filtering-rows) for the filter names and values.

        ```js
          .not('name','eq','Paris')
          .not('arraycol','cs','{"a","b"}') // Use Postgres array {} for array column and 'cs' for contains.
          .not('rangecol','cs','(1,2]') // Use Postgres range syntax for range column.
          .not('id','in','(6,7)')  // Use Postgres list () for in filter.
          .not('id','in',`(${arr})`)  // You can insert a javascript array.
        ```
    examples:
      - id: example-filter-not-select
        summary: With `select()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .select('name, country_id')
            .not('name', 'eq', 'Paris')
          ```
      - id: example-filter-not-update
        summary: With `update()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .update({ name: 'Mordor' })
            .not('name', 'eq', 'Paris')
          ```
      - id: example-filter-not-delete
        summary: With `delete()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .delete()
            .not('name', 'eq', 'Paris')
          ```
      - id: example-filter-not-rpc
        summary: With `rpc()`
        code: |
          ```js
          // Only valid if the Postgres function returns a table type.
          const { data, error } = await supabase
            .rpc('echo_all_cities')
            .not('name', 'eq', 'Paris')
          ```

  - id: function-filter-match
    summary: Match on several criteria
    name: .match()
    examples:
      - id: example-filter-match-select
        summary: With `select()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .select('name, country_id')
            .match({name: 'Beijing', country_id: 156})
          ```
      - id: example-filter-match-update
        summary: With `update()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .update({ name: 'Mordor' })
            .match({name: 'Beijing', country_id: 156})
          ```
      - id: example-filter-match-delete
        summary: With `delete()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .delete()
            .match({name: 'Beijing', country_id: 156})
          ```
      - id: example-filter-match-rpc
        summary: With `rpc()`
        code: |
          ```js
          // Only valid if the Postgres function returns a table type.
          const { data, error } = await supabase
            .rpc('echo_all_cities')
            .match({name: 'Beijing', country_id: 156})
          ```

  - id: function-filter-eq
    summary: Filter by exact equality
    name: .eq()
    examples:
      - id: example-filter-eq-select
        summary: With `select()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .select('name, country_id')
            .eq('name', 'The shire')
          ```
      - id: example-filter-eq-update
        summary: With `update()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .update({ name: 'Mordor' })
            .eq('name', 'San Francisco')
          ```
      - id: example-filter-eq-delete
        summary: With `delete()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .delete()
            .eq('name', 'Mordor')
          ```
      - id: example-filter-eq-rpc
        summary: With `rpc()`
        code: |
          ```js
          // Only valid if the Postgres function returns a table type.
          const { data, error } = await supabase
            .rpc('echo_all_cities')
            .eq('name', 'San Francisco')
          ```

  - id: function-filter-neq
    summary: Filter by not equal
    name: .neq()
    examples:
      - id: example-filter-neq-select
        summary: With `select()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .select('name, country_id')
            .neq('name', 'The shire')
          ```
      - id: example-filter-neq-update
        summary: With `update()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .update({ name: 'Mordor' })
            .neq('name', 'San Francisco')
          ```
      - id: example-filter-neq-delete
        summary: With `delete()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .delete()
            .neq('name', 'Mordor')
          ```
      - id: example-filter-neq-rpc
        summary: With `rpc()`
        code: |
          ```js
          // Only valid if the Postgres function returns a table type.
          const { data, error } = await supabase
            .rpc('echo_all_cities')
            .neq('name', 'Lagos')
          ```

  - id: function-filter-gt
    summary: Filter by greater than
    name: .gt()
    examples:
      - id: example-filter-gt-select
        summary: With `select()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .select('name, country_id')
            .gt('country_id', 250)
          ```
      - id: example-filter-gt-update
        summary: With `update()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .update({ name: 'Mordor' })
            .gt('country_id', 250)
          ```
      - id: example-filter-gt-delete
        summary: With `delete()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .delete()
            .gt('country_id', 250)
          ```
      - id: example-filter-gt-rpc
        summary: With `rpc()`
        code: |
          ```js
          // Only valid if the Postgres function returns a table type.
          const { data, error } = await supabase
            .rpc('echo_all_cities')
            .gt('country_id', 250)
          ```

  - id: function-filter-gte
    summary: Filter by greater than or equal
    name: .gte()
    examples:
      - id: example-filter-gte-select
        summary: With `select()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .select('name, country_id')
            .gte('country_id', 250)
          ```
      - id: example-filter-gte-update
        summary: With `update()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .update({ name: 'Mordor' })
            .gte('country_id', 250)
          ```
      - id: example-filter-gte-delete
        summary: With `delete()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .delete()
            .gte('country_id', 250)
          ```
      - id: example-filter-gte-rpc
        summary: With `rpc()`
        code: |
          ```js
          // Only valid if the Postgres function returns a table type.
          const { data, error } = await supabase
            .rpc('echo_all_cities')
            .gte('country_id', 250)
          ```

  - id: function-filter-lt
    summary: Filter by less than
    name: .lt()
    examples:
      - id: example-filter-lt-select
        summary: With `select()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .select('name, country_id')
            .lt('country_id', 250)
          ```
      - id: example-filter-lt-update
        summary: With `update()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .update({ name: 'Mordor' })
            .lt('country_id', 250)
          ```
      - id: example-filter-lt-delete
        summary: With `delete()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .delete()
            .lt('country_id', 250)
          ```
      - id: example-filter-lt-rpc
        summary: With `rpc()`
        code: |
          ```js
          // Only valid if the Postgres function returns a table type.
          const { data, error } = await supabase
            .rpc('echo_all_cities')
            .lt('country_id', 250)
          ```

  - id: function-filter-lte
    summary: Filter by TBD
    name: .lte()
    examples:
      - id: example-filter-lte-select
        summary: With `select()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .select('name, country_id')
            .lte('country_id', 250)
          ```
      - id: example-filter-lte-update
        summary: With `update()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .update({ name: 'Mordor' })
            .lte('country_id', 250)
          ```
      - id: example-filter-lte-delete
        summary: With `delete()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .delete()
            .lte('country_id', 250)
          ```
      - id: example-filter-lte-rpc
        summary: With `rpc()`
        code: |
          ```js
          // Only valid if the Postgres function returns a table type.
          const { data, error } = await supabase
            .rpc('echo_all_cities')
            .lte('country_id', 250)
          ```

  - id: function-filter-like
    summary: Filter by string equality
    name: .like()
    examples:
      - id: example-filter-like-select
        summary: With `select()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .select('name, country_id')
            .like('name', '%la%')
          ```
      - id: example-filter-like-update
        summary: With `update()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .update({ name: 'Mordor' })
            .like('name', '%la%')
          ```
      - id: example-filter-like-delete
        summary: With `delete()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .delete()
            .like('name', '%la%')
          ```
      - id: example-filter-like-rpc
        summary: With `rpc()`
        code: |
          ```js
          // Only valid if the Postgres function returns a table type.
          const { data, error } = await supabase
            .rpc('echo_all_cities')
            .like('name', '%la%')
          ```

  - id: function-filter-ilike
    summary: Filter by string equality (case insensitive)
    name: .ilike()
    examples:
      - id: example-filter-ilike-select
        summary: With `select()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .select('name, country_id')
            .ilike('name', '%la%')
          ```
      - id: example-filter-ilike-update
        summary: With `update()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .update({ name: 'Mordor' })
            .ilike('name', '%la%')
          ```
      - id: example-filter-ilike-delete
        summary: With `delete()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .delete()
            .ilike('name', '%la%')
          ```
      - id: example-filter-ilike-rpc
        summary: With `rpc()`
        code: |
          ```js
          // Only valid if the Postgres function returns a table type.
          const { data, error } = await supabase
            .rpc('echo_all_cities')
            .ilike('name', '%la%')
          ```

  - id: function-filter-is
    summary: Filter by null values
    name: .is()
    examples:
      - id: example-filter-is-select
        summary: With `select()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .select('name, country_id')
            .is('name', null)
          ```
      - id: example-filter-is-update
        summary: With `update()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .update({ name: 'Mordor' })
            .is('name', null)
          ```
      - id: example-filter-is-delete
        summary: With `delete()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .delete()
            .is('name', null)
          ```
      - id: example-filter-is-rpc
        summary: With `rpc()`
        code: |
          ```js
          // Only valid if the Postgres function returns a table type.
          const { data, error } = await supabase
            .rpc('echo_all_cities')
            .is('name', null)
          ```

  - id: function-filter-in
    summary: Filter if in array
    name: .in()
    examples:
      - id: example-filter-in-select
        summary: With `select()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .select('name, country_id')
            .in('name', ['Rio de Janeiro', 'San Francisco'])
          ```
      - id: example-filter-in-update
        summary: With `update()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .update({ name: 'Mordor' })
            .in('name', ['Rio de Janeiro', 'San Francisco'])
          ```
      - id: example-filter-in-delete
        summary: With `delete()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .delete()
            .in('name', ['Rio de Janeiro', 'San Francisco'])
          ```
      - id: example-filter-in-rpc
        summary: With `rpc()`
        code: |
          ```js
          // Only valid if the Postgres function returns a table type.
          const { data, error } = await supabase
            .rpc('echo_all_cities')
            .in('name', ['Rio de Janeiro', 'San Francisco'])
          ```

  - id: function-filter-contains
    summary: Filter if TBD
    name: .contains()
    description: |
      - `.contains()` can work on array columns or range columns.
        It is very useful for finding rows where a tag array contains all the values in the filter array.

        ```js
        .contains('arraycol',["a","b"]) // You can use a javascript array for an array column
        .contains('arraycol','{"a","b"}') // You can use a string with Postgres array {} for array column.
        .contains('rangecol','(1,2]') // Use Postgres range syntax for range column.
        .contains('rangecol',`(${arr}]`) // You can insert an array into a string.
        ```
    examples:
      - id: example-filter-contains-select
        summary: With `select()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('countries')
            .select('name, id, main_exports')
            .contains('main_exports', ['oil'])
          ```
      - id: example-filter-contains-update
        summary: With `update()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('countries')
            .update({ name: 'Mordor' })
            .contains('main_exports', ['oil'])
          ```
      - id: example-filter-contains-delete
        summary: With `delete()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('countries')
            .delete()
            .contains('main_exports', ['oil'])
          ```
      - id: example-filter-contains-rpc
        summary: With `rpc()`
        code: |
          ```js
          // Only valid if the Postgres function returns a table type.
          const { data, error } = await supabase
            .rpc('echo_all_countries')
            .contains('main_exports', ['oil'])
          ```

  - id: function-filter-contained-by
    summary: Filter by TBD
    name: .containedBy()
    description: |
      - `.containedBy()` can work on array columns or range columns.

        ```js
        .containedBy('arraycol',["a","b"]) // You can use a javascript array for an array column
        .containedBy('arraycol','{"a","b"}') // You can use a string with Postgres array {} for array column.
        .containedBy('rangecol','(1,2]') // Use Postgres range syntax for range column.
        .containedBy('rangecol',`(${arr}]`) // You can insert an array into a string.
        ```
    examples:
      - id: example-filter-contained-by-select
        summary: With `select()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('countries')
            .select('name, id, main_exports')
            .containedBy('main_exports', ['cars', 'food', 'machine'])
          ```
      - id: example-filter-contained-by-update
        summary: With `update()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('countries')
            .update({ name: 'Mordor' })
            .containedBy('main_exports', ['orks', 'surveillance', 'evil'])
          ```
      - id: example-filter-contained-by-delete
        summary: With `delete()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('countries')
            .delete()
            .containedBy('main_exports', ['cars', 'food', 'machine'])
          ```
      - id: example-filter-contained-by-rpc
        summary: With `rpc()`
        code: |
          ```js
          // Only valid if the Postgres function returns a table type.
          const { data, error } = await supabase
            .rpc('echo_all_countries')
            .containedBy('main_exports', ['cars', 'food', 'machine'])
          ```

  - id: function-filter-range-lt
    summary: Filter by TBD
    name: .rangeLt()
    examples:
      - id: example-filter-range-lt-select
        summary: With `select()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('countries')
            .select('name, id, population_range_millions')
            .rangeLt('population_range_millions', '[150, 250]')
          ```
      - id: example-filter-range-lt-update
        summary: With `update()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('countries')
            .update({ name: 'Mordor' })
            .rangeLt('population_range_millions', '[150, 250]')
          ```
      - id: example-filter-range-lt-delete
        summary: With `delete()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('countries')
            .delete()
            .rangeLt('population_range_millions', '[150, 250]')
          ```
      - id: example-filter-range-lt-rpc
        summary: With `rpc()`
        code: |
          ```js
          // Only valid if the Postgres function returns a table type.
          const { data, error } = await supabase
            .rpc('echo_all_countries')
            .rangeLt('population_range_millions', '[150, 250]')
          ```

  - id: function-filter-range-gt
    summary: Filter by TBD
    name: .rangeGt()
    examples:
      - id: example-filter-range-gt-select
        summary: With `select()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('countries')
            .select('name, id, population_range_millions')
            .rangeGt('population_range_millions', '[150, 250]')
          ```
      - id: example-filter-range-gt-update
        summary: With `update()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('countries')
            .update({ name: 'Mordor' })
            .rangeGt('population_range_millions', '[150, 250]')
          ```
      - id: example-filter-range-gt-delete
        summary: With `delete()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('countries')
            .delete()
            .rangeGt('population_range_millions', '[150, 250]')
          ```
      - id: example-filter-range-gt-rpc
        summary: With `rpc()`
        code: |
          ```js
          // Only valid if the Postgres function returns a table type.
          const { data, error } = await supabase
            .rpc('echo_all_countries')
            .rangeGt('population_range_millions', '[150, 250]')
          ```

  - id: function-filter-range-gte
    summary: Filter by TBD
    name: .rangeGte()
    examples:
      - id: example-filter-range-gte-select
        summary: With `select()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('countries')
            .select('name, id, population_range_millions')
            .rangeGte('population_range_millions', '[150, 250]')
          ```
      - id: example-filter-range-gte-udpdate
        summary: With `update()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('countries')
            .update({ name: 'Mordor' })
            .rangeGte('population_range_millions', '[150, 250]')
          ```
      - id: example-filter-range-gte-delete
        summary: With `delete()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('countries')
            .delete()
            .rangeGte('population_range_millions', '[150, 250]')
          ```
      - id: example-filter-range-gte-rpc
        summary: With `rpc()`
        code: |
          ```js
          // Only valid if the Postgres function returns a table type.
          const { data, error } = await supabase
            .rpc('echo_all_countries')
            .rangeGte('population_range_millions', '[150, 250]')
          ```

  - id: function-filter-range-lte
    summary: Filter by TBD
    name: .rangeLte()
    examples:
      - id: example-filter-range-lte-select
        summary: With `select()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('countries')
            .select('name, id, population_range_millions')
            .rangeLte('population_range_millions', '[150, 250]')
          ```
      - id: example-filter-range-lte-update
        summary: With `update()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('countries')
            .update({ name: 'Mordor' })
            .rangeLte('population_range_millions', '[150, 250]')
          ```
      - id: example-filter-range-lte-delete
        summary: With `delete()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('countries')
            .delete()
            .rangeLte('population_range_millions', '[150, 250]')
          ```
      - id: example-filter-range-lte-rpc
        summary: With `rpc()`
        code: |
          ```js
          // Only valid if the Postgres function returns a table type.
          const { data, error } = await supabase
            .rpc('echo_all_countries')
            .rangeLte('population_range_millions', '[150, 250]')
          ```

  - id: function-filter-range-adjacent
    summary: Filter by TBD
    name: .rangeAdjacent()
    examples:
      - id: example-filter-range-adjacent-select
        summary: With `select()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('countries')
            .select('name, id, population_range_millions')
            .rangeAdjacent('population_range_millions', '[70, 185]')
          ```
      - id: example-filter-range-adjacent-update
        summary: With `update()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('countries')
            .update({ name: 'Mordor' })
            .rangeAdjacent('population_range_millions', '[70, 185]')
          ```
      - id: example-filter-range-adjacent-delete
        summary: With `delete()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('countries')
            .delete()
            .rangeAdjacent('population_range_millions', '[70, 185]')
          ```
      - id: example-filter-range-adjacent-rpc
        summary: With `rpc()`
        code: |
          ```js
          // Only valid if the Postgres function returns a table type.
          const { data, error } = await supabase
            .rpc('echo_all_countries')
            .rangeAdjacent('population_range_millions', '[70, 185]')
          ```

  - id: function-filter-overlaps
    summary: Filter by TBD
    name: .overlaps()
    description: |
      - `.overlaps()` can work on array columns or range columns.

        ```js
        .overlaps('arraycol',["a","b"]) // You can use a javascript array for an array column
        .overlaps('arraycol','{"a","b"}') // You can use a string with Postgres array {} for array column.
        .overlaps('rangecol','(1,2]') // Use Postgres range syntax for range column.
        .overlaps('rangecol',`(${arr}]`)  // You can insert an array into a string.
        ```
    examples:
      - id: example-filter-overlaps-select
        summary: With `select()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('countries')
            .select('name, id, main_exports')
            .overlaps('main_exports', ['computers', 'minerals'])
          ```
      - id: example-filter-overlaps-update
        summary: With `update()`
        code: |
          ```js
          let countries = await supabase
            .from('countries')
            .update({ name: 'Mordor' })
            .overlaps('main_exports', ['computers', 'minerals'])
          ```
      - id: example-filter-overlaps-delete
        summary: With `delete()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('countries')
            .delete()
            .overlaps('main_exports', ['computers', 'minerals'])
          ```
      - id: example-filter-overlaps-rpc
        summary: With `rpc()`
        code: |
          ```js
          // Only valid if the Postgres function returns a table type.
          const { data, error } = await supabase
            .rpc('echo_all_countries')
            .overlaps('main_exports', ['computers', 'minerals'])
          ```

  - id: function-filter-search
    summary: Filter by TBD
    name: .textSearch()
    examples:
      - id: example-filter-search
        summary: Text search
        code: |
          ```js
          const { data, error } = await supabase
            .from('quotes')
            .select('catchphrase')
            .textSearch('catchphrase', `'fat' & 'cat'`, {
              config: 'english'
            })
          ```
      - id: example-filter-search-normalize
        summary: Basic normalization
        description: Uses PostgreSQL's `plainto_tsquery` function.
        code: |
          ```js
          const { data, error } = await supabase
            .from('quotes')
            .select('catchphrase')
            .textSearch('catchphrase', `'fat' & 'cat'`, {
              type: 'plain',
              config: 'english'
            })
          ```
      - id: example-filter-search-full-normalize
        summary: Full normalization
        description: Uses PostgreSQL's `phraseto_tsquery` function.
        code: |
          ```js
          const { data, error } = await supabase
            .from('quotes')
            .select('catchphrase')
            .textSearch('catchphrase', `'fat' & 'cat'`, {
              type: 'phrase',
              config: 'english'
            })
          ```
      - id: example-filter-search-websearch
        summary: Websearch
        description: |
          Uses PostgreSQL's `websearch_to_tsquery` function.
          This function will never raise syntax errors, which makes it possible to use raw user-supplied input for search, and can be used
          with advanced operators.

          - `unquoted text`: text not inside quote marks will be converted to terms separated by & operators, as if processed by plainto_tsquery.
          - `"quoted text"`: text inside quote marks will be converted to terms separated by <-> operators, as if processed by phraseto_tsquery.
          - `OR`: the word “or” will be converted to the | operator.
          - `-`: a dash will be converted to the ! operator.

        code: |
          ```js
          const { data, error } = await supabase
            .from('quotes')
            .select('catchphrase')
            .textSearch('catchphrase', `'fat or cat'`, {
              type: 'websearch',
              config: 'english'
            })
          ```

  - id: function-filter-filter
    summary: Filter by TBD
    name: .filter()
    description: |
      - `.filter()` expects you to use the raw [PostgREST syntax](https://postgrest.org/en/stable/api.html#horizontal-filtering-rows) for the filter names and values, so it should only be used as an escape hatch in case other filters don't work.
        ```js
          .filter('arraycol','cs','{"a","b"}') // Use Postgres array {} for array column and 'cs' for contains.
          .filter('rangecol','cs','(1,2]') // Use Postgres range syntax for range column.
          .filter('id','in','(6,7)')  // Use Postgres list () for in filter.
          .filter('id','in',`(${arr})`)  // You can insert a javascript array.
        ```
    examples:
      - id: example-filter-select
        summary: With `select()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .select('name, country_id')
            .filter('name', 'in', '("Paris","Tokyo")')
          ```
      - id: example-filter-update
        summary: With `update()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .update({ name: 'Mordor' })
            .filter('name', 'in', '("Paris","Tokyo")')
          ```
      - id: example-filter-delete
        summary: With `delete()`
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .delete()
            .filter('name', 'in', '("Paris","Tokyo")')
          ```
      - id: example-filter-rpc
        summary: With `rpc()`
        code: |
          ```js
          // Only valid if the Postgres function returns a table type.
          const { data, error } = await supabase
            .rpc('echo_all_cities')
            .filter('name', 'in', '("Paris","Tokyo")')
          ```
      - id: example-filter-embedded
        summary: Filter embedded resources
        code: |
          ```js
          const { data, error } = await supabase
            .from('cities')
            .select('name, countries ( name )')
            .filter('countries.name', 'in', '("France","Japan")')
          ```
