# The spec divided into 3 main sections:
#   info: general information about the library
#   types: a list of custom types
#   functions: public functions which the user can access

sdkspec: '001'

# This section outlines the general information for the library.
info:
  id: reference/dart
  version: next
  title: 'Supabase Dart Client'
  language: 'dart' # {string} The language where this library is used.
  source: 'https://github.com/supabase-community/supabase-dart' # {string} Where developers can find the source code.
  bugs: 'https://github.com/supabase-community/supabase-dart/issues' # {string} Where developers can file bugs.
  spec: '' # {string} Where developers can find this spec (to link directly in the docs).
  description: |

    Supabase Dart.

types:
  - id: type-auth-success
    title: AuthSuccess
    source: 'https://github.com/gotrue-js/success/link/to/type'
    value: |
      ```
      {
        message: string
        details: string
        hint: string
        code: string
      }
      ```
    ref: ['AuthSuccess'] # OPTIONAL {string}. Pointer to some other type.
    links: []

functions:
  - id: 'function-init'
    title: 'Initializing'
    summary: 'Initializing the client library'
    tags: []
    links: []
    description: |
      ## Dart
      You can initialize a new Supabase client using the `SupabaseClient()` method.

      The Supabase client is your entrypoint to the rest of the Supabase functionality
      and is the easiest way to interact with everything we offer within the Supabase ecosystem.


      ## Flutter

      For `supabase_flutter`, you will be using the static `initialize()` method on `Supabase` class.
    attributes: []
    usage: |
      ```dart
      final supabase = SupabaseClient('<SUPABASE_URL>', '<SUPABASE_ANON_KEY>');
      ```
    examples:
      - id: 'example-init-dart'
        name: Dart SupabaseClient()
        code: |
          ```dart
          final supabase = SupabaseClient('https://xyzcompany.supabase.co', 'public-anon-key');
          ```
      - id: 'example-init-flutter'
        name: Flutter initialize()
        code: |
          ```dart title="main.dart"
          Future<void> main() async {
            await Supabase.initialize(url: 'https://xyzcompany.supabase.co', anonKey: 'public-anon-key');
            runApp(MyApp());
          }
          ```
  - id: 'fucntion-signup'
    title: 'auth.signUp()'
    summary: 'Create a new user.'
    tags: []
    links: []
    description: |
      - By default, the user will need to verify their email address before logging in. If you would like to change this, you can disable "Email Confirmations" by going to Authentication -> Settings on [app.supabase.com](https://app.supabase.com)
      - If "Email Confirmations" is turned on, a user is returned but session will be null
      - If "Email Confirmations" is turned off, both a `user` and a `session` will be returned
      - When the user confirms their email address, they will be redirected to localhost:3000 by default. To change this, you can go to Authentication -> Settings on [app.supabase.com](https://app.supabase.com)
    attributes: []
    usage: |
      ```dart
      final res = await supabase.auth.signUp('<USER_EMAIL>', '<USER_PASSWORD>');
      ```
    examples:
      - id: 'example-signup'
        title: 'Sign up.'
        code: |
          ```dart
          final res = await supabase.auth.signUp('example@email.com', 'example-password');

          final user = res.data?.user;
          final error = res.error;
          ```
      - id: 'example-signup-with-third-party'
        title: 'Sign up with third-party providers.'
        description: |
          If you are using Flutter, you can sign up with OAuth providers using the [`signInWithProvider()`](/docs/reference/dart/auth-signinwithprovider) method available on `supabase_flutter`.
        code: |
          ```dart
          // Use signInWithProvider()
          ```
