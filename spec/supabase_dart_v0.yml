openref: 0.1

info:
  id: reference/dart
  title: Supabase Dart Client
  description: |

    Supabase Dart.

  definition: ../../spec/enrichments/tsdoc_v1/combined.json
  slugPrefix: '/'
  specUrl: https://github.com/supabase/supabase/edit/master/spec/supabase_dart_v0.yml
  libraries:
    - name: 'Dart'
      id: 'dart'
      version: '0.0.1'

functions:
  - id: installing
    title: Installing
    description: |
      ## Dart

      Dart libraries are built and supported by the community.

      ```bash
      dart pub add supabase
      ```

      Find the source code on [GitHub](https://github.com/supabase/supabase-dart).

      ## Flutter

      For Flutter project, you can use [supabase_flutter](https://github.com/supabase/supabase-flutter).

      ```bash
      flutter pub add supabase_flutter
      ```

      `supabase_flutter` plugin uses `supabase` plugin internally, and it adds some Flutter specific functionality such as handling deeplinks coming back from magic link verifications.
      If you are creating a Flutter application, we recommend using `supabase_flutter` instead of `supabase`.

      For the most part `supabase_flutter` shares the same API as `supabase` with few exceptions such as initialization or OAuth sign in.

  - id: initializing
    title: Initializing
    description: |
      ## Dart
      You can initialize a new Supabase client using the `SupabaseClient()` method.

      The Supabase client is your entrypoint to the rest of the Supabase functionality
      and is the easiest way to interact with everything we offer within the Supabase ecosystem.


      ## Flutter

      For `supabase_flutter`, you will be using the static `initialize()` method on `Supabase` class.

    examples:
      - id: dart-supabase-client
        name: Dart SupabaseClient()
        code: |
          ```dart
          final supabase = SupabaseClient('https://xyzcompany.supabase.co', 'public-anon-key');
          ```
      - id: flutter-initialize
        name: Flutter initialize()
        code: |
          ```dart title="main.dart"
          Future<void> main() async {
            await Supabase.initialize(url: 'https://xyzcompany.supabase.co', anonKey: 'public-anon-key');
            runApp(MyApp());
          }
          ```

  - id: sign-up
    title: 'signUp()'
    description: |
      Creates a new user.
    notes: |
      - By default, the user will need to verify their email address before logging in. If you would like to change this, you can disable "Email Confirmations" by going to Authentication -> Settings on [supabase.com/dashboard](https://supabase.com/dashboard)
      - If "Email Confirmations" is turned on, a user is returned but session will be null
      - If "Email Confirmations" is turned off, both a `user` and a `session` will be returned
      - When the user confirms their email address, they will be redirected to localhost:3000 by default. To change this, you can go to Authentication -> Settings on [supabase.com/dashboard](https://supabase.com/dashboard)
    examples:
      - id: sign-up
        name: Sign up.
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase.auth.signUp('example@email.com',　'example-password');

          final user = res.data?.user;
          final error = res.error;
          ```
      - id: sign-up-with-third-party-providers
        name: Sign up with third-party providers.
        hideCodeBlock: true
        description: |
          If you are using Flutter, you can sign up with OAuth providers using the [`signInWithProvider()`](/docs/reference/dart/v0/auth-signinwithprovider) method available on `supabase_flutter`.

  - id: sign-in
    title: signIn()
    description: |
      Log in an existing user, or login via a third-party provider.
    notes: |
      - A user can sign up via email, phone number.
      - If you provide `email` without a `password`, the user will be sent a magic link.
      - The magic link's destination URL is determined by the SITE_URL config variable. To change this, you can go to Authentication -> Settings on [supabase.com/dashboard](https://supabase.com/dashboard)
      - Similarly, if you provide `phone` without a `password`, the user will be sent a one time password.
      - If you are looking to sign users in with OAuth in Flutter apps, go to [`signInWithProvider()`](/docs/reference/dart/v0/auth-signinwithprovider).
    examples:
      - id: sign-in-with-email-and-password
        name: Sign in with email.
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase.auth.signIn(email: 'example@email.com', password: 'example-password');

          final user = res.data?.user;
          final error = res.error;
          ```
      - id: sign-in-with-magic-link
        name: Sign in with magic link.
        description: If email is provided, but no password is provided, the user will be sent a "magic link" to their email address, which they can click to open your application with a valid session. By default, a given user can only request a Magic Link once every 60 seconds.
        code: |
          ```dart
          final res = await supabase.auth.signIn(email: 'example@email.com');

          final error = res.error;
          ```
      - title: get-oauth-sign-in-url
        name: Get OAuth sign in URL.
        description: |
          Passing provider parameter to `signIn()` will return a URL to sign your user in via OAuth.
          If you are looking to sign in a user via OAuth on Flutter app, go to [`signInWithProvider()`](/docs/reference/dart/v0/auth-signinwithprovider).
        code: |
          ```dart
          final res = await supabase.auth.signIn(provider: Provider.github);

          final url = res.data?.url;
          final error = res.error;
          ```
  - id: sign-in-with-provider
    title: signInWithProvider()
    description: |
      Signs the user in using third party OAuth providers.
    notes: |
      - `auth.signInWithProvider()` is only available on `supabase_flutter`
      - It will open the browser to the relevant login page.
    examples:
      - id: sign-in-with-provider
        name: Sign in with provider.
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase.auth.signInWithProvider(Provider.github);

          final error = res.error;
          ```
      - id: sign-in-using-a-third-party-provider-with-redirect
        name: With `redirectTo`
        description: |
          Specify the redirect link to bring back the user via deeplink.
          Note that `redirectTo` should be null for Flutter Web.
        code: |
          ```dart
          final res = await supabase.auth.signInWithProvider(
            Provider.github,
            options: AuthOptions(
                redirectTo: kIsWeb
                    ? null
                    : 'io.supabase.flutter://reset-callback/'),
          );

          final error = res.error;
          ```
      - id: sign-in-with-scopes
        name: With scopes
        description: |
          If you need additional data from an OAuth provider, you can include a space-separated list of scopes in your request to get back an OAuth provider token.
          You may also need to specify the scopes in the provider's OAuth app settings, depending on the provider.
        code: |
          ```dart
          const { user, session, error } = await supabase.auth.signIn({
            provider: 'github'
          }, {
            scopes: 'repo gist notifications'
          })
          const oAuthToken = session.provider_token // use to access provider API
          ```
  - id: sign-out
    title: signOut()
    description: |
      Signs out the current user, if there is a logged in user.
    examples:
      - id: sign-out
        name: Sign out
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase.auth.signOut();

          final error = res.error;
          ```
  - id: session
    title: session()
    description: |
      Returns the session data, if there is an active session.
    examples:
      - name: Get the session data
        isSpotlight: true
        dart: |
          ```dart
          final session = supabase.auth.session();
          ```

  - id: user
    title: user()
    description: |
      Returns the user data, if there is a logged in user.
    examples:
      - name: Get the logged in user
        isSpotlight: true
        dart: |
          ```dart
          final user = supabase.auth.user();
          ```
  - id: get-session
    title: getSession()
    description: |
      Returns the session data, if there is an active session.
    examples:
      - id: get-the-session-data
        name: Get the session data
        isSpotlight: true
        code: |
          ```dart
          final session = supabase.auth.session();
          ```
  - id: get-user
    title: currentUser
    description: |
      Returns the user data, if there is a logged in user.
    examples:
      - name: Get the logged in user
        isSpotlight: true
        code: |
          ```dart
          final user = supabase.auth.user();
          ```

  - id: update-user
    title: updateUser()
    description: |
      Updates user data, if there is a logged in user.
    notes: |
      It's generally better to store user data in a table inside your public schema (i.e. `public.users`).
      Use the `update()` method if you have data which rarely changes or is specific only to the logged in user.
    examples:
      - id: update-the-users-metadata
        name: Update a user's metadata.
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase.auth.update(
            UserAttributes(data: {'hello': 'world'})
          );

          final error = res.error;
          ```

  - id: on-auth-state-change
    title: 'onAuthStateChange()'
    description: |
      Receive a notification every time an auth event happens.
    examples:
      - id: listen-to-auth-changes
        name: Listen to auth changes
        isSpotlight: true
        code: |
          ```dart
          final subscription = supabase.auth.onAuthStateChange((event, session) {
            print(session?.user?.id);
            // handle auth state change
          });
          ```

  - id: reset-password-for-email
    title: Reset Password (Email)
    description: |
      Sends a reset request to an email address.
    notes: |
      Sends a reset request to an email address.

      When the user clicks the reset link in the email they will be forwarded to:

      `<SITE_URL>#access_token=x&refresh_token=y&expires_in=z&token_type=bearer&type=recovery`

      Your app must detect `type=recovery` in the fragment and display a password reset form to the user.

      You should then use the access_token in the url and new password to update the user as follows:

      ```dart
      final res = await supabase.auth.api.updateUser(
        accessToken,
        UserAttributes(password: 'NEW_PASSWORD'),
      );
      ```
    examples:
      - id: reset-password
        name: Reset password
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase.auth.api.resetPasswordForEmail('user@example.com');

          final error = res.error;
          ```
      - id: reset-password-for-flutter
        name: Reset password for Flutter
        isSpotlight: true
        code: |
          You can pass `redirectTo` to open the app via deeplink when user opens the password reset email.
          ```dart
          final res = await supabase.auth.api.resetPasswordForEmail(
            'user@example.com',
            options: AuthOptions(redirectTo: kIsWeb
                ? null
                : 'io.supabase.flutter://reset-callback/'),
          );

          final error = res.error;
          ```
  - id: invoke
    title: 'invoke()'
    description: |
      Invokes a Supabase Function. See the [guide](/docs/guides/functions) for details on writing Functions.
    notes: |
      - Requires an Authorization header.
      - Invoke params generally match the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) spec.
    examples:
      - id: basic-invocation
        name: Basic invocation.
        isSpotlight: true
        code: |
          ```dart
          final res = await supabaseClient.functions.invoke('hello', body: {'foo': 'baa'});
          final data = res.data;
          final error = res.error;
          ```
      - id: specifying-response-type
        name: Specifying response type.
        description: |
          By default, `invoke()` will parse the response as JSON. You can parse the response in the following formats: `json`, `blob`, `text`, and `arrayBuffer`.
        isSpotlight: true
        code: |
          ```dart
          final res = await supabaseClient.functions.invoke(
            'hello',
            body: {'foo': 'baa'},
            responseType: ResponseType.text,
          );
          final data = res.data;
          final error = res.error;
          ```
      - id: parsing-custom-headers
        name: Parsing custom headers.
        description: |
          Any `headers` will be passed through to the function. A common pattern is to pass a logged-in user's JWT token as an Authorization header.
        isSpotlight: true
        code: |
          ```dart
          final res = await supabaseClient.functions.invoke(
            'hello',
            body: {'foo': 'baa'},
            headers: {
              'Authorization': 'Bearer ${supabase.auth.session()?.access_token}'
            },
          );
          ```
  - id: select
    description: |
      Performs vertical filtering with SELECT.
    title: 'Fetch data: select()'
    notes: |
      - By default, Supabase projects will return a maximum of 1,000 rows. This setting can be changed in Project API Settings. It's recommended that you keep it low to limit the payload size of accidental or malicious requests. You can use `range()` queries to paginate through your data.
      - `select()` can be combined with [Modifiers](/docs/reference/dart/using-modifiers)
      - `select()` can be combined with [Filters](/docs/reference/dart/using-filters)
      - If using the Supabase hosted platform `apikey` is technically a reserved keyword, since the API gateway will pluck it out for authentication. [It should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).
    examples:
      - id: getting-your-data
        name: Getting your data
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .select()
            .execute();

          final data = res.data;
          final error = res.error;
          ```
      - id: selecting-specific-columns
        name: Selecting specific columns
        description: You can select specific fields from your tables.
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .select('name')
            .execute();
          ```
      - id: query-foreign-tables
        name: Query foreign tables
        description: If your database has relationships, you can query related tables too.
        code: |
          ```dart
          final res = await supabase
            .from('countries')
            .select('''
              name,
              cities (
                name
              )
            ''')
            .execute();
          ```
      - id: query-the-same-foreign-table-multiple-times
        name: Query the same foreign table multiple times
        description: |
          Sometimes you will need to query the same foreign table twice.
          In this case, you can use the name of the joined column to identify
          which join you intend to use. For convenience, you can also give an
          alias for each column. For example, if we had a shop of products,
          and we wanted to get the supplier and the purchaser at the same time
          (both in the users) table:
        code: |
          ```dart
          final res = await supabase
            .from('products')
            .select('''
              id,
              supplier:supplier_id ( name ),
              purchaser:purchaser_id ( name )
            ''')
            .execute();
          ```
      - id: filtering-with-inner-joins
        name: Filtering with inner joins
        description: |
          If you want to filter a table based on a child table's values you can use the `!inner()` function. For example, if you wanted
          to select all rows in a `message` table which belong to a user with the `username` "Jane":
        code: |
          ```dart
          final res = await supabase
            .from('messages')
            .select('*, users!inner(*)')
            .eq('users.username', 'Jane')
            .execute();
          ```
      - id: querying-with-count-option
        name: Querying with count option
        description: |
          You can get the number of rows by using the count option.
          Allowed values for count option are [exact](https://postgrest.org/en/stable/api.html#exact-count), [planned](https://postgrest.org/en/stable/api.html#planned-count) and [estimated](https://postgrest.org/en/stable/api.html#estimated-count).
        code: |
          ```dart
          final res = await supabase
              .from('cities')
              .select('name')
              .execute(count: CountOption.exact);

          final count = res.count;
          ```
      - id: querying-json-data
        name: Querying JSON data
        description: |
          If you have data inside of a JSONB column, you can apply select
          and query filters to the data values. Postgres offers a
          [number of operators](https://www.postgresql.org/docs/current/functions-json.html)
          for querying JSON data. Also see
          [PostgREST docs](http://postgrest.org/en/v7.0.0/api.html#json-columns) for more details.
        code: |
          ```dart
          final res = await supabase
            .from('users')
            .select('''
              id, name,
              address->street
            ''')
            .eq('address->postcode', 90210)
            .execute();
          ```
      - id: return-data-as-csv
        name: Return data as CSV
        description: |
          By default the data is returned in JSON format, however you can also request for it to be returned as Comma Separated Values.
        code: |
          ```dart
          final res = await supabase
            .from('users')
            .select()
            .csv()
            .execute();
          ```

  - id: insert
    description: |
      Performs an INSERT into the table.
    title: 'Create data: insert()'
    notes: |
      - By default, every time you run `insert()`, the client library will make a `select` to return the full record.
      This is convenient, but it can also cause problems if your Policies are not configured to allow the `select` operation.
      If you are using Row Level Security and you are encountering problems, try setting the `returning` param to `minimal`.
    examples:
      - id: create-a-record
        name: Create a record
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .insert([
              {'name': 'The Shire', 'country_id': 554}
            ]).execute();
          ```
      - id: bulk-create
        name: Bulk create
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .insert([
              {'name': 'The Shire', 'country_id': 554},
              {'name': 'Rohan', 'country_id': 555},
            ]).execute();
          ```

  - id: update
    description: |
      Performs an UPDATE on the table.
    title: 'Modify data: update()'
    notes: |
      - `update()` should always be combined with [Filters](/docs/reference/dart/using-filters) to target the item(s) you wish to update.
    examples:
      - id: updating-your-data
        name: Updating your data
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .update({ 'name': 'Middle Earth' })
            .match({ 'name': 'Auckland' })
            .execute();
          ```
      - id: updating-json-data
        name: Updating JSON data
        description: |
          Postgres offers a
          [number of operators](https://www.postgresql.org/docs/current/functions-json.html)
          for working with JSON data. Right now it is only possible to update an entire JSON document,
          but we are [working on ideas](https://github.com/PostgREST/postgrest/issues/465) for updating individual keys.
        code: |
          ```dart
          final res = await supabase
            .from('users')
            .update({
              'address': {
                'street': 'Melrose Place',
                'postcode': 90210
              }
            })
            .eq('address->postcode', 90210)
            .execute();
          ```

  - id: upsert
    description: |
      Performs an UPSERT into the table.
    title: 'Upsert data: upsert()'
    notes: |
      - Primary keys should be included in the data payload in order for an update to work correctly.
      - Primary keys must be natural, not surrogate. There are however, [workarounds](https://github.com/PostgREST/postgrest/issues/1118) for surrogate primary keys.
    examples:
      - id: upsert-your-data
        name: Upsert your data
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('messages')
            .upsert({ 'id': 3, 'message': 'foo', 'username': 'supabot' })
            .execute();
          ```
      - id: upserting-into-tables-with-constraints
        name: Upserting into tables with constraints
        description: |
          Running the following will cause supabase to upsert data into the `users` table.
          If the username 'supabot' already exists, the `onConflict` argument tells supabase to overwrite that row
          based on the column passed into `onConflict`.
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('users')
            .upsert({ 'username': 'supabot' }, { 'onConflict': 'username' })
            .execute();
          ```
      - id: return-the-exact-number-of-rows
        name: Return the exact number of rows
        description: |
          Allowed values for count option are `exact`, `planned` and `estimated`.
        code: |
          ```dart
          final res = await supabase
            .from('users')
            .upsert({
                'id': 3,
                'message': 'foo',
                'username': 'supabot'
            })
            .execute(count: CountOption.exact);
          ```

  - id: delete
    title: 'Delete data: delete()'
    description: |
      Performs a DELETE on the table.
    notes: |
      - `delete()` should always be combined with [Filters](/docs/reference/dart/using-filters) to target the item(s) you wish to delete.
    examples:
      - id: delete-records
        name: Delete records
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .delete()
            .match({ 'id': 666 })
            .execute();
          ```

  - id: rpc
    title: 'Stored Procedures: rpc()'
    description: |
      You can call stored procedures as a "Remote Procedure Call".

      That's a fancy way of saying that you can put some logic into your database then call it from anywhere.
      It's especially useful when the logic rarely changes - like password resets and updates.
    examples:
      - id: call-a-stored-procedure
        name: Call a stored procedure
        isSpotlight: true
        description: This is an example invoking a stored procedure.
        code: |
          ```dart
          final res = await supabase
            .rpc('hello_world')
            .execute();
          ```
      - id: with-parameters
        name: With Parameters
        code: |
          ```dart
          final res = await supabase
            .rpc('echo_city', params: { 'name': 'The Shire' })
            .execute();
          ```
      - id: with-count-option
        name: With count option
        description: |
          You can specify a count option to get the row count along with your data.
          Allowed values for count option are `exact`, `planned` and `estimated`.
        code: |
          ```dart
          final res = await supabase
            .rpc('hello_world')
            .execute(count: CountOption.exact);
          ```

  - id: subscribe
    description: |
      Subscribe to realtime changes in your database.
    title: 'on().subscribe()'
    notes: |
      - Realtime is disabled by default for new Projects for better database performance and security. You can turn it on by [managing replication](/docs/guides/database/api#managing-realtime).
      - If you want to receive the "previous" data for updates and deletes, you will need to set `REPLICA IDENTITY` to `FULL`, like this: `ALTER TABLE your_table REPLICA IDENTITY FULL;`
    examples:
      - id: listen-to-all-database-changes
        name: Listen to all database changes
        isSpotlight: true
        code: |
          ```dart
          final mySubscription = supabase
            .from('countries')
            .on(SupabaseEventTypes.all, (payload) {
              // Handle realtime payload
            })
            .subscribe();
          ```
      - id: listen-to-a-specific-table
        name: Listen to a specific table
        code: |
          ```dart
          final mySubscription = supabase
            .from('countries')
            .on(SupabaseEventTypes.all, (payload) {
              // Handle realtime payload
            })
            .subscribe();
          ```
      - id: listen-to-inserts
        name: Listen to inserts
        code: |
          ```dart
          final mySubscription = supabase
            .from('countries')
            .on(SupabaseEventTypes.insert, (payload) {
              // Handle realtime payload
            })
            .subscribe();
          ```
      - id: listen-to-updates
        name: Listen to updates
        description: |
          By default, Supabase will send only the updated record. If you want to receive the previous values as well you can
          enable full replication for the table you are listening too:

          ```sql
          alter table "your_table" replica identity full;
          ```
        code: |
          ```dart
          final mySubscription = supabase
            .from('countries')
            .on(SupabaseEventTypes.update, (payload) {
              // Handle realtime payload
            })
            .subscribe();
          ```
      - id: listen-to-deletes
        name: Listen to deletes
        description: |
          By default, Supabase does not send deleted records. If you want to receive the deleted record you can
          enable full replication for the table you are listening too:

          ```sql
          alter table "your_table" replica identity full;
          ```
        code: |
          ```dart
          final mySubscription = supabase
            .from('countries')
            .on(SupabaseEventTypes.delete, (payload) {
              // Handle realtime payload
            })
            .subscribe();
          ```
      - id: listen-to-multiple-events
        name: Listen to multiple events
        description: You can chain listeners if you want to listen to multiple events for each table.
        code: |
          ```dart
          final mySubscription = supabase
            .from('countries')
            .on(SupabaseEventTypes.insert, handleInsert)
            .on(SupabaseEventTypes.delete, handleDelete)
            .subscribe();
          ```
      - id: listening-to-row-level-changes
        name: Listen to row level changes
        description: You can listen to individual rows using the format `{table}:{col}=eq.{val}` - where `{col}` is the column name, and `{val}` is the value which you want to match.
        code: |
          ```dart
          final mySubscription = supabase
            .from('countries:id=eq.200')
            .on(SupabaseEventTypes.update, handleRecordUpdated)
            .subscribe();
          ```

  - id: remove-subscription
    description: |
      Removes an active subscription and returns the number of open connections.
    title: 'removeSubscription()'
    notes: |
      - Removing subscriptions is a great way to maintain the performance of your project's database. Supabase will automatically handle cleanup 30 seconds after a user is disconnected, but unused subscriptions may cause degradation as more users are simultaneously subscribed.
    examples:
      - id: remove-a-subscription
        name: Remove a subscription
        isSpotlight: true
        code: |
          ```dart
          supabase.removeSubscription(mySubscription);
          ```

  - id: get-subscriptions
    description: |
      Returns an array of all your subscriptions.
    title: 'getSubscriptions()'
    examples:
      - id: get-all-subscriptions
        name: Get all subscriptions
        isSpotlight: true
        code: |
          ```dart
          final subscriptions = supabase.getSubscriptions();
          ```

  - id: stream
    description: |
      Notifies of data at the queried table.
    title: 'stream()'
    notes: |
      - `stream()` will emit the initial data as well as any further change on the database as `Stream` of `List<Map<String, dynamic>>` by combining Postgrest and Realtime.
      - Takes a list of primary key columns as its argument.
    examples:
      - id: listen-to-a-specific-table
        name: Listen to a specific table
        isSpotlight: true
        code: |
          ```dart
          supabase
            .from('countries')
            .stream(['id'])
            .execute();
          ```
      - id: listening-to-a-specific-rows-within-a-table
        name: Listening to a specific rows within a table
        description: |
          You can listen to individual rows using the format `{table}:{col}=eq.{val}` - where `{col}` is the column name, and `{val}` is the value which you want to match.
          This syntax is the as how you can filter data in Realtime
        code: |
          ```dart
          supabase
            .from('countries:id=eq.120')
            .stream(['id'])
            .execute();
          ```
      - id: with-order
        name: With `order()`
        code: |
          ```dart
          supabase
            .from('countries')
            .stream(['id'])
            .order('name', ascending: false)
            .execute();
          ```
      - id: with-limit
        name: With `limit()`
        code: |
          ```dart
          supabase
            .from('countries')
            .stream(['id'])
            .order('name', ascending: false)
            .limit(10)
            .execute();
          ```

  - id: list-buckets
    description: |
      Retrieves the details of all Storage buckets within an existing product.
    title: 'listBuckets()'
    $ref: '@supabase/storage-js."lib/StorageBucketApi".StorageBucketApi.listBuckets'
    notes: |
      - Policy permissions required:
        - `buckets` permissions: `select`
        - `objects` permissions: none
    examples:
      - id: list-buckets
        name: List buckets
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .storage
            .listBuckets()
          ```

  - id: get-bucket
    description: |
      Retrieves the details of an existing Storage bucket.
    title: 'getBucket()'
    $ref: '@supabase/storage-js."lib/StorageBucketApi".StorageBucketApi.getBucket'
    notes: |
      - Policy permissions required:
        - `buckets` permissions: `select`
        - `objects` permissions: none
    examples:
      - id: get-bucket
        name: Get bucket
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .storage
            .getBucket('avatars')
          ```

  - id: create-bucket
    description: |
      Creates a new Storage bucket
    title: 'createBucket()'
    notes: |
      - Policy permissions required:
        - `buckets` permissions: `insert`
        - `objects` permissions: none
    examples:
      - id: create-bucket
        name: Create bucket
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .storage
            .createBucket('avatars');
          ```

  - id: empty-bucket
    description: |
      Removes all objects inside a single bucket.
    title: 'emptyBucket()'
    notes: |
      - Policy permissions required:
        - `buckets` permissions: `select`
        - `objects` permissions: `select` and `delete`
    examples:
      - id: empty-bucket
        name: Empty bucket
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .storage
            .emptyBucket('avatars');
          ```
  - id: update-bucket
    description: |
      Updates a new Storage bucket
    title: 'updateBucket()'
    notes: |
      - Policy permissions required:
        - `buckets` permissions: `update`
        - `objects` permissions: none
    examples:
      - id: update-bucket
        name: Update bucket
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .storage
            .updateBucket('avatars', { public: false });
          ```

  - id: delete-bucket
    description: |
      Deletes an existing bucket. A bucket can't be deleted with existing objects inside it. You must first `empty()` the bucket.
    title: 'deleteBucket()'
    notes: |
      - Policy permissions required:
        - `buckets` permissions: `select` and `delete`
        - `objects` permissions: none
    examples:
      - id: delete-bucket
        name: Delete bucket
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .storage
            .deleteBucket('avatars');
          ```

  - id: from-upload
    description: |
      Uploads a file to an existing bucket.
    title: 'from.upload()'
    $ref: '@supabase/storage-js."lib/StorageFileApi".StorageFileApi.upload'
    notes: |
      - Policy permissions required:
        - `buckets` permissions: none
        - `objects` permissions: `insert`
    examples:
      - id: upload-file
        name: Upload file
        isSpotlight: true
        code: |
          ```dart
          final avatarFile = File('path/to/file');
          final res = await supabase
            .storage
            .from('avatars')
            .upload('public/avatar1.png', avatarFile, fileOptions: FileOptions(
              cacheControl: '3600',
              upsert: false
            ));
          ```

  - id: from-update
    description: |
      Replaces an existing file at the specified path with a new one.
    title: 'from.update()'
    notes: |
      - Policy permissions required:
        - `buckets` permissions: none
        - `objects` permissions: `update` and `select`
    examples:
      - id: update-file
        name: Update file
        isSpotlight: true
        code: |
          ```dart
          final avatarFile = File('path/to/file');
          final res = await supabase
            .storage
            .from('avatars')
            .update('public/avatar1.png', avatarFile, fileOptions: FileOptions(
              cacheControl: '3600',
              upsert: false
            ));
          ```

  - id: from-move
    description: |
      Moves an existing file, optionally renaming it at the same time.
    title: 'from.move()'
    notes: |
      - Policy permissions required:
        - `buckets` permissions: none
        - `objects` permissions: `update` and `select`
    examples:
      - id: move-file
        name: Move file
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .storage
            .from('avatars')
            .move('public/avatar1.png', 'private/avatar2.png');
          ```

  - id: from-create-signed-url
    description: |
      Create signed url to download file without requiring permissions. This URL can be valid for a set number of seconds.
    title: 'from.createSignedUrl()'
    notes: |
      - Policy permissions required:
        - `buckets` permissions: none
        - `objects` permissions: `select`
    examples:
      - id: create-signed-url
        name: Create Signed URL
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .storage
            .from('avatars')
            .createSignedUrl('avatar1.png', 60);

          final signedURL = res.data;
          ```

  - id: from-get-public-url
    description: |
      Retrieve URLs for assets in public buckets
    title: 'from.getPublicUrl()'
    notes: |
      - The bucket needs to be set to public, either via [updateBucket()](/docs/reference/javascript/storage-updatebucket) or by going to Storage on [supabase.com/dashboard](https://supabase.com/dashboard), clicking the overflow menu on a bucket and choosing "Make public"
      - Policy permissions required:
        - `buckets` permissions: none
        - `objects` permissions: none
    examples:
      - id: returns-the-url-for-an-asset-in-a-public-bucket
        name: Returns the URL for an asset in a public bucket
        isSpotlight: true
        code: |
          ```dart
          final res = supabase
            .storage
            .from('public-bucket')
            .getPublicUrl('avatar1.png');

          final publicURL = res.data;
          ```

  - id: from-download
    description: |
      Downloads a file.
    title: 'from.download()'
    notes: |
      - Policy permissions required:
        - `buckets` permissions: none
        - `objects` permissions: `select`
    examples:
      - id: download-file
        name: Download file
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .storage
            .from('avatars')
            .download('avatar1.png');
          ```

  - id: from-remove
    description: |
      Deletes files within the same bucket
    title: 'from.remove()'
    notes: |
      - Policy permissions required:
        - `buckets` permissions: none
        - `objects` permissions: `delete` and `select`
    examples:
      - id: delete-file
        name: Delete file
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .storage
            .from('avatars')
            .remove(['avatar1.png']);
          ```

  - id: from-list
    description: |
      Lists all the files within a bucket.
    title: 'from.list()'
    notes: |
      - Policy permissions required:
        - `buckets` permissions: none
        - `objects` permissions: `select`
    examples:
      - id: list-files-in-a-bucket
        name: List files in a bucket
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .storage
            .from('avatars')
            .list();
          ```
  - id: using-modifiers
    title: Using Modifiers
    description: |
      Modifiers can be used on `select()` queries.

      If a Stored Procedure returns a table response, you can also apply modifiers to the `rpc()` function.

  - id: limit
    title: limit()
    description: |
      Limits the result with the specified count.
    examples:
      - id: with-select
        name: With `select()`
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .select('name, country_id')
            .limit(1)
            .execute();
          ```
      - id: with-embedded-resources
        name: With embedded resources
        code: |
          ```dart
          final res = await supabase
            .from('countries')
            .select('name, cities(name)')
            .eq('name', 'United States')
            .limit(1,  foreignTable: 'cities' )
            .execute();
          ```

  - id: order
    title: order()
    description: |
      Orders the result with the specified column.
    examples:
      - id: with-select
        name: With `select()`
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .select('name, country_id')
            .order('id',  ascending: false )
            .execute();
          ```
      - id: with-embedded-resources
        name: With embedded resources
        code: |
          ```dart
          final res = await supabase
            .from('countries')
            .select('name, cities(name)')
            .eq('name', 'United States')
            .order('name', foreignTable: 'cities')
            .execute();
          ```

  - id: range
    title: range()
    description: |
      Limits the result to rows within the specified range, inclusive.
    examples:
      - id: with-select
        name: With `select()`
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .select('name, country_id')
            .range(0,3)
            .execute();
          ```

  - id: single
    title: single()
    description: |
      Retrieves only one row from the result. Result must be one row (e.g. using limit), otherwise this will result in an error.
    examples:
      - id: with-select
        name: With `select()`
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .select('name, country_id')
            .single()
            .execute();
          ```

  - id: using-filters
    title: Using Filters
    description: |
      Filters can be used on `select()`, `update()`, and `delete()` queries.
      If a Stored Procedure returns a table response, you can also apply filters.
      Filters must be applied to the end of queries and can also be chained together to produce advanced queries.
    examples:
      - id: applying-filters
        name: Applying filters
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .select('name, country_id')
            .eq('name', 'The Shire')    // Correct
            .execute();

          final res = await supabase
            .from('cities')
            .eq('name', 'The Shire')    // Incorrect
            .select('name, country_id')
            .execute();
          ```
      - id: chaining-filters
        name: Chaining filters
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .select('name, country_id')
            .gte('population', 1000)
            .lt('population', 10000)
            .execute();
          ```

  - id: or
    title: or()
    description: |
      Finds all rows satisfying at least one of the filters.
    notes: |
      - `.or()` expects you to use the raw [PostgREST syntax](https://postgrest.org/en/stable/api.html#horizontal-filtering-rows) for the filter names and values.

        ```dart
        .or('id.in.(6,7),arraycol.cs.{"a","b"}')  // Use Postgres list () and 'in' for in_ filter. Array {} and 'cs' for contains.
        .or('id.in.(${mylist.join(',')}),arraycol.cs.{${mylistArray.join(',')}}')	// You can insert a Dart list for list or array column.
        .or('id.in.(${mylist.join(',')}),rangecol.cs.(${mylistRange.join(',')}]')	// You can insert a Dart list for list or range column.
        ```
    examples:
      - id: with-select
        name: With `select()`
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .select('name, country_id')
            .or('id.eq.20,id.eq.30')
            .execute();
          ```
      - id: use-or-with-and
        name: Use `or` with `and`
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .select('name, country_id')
            .or('id.gt.20,and(name.eq.New Zealand,name.eq.France)')
            .execute();
          ```
      # TODO Not available at the moment, so would have to fix the bug on postgrest-dart first
      # - name: Use `or` on foreign tables
      #   isSpotlight: true
      #   code: |
      #     ```dart
      #     final res = await supabase
      #       .from('countries')
      #       .select('id, cities(*)')
      #       .or('name.eq.Wellington,name.eq.Paris', { foreignTable: "cities" })
      #     ```

  - id: not
    title: not()
    description: |
      Finds all rows which doesn't satisfy the filter.
    notes: |
      - `.not()` expects you to use the raw [PostgREST syntax](https://postgrest.org/en/stable/api.html#horizontal-filtering-rows) for the filter names and values.

        ```dart
        .not('name','eq','Paris')
        .not('arraycol','cs','{"a","b"}') // Use Postgres array {} for array column and 'cs' for contains.
        .not('rangecol','cs','(1,2]') // Use Postgres range syntax for range column.
        .not('id','in','(6,7)')  // Use Postgres list () and 'in' for in_ filter.
        .not('id','in','(${mylist.join(',')})')  // You can insert a Dart list array.
        ```
    examples:
      - id: with-select
        name: With `select()`
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .select('name, country_id')
            .not('name', 'eq', 'Paris')
            .execute();
          ```
      - id: with-update
        name: With `update()`
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .update({ 'name': 'Mordor' })
            .not('name', 'eq', 'Paris')
            .execute();
          ```
      - id: with-delete
        name: With `delete()`
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .delete()
            .not('name', 'eq', 'Paris')
            .execute();
          ```
      - id: with-rpc
        name: With `rpc()`
        code: |
          ```dart
          // Only valid if the Stored Procedure returns a table type.
          final res = await supabase
            .rpc('echo_all_cities)
            .not('name', 'eq', 'Paris')
            .execute();
          ```

  - id: match
    title: match()
    description: |
      Finds all rows whose columns match the specified `query` object.
    examples:
      - id: with-select
        name: With `select()`
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .select('name, country_id')
            .match({'name': 'Beijing', 'country_id': 156})
            .execute();
          ```
      - id: with-update
        name: With `update()`
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .update({ 'name': 'Mordor' })
            .match({'name': 'Beijing', 'country_id': 156})
            .execute();
          ```
      - id: with-delete
        name: With `delete()`
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .delete()
            .match({'name': 'Beijing', 'country_id': 156})
            .execute();
          ```
      - id: with-rpc
        name: With `rpc()`
        code: |
          ```dart
          // Only valid if the Stored Procedure returns a table type.
          final res = await supabase
            .rpc('echo_all_cities')
            .match({'name': 'Beijing', 'country_id': 156})
            .execute();
          ```

  - id: eq
    title: eq()
    description: |
      Finds all rows whose value on the stated `column` exactly matches the specified `value`.
    examples:
      - id: with-select
        name: With `select()`
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .select('name, country_id')
            .eq('name', 'The shire')
            .execute();
          ```
      - id: with-update
        name: With `update()`
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .update({ 'name': 'Mordor' })
            .eq('name', 'San Francisco')
            .execute();
          ```
      - id: with-delete
        name: With `delete()`
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .delete()
            .eq('name', 'Mordor')
            .execute();
          ```
      - id: with-rpc
        name: With `rpc()`
        code: |
          ```dart
          // Only valid if the Stored Procedure returns a table type.
          final res = await supabase
            .rpc('echo_all_cities')
            .eq('name', 'San Francisco')
            .execute();
          ```

  - id: neq
    title: neq()
    description: |
      Finds all rows whose value on the stated `column` doesn't match the specified `value`.
    examples:
      - id: with-select
        name: With `select()`
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .select('name, country_id')
            .neq('name', 'The shire')
            .execute();
          ```
      - id: with-update
        name: With `update()`
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .update({ 'name': 'Mordor' })
            .neq('name', 'San Francisco')
            .execute();
          ```
      - id: with-delete
        name: With `delete()`
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .delete()
            .neq('name', 'Mordor')
            .execute();
          ```
      - id: with-rpc
        name: With `rpc()`
        code: |
          ```dart
          // Only valid if the Stored Procedure returns a table type.
          final res = await supabase
            .rpc('echo_all_cities')
            .neq('name', 'Lagos')
            .execute();
          ```

  - id: gt
    title: gt()
    description: |
      Finds all rows whose value on the stated `column` is greater than the specified `value`.
    examples:
      - id: with-select
        name: With `select()`
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .select('name, country_id')
            .gt('country_id', 250)
            .execute();
          ```
      - id: with-update
        name: With `update()`
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .update({ 'name': 'Mordor' })
            .gt('country_id', 250)
            .execute();
          ```
      - id: with-delete
        name: With `delete()`
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .delete()
            .gt('country_id', 250)
            .execute();
          ```
      - id: with-rpc
        name: With `rpc()`
        code: |
          ```dart
          // Only valid if the Stored Procedure returns a table type.
          final res = await supabase
            .rpc('echo_all_cities')
            .gt('country_id', 250)
            .execute();
          ```

  - id: gte
    title: gte()
    description: |
      Finds all rows whose value on the stated `column` is greater than or equal to the specified `value`.
    examples:
      - id: with-select
        name: With `select()`
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .select('name, country_id')
            .gte('country_id', 250)
            .execute();
          ```
      - id: with-update
        name: With `update()`
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .update({ 'name': 'Mordor' })
            .gte('country_id', 250)
            .execute();
          ```
      - id: with-delete
        name: With `delete()`
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .delete()
            .gte('country_id', 250)
            .execute();
          ```
      - id: with-rpc
        name: With `rpc()`
        code: |
          ```dart
          // Only valid if the Stored Procedure returns a table type.
          final res = await supabase
            .rpc('echo_all_cities')
            .gte('country_id', 250)
            .execute();
          ```

  - id: lt
    title: lt()
    description: |
      Finds all rows whose value on the stated `column` is less than the specified `value`.
    examples:
      - id: with-select
        name: With `select()`
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .select('name, country_id')
            .lt('country_id', 250)
            .execute();
          ```
      - id: with-update
        name: With `update()`
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .update({ 'name': 'Mordor' })
            .lt('country_id', 250)
            .execute();
          ```
      - id: with-delete
        name: With `delete()`
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .delete()
            .lt('country_id', 250)
            .execute();
          ```
      - id: with-rpc
        name: With `rpc()`
        code: |
          ```dart
          // Only valid if the Stored Procedure returns a table type.
          final res = await supabase
            .rpc('echo_all_cities')
            .lt('country_id', 250)
            .execute();
          ```

  - id: lte
    title: lte()
    description: |
      Finds all rows whose value on the stated `column` is less than or equal to the specified `value`.
    $ref: '@supabase/postgrest-js."lib/PostgrestFilterBuilder".PostgrestFilterBuilder.lte'
    examples:
      - id: with-select
        name: With `select()`
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .select('name, country_id')
            .lte('country_id', 250)
            .execute();
          ```
      - id: with-update
        name: With `update()`
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .update({ 'name': 'Mordor' })
            .lte('country_id', 250)
            .execute();
          ```
      - id: with-delete
        name: With `delete()`
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .delete()
            .lte('country_id', 250)
            .execute();
          ```
      - id: with-rpc
        name: With `rpc()`
        code: |
          ```dart
          // Only valid if the Stored Procedure returns a table type.
          final res = await supabase
            .rpc('echo_all_cities')
            .lte('country_id', 250)
            .execute();
          ```

  - id: like
    title: like()
    description: |
      Finds all rows whose value in the stated `column` matches the supplied `pattern` (case sensitive).
    $ref: '@supabase/postgrest-js."lib/PostgrestFilterBuilder".PostgrestFilterBuilder.like'
    examples:
      - id: with-select
        name: With `select()`
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .select('name, country_id')
            .like('name', '%la%')
            .execute();
          ```
      - id: with-update
        name: With `update()`
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .update({ 'name': 'Mordor' })
            .like('name', '%la%')
            .execute();
          ```
      - id: with-delete
        name: With `delete()`
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .delete()
            .like('name', '%la%')
            .execute();
          ```
      - id: with-rpc
        name: With `rpc()`
        code: |
          ```dart
          // Only valid if the Stored Procedure returns a table type.
          final res = await supabase
            .rpc('echo_all_cities')
            .like('name', '%la%')
            .execute();
          ```

  - id: ilike
    title: ilike()
    description: |
      Finds all rows whose value in the stated `column` matches the supplied `pattern` (case insensitive).
    examples:
      - id: with-select
        name: With `select()`
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .select('name, country_id')
            .ilike('name', '%la%')
            .execute();
          ```
      - id: with-update
        name: With `update()`
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .update({ 'name': 'Mordor' })
            .ilike('name', '%la%')
            .execute();
          ```
      - id: with-delete
        name: With `delete()`
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .delete()
            .ilike('name', '%la%')
            .execute();
          ```
      - id: with-rpc
        name: With `rpc()`
        code: |
          ```dart
          // Only valid if the Stored Procedure returns a table type.
          final res = await supabase
            .rpc('echo_all_cities')
            .ilike('name', '%la%')
            .execute();
          ```

  - id: is
    title: is_()
    description: |
      A check for exact equality (null, true, false), finds all rows whose value on the stated `column` exactly match the specified `value`.

      `is_` and `in_` filter methods are suffixed with `_` to avoid collisions with reserved keywords.
    examples:
      - id: with-select
        name: With `select()`
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .select('name, country_id')
            .is_('name', null)
            .execute();
          ```
      - id: with-update
        name: With `update()`
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .update({ 'name': 'Mordor' })
            .is_('name', null)
            .execute();
          ```
      - id: with-delete
        name: With `delete()`
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .delete()
            .is_('name', null)
            .execute();
          ```
      - id: with-rpc
        name: With `rpc()`
        code: |
          ```dart
          // Only valid if the Stored Procedure returns a table type.
          final res = await supabase
            .rpc('echo_all_cities')
            .is_('name', null)
            .execute();
          ```

  - id: in
    title: in_()
    description: |
      Finds all rows whose value on the stated `column` is found on the specified `values`.

      `is_` and `in_` filter methods are suffixed with `_` to avoid collisions with reserved keywords.
    examples:
      - id: with-select
        name: With `select()`
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .select('name, country_id')
            .in_('name', ['Rio de Janeiro', 'San Francisco'])
            .execute();
          ```
      - id: with-update
        name: With `update()`
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .update({ 'name': 'Mordor' })
            .in_('name', ['Rio de Janeiro', 'San Francisco'])
            .execute();
          ```
      - id: with-delete
        name: With `delete()`
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .delete()
            .in_('name', ['Rio de Janeiro', 'San Francisco'])
            .execute();
          ```
      - id: with-rpc
        name: With `rpc()`
        code: |
          ```dart
          // Only valid if the Stored Procedure returns a table type.
          final res = await supabase
            .rpc('echo_all_cities')
            .in_('name', ['Rio de Janeiro', 'San Francisco'])
            .execute();
          ```

  - id: contains
    title: contains()
    examples:
      - id: with-select
        name: With `select()`
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('countries')
            .select('name, id, main_exports')
            .contains('main_exports', ['oil'])
            .execute();
          ```
      - id: with-update
        name: With `update()`
        code: |
          ```dart
          final res = await supabase
            .from('countries')
            .update({ 'name': 'Mordor' })
            .contains('main_exports', ['oil'])
            .execute();
          ```
      - id: with-delete
        name: With `delete()`
        code: |
          ```dart
          final res = await supabase
            .from('countries')
            .delete()
            .contains('main_exports', ['oil'])
            .execute();
          ```
      - id: with-rpc
        name: With `rpc()`
        code: |
          ```dart
          // Only valid if the Stored Procedure returns a table type.
          final res = await supabase
            .rpc('echo_all_countries')
            .contains('main_exports', ['oil'])
            .execute();
          ```

  - id: contained-by
    title: containedBy()
    examples:
      - id: with-select
        name: With `select()`
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('countries')
            .select('name, id, main_exports')
            .containedBy('main_exports', ['cars', 'food', 'machine'])
            .execute();
          ```
      - id: with-update
        name: With `update()`
        code: |
          ```dart
          final res = await supabase
            .from('countries')
            .update({ 'name': 'Mordor' })
            .containedBy('main_exports', ['orks', 'surveillance', 'evil'])
            .execute();
          ```
      - id: with-delete
        name: With `delete()`
        code: |
          ```dart
          final res = await supabase
            .from('countries')
            .delete()
            .containedBy('main_exports', ['cars', 'food', 'machine'])
            .execute();
          ```
      - id: with-rpc
        name: With `rpc()`
        code: |
          ```dart
          // Only valid if the Stored Procedure returns a table type.
          final res = await supabase
            .rpc('echo_all_countries')
            .containedBy('main_exports', ['cars', 'food', 'machine'])
            .execute();
          ```

  - id: range-lt
    title: rangeLt()
    examples:
      - id: with-select
        name: With `select()`
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('countries')
            .select('name, id, population_range_millions')
            .rangeLt('population_range_millions', '[150, 250]')
            .execute();
          ```
      - id: with-update
        name: With `update()`
        code: |
          ```dart
          final res = await supabase
            .from('countries')
            .update({ 'name': 'Mordor' })
            .rangeLt('population_range_millions', '[150, 250]')
            .execute();
          ```
      - id: with-delete
        name: With `delete()`
        code: |
          ```dart
          final res = await supabase
            .from('countries')
            .delete()
            .rangeLt('population_range_millions', '[150, 250]')
            .execute();
          ```
      - id: with-rpc
        name: With `rpc()`
        code: |
          ```dart
          // Only valid if the Stored Procedure returns a table type.
          final res = await supabase
            .rpc('echo_all_countries')
            .rangeLt('population_range_millions', '[150, 250]')
            .execute();
          ```

  - id: range-gt
    title: rangeGt()
    examples:
      - id: with-select
        name: With `select()`
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('countries')
            .select('name, id, population_range_millions')
            .rangeGt('population_range_millions', '[150, 250]')
            .execute();
          ```
      - id: with-update
        name: With `update()`
        code: |
          ```dart
          final res = await supabase
            .from('countries')
            .update({ 'name': 'Mordor' })
            .rangeGt('population_range_millions', '[150, 250]')
            .execute();
          ```
      - id: with-delete
        name: With `delete()`
        code: |
          ```dart
          final res = await supabase
            .from('countries')
            .delete()
            .rangeGt('population_range_millions', '[150, 250]')
            .execute();
          ```
      - id: with-rpc
        name: With `rpc()`
        code: |
          ```dart
          // Only valid if the Stored Procedure returns a table type.
          final res = await supabase
            .rpc('echo_all_countries')
            .rangeGt('population_range_millions', '[150, 250]')
            .execute();
          ```

  - id: range-gte
    title: rangeGte()
    examples:
      - id: with-select
        name: With `select()`
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('countries')
            .select('name, id, population_range_millions')
            .rangeGte('population_range_millions', '[150, 250]')
            .execute();
          ```
      - id: with-update
        name: With `update()`
        code: |
          ```dart
          final res = await supabase
            .from('countries')
            .update({ 'name': 'Mordor' })
            .rangeGte('population_range_millions', '[150, 250]')
            .execute();
          ```
      - id: with-delete
        name: With `delete()`
        code: |
          ```dart
          final res = await supabase
            .from('countries')
            .delete()
            .rangeGte('population_range_millions', '[150, 250]')
            .execute();
          ```
      - id: with-rpc
        name: With `rpc()`
        code: |
          ```dart
          // Only valid if the Stored Procedure returns a table type.
          final res = await supabase
            .rpc('echo_all_countries')
            .rangeGte('population_range_millions', '[150, 250]')
            .execute();
          ```

  - id: range-lte
    title: rangeLte()
    $ref: '@supabase/postgrest-js."lib/PostgrestFilterBuilder".PostgrestFilterBuilder.rangeLte'
    examples:
      - id: with-select
        name: With `select()`
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('countries')
            .select('name, id, population_range_millions')
            .rangeLte('population_range_millions', '[150, 250]')
            .execute();
          ```
      - id: with-update
        name: With `update()`
        code: |
          ```dart
          final res = await supabase
            .from('countries')
            .update({ 'name': 'Mordor' })
            .rangeLte('population_range_millions', '[150, 250]')
            .execute();
          ```
      - id: with-delete
        name: With `delete()`
        code: |
          ```dart
          final res = await supabase
            .from('countries')
            .delete()
            .rangeLte('population_range_millions', '[150, 250]')
            .execute();
          ```
      - id: with-rpc
        name: With `rpc()`
        code: |
          ```dart
          // Only valid if the Stored Procedure returns a table type.
          final res = await supabase
            .rpc('echo_all_countries')
            .rangeLte('population_range_millions', [150, 250])
            .execute();
          ```

  - id: range-adjacent
    title: rangeAdjacent()
    examples:
      - id: with-select
        name: With `select()`
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('countries')
            .select('name, id, population_range_millions')
            .rangeAdjacent('population_range_millions', '[70, 185]')
            .execute();
          ```
      - id: with-update
        name: With `update()`
        code: |
          ```dart
          final res = await supabase
            .from('countries')
            .update({ 'name': 'Mordor' })
            .rangeAdjacent('population_range_millions', '[70, 185]')
            .execute();
          ```
      - id: with-delete
        name: With `delete()`
        code: |
          ```dart
          final res = await supabase
            .from('countries')
            .delete()
            .rangeAdjacent('population_range_millions', '[70, 185]')
            .execute();
          ```
      - id: with-rpc
        name: With `rpc()`
        code: |
          ```dart
          // Only valid if the Stored Procedure returns a table type.
          final res = await supabase
            .rpc('echo_all_countries')
            .rangeAdjacent('population_range_millions', '[70, 185]')
            .execute();
          ```

  - id: overlaps
    title: overlaps()
    examples:
      - id: with-select
        name: With `select()`
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('countries')
            .select('name, id, main_exports')
            .overlaps('main_exports', ['computers', 'minerals'])
            .execute();
          ```
      - id: with-update
        name: With `update()`
        code: |
          ```dart
          final res = await supabase
            .from('countries')
            .update({ 'name': 'Mordor' })
            .overlaps('main_exports', ['computers', 'minerals'])
            .execute();
          ```
      - id: with-delete
        name: With `delete()`
        code: |
          ```dart
          final res = await supabase
            .from('countries')
            .delete()
            .overlaps('main_exports', ['computers', 'minerals'])
            .execute();
          ```
      - id: with-rpc
        name: With `rpc()`
        code: |
          ```dart
          // Only valid if the Stored Procedure returns a table type.
          final res = await supabase
            .rpc('echo_all_countries')
            .overlaps('main_exports', ['computers', 'minerals'])
            .execute();
          ```

  - id: text-search
    title: textSearch()
    description: |
      Finds all rows whose tsvector value on the stated `column` matches to_tsquery(query).
    examples:
      - id: text-search
        name: Text search
        code: |
          ```dart
          final res = await supabase
            .from('quotes')
            .select('catchphrase')
            .textSearch('catchphrase', "'fat' & 'cat'",
              config: 'english'
            )
            .execute();
          ```
      - id: basic-normalization
        name: Basic normalization
        description: Uses PostgreSQL's `plainto_tsquery` function.
        code: |
          ```dart
          final res = await supabase
            .from('quotes')
            .select('catchphrase')
            .textSearch('catchphrase', "'fat' & 'cat'",
              type: TextSearchType.plain,
              config: 'english'
            )
            .execute();
          ```
      - id: full-normalization
        name: Full normalization
        description: Uses PostgreSQL's `phraseto_tsquery` function.
        code: |
          ```dart
          final res = await supabase
            .from('quotes')
            .select('catchphrase')
            .textSearch('catchphrase', "'fat' & 'cat'",
              type: TextSearchType.phrase,
              config: 'english'
            )
            .execute();
          ```
      - id: full-normalization
        name: Full normalization
        description: |
          Uses PostgreSQL's `websearch_to_tsquery` function.
          This function will never raise syntax errors, which makes it possible to use raw user-supplied input for search, and can be used
          with advanced operators.

          - `unquoted text`: text not inside quote marks will be converted to terms separated by & operators, as if processed by plainto_tsquery.
          - `"quoted text"`: text inside quote marks will be converted to terms separated by `<->` operators, as if processed by phraseto_tsquery.
          - `OR`: the word “or” will be converted to the | operator.
          - `-`: a dash will be converted to the ! operator.

        code: |
          ```dart
          final res = await supabase
            .from('quotes')
            .select('catchphrase')
            .textSearch('catchphrase', "'fat or cat'",
              type: TextSearchType.websearch,
              config: 'english'
            )
            .execute();
          ```

  - id: filter
    title: filter()
    description: |
      Finds all rows whose `column` satisfies the filter.
    notes: |
      - `.filter()` expects you to use the raw [PostgREST syntax](https://postgrest.org/en/stable/api.html#horizontal-filtering-rows) for the filter names and values, so it should only be used as an escape hatch in case other filters don't work.
        ```dart
          .filter('arraycol','cs','{"a","b"}') // Use Postgres array {} and 'cs' for contains.
          .filter('rangecol','cs','(1,2]') // Use Postgres range syntax for range column.
          .filter('id','in','(6,7)')  // Use Postgres list () and 'in' for in_ filter.
          .filter('id','cs','{${mylist.join(',')}}')  // You can insert a Dart array list.
        ```
    examples:
      - id: with-select
        name: With `select()`
        isSpotlight: true
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .select('name, country_id')
            .filter('name', 'in', '("Paris","Tokyo")')
            .execute();
          ```
      - id: with-update
        name: With `update()`
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .update({ 'name': 'Mordor' })
            .filter('name', 'in', '("Paris","Tokyo")')
            .execute();
          ```
      - id: with-delete
        name: With `delete()`
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .delete()
            .filter('name', 'in', '("Paris","Tokyo")')
            .execute();
          ```
      - id: with-rpc
        name: With `rpc()`
        code: |
          ```dart
          // Only valid if the Stored Procedure returns a table type.
          final res = await supabase
            .rpc('echo_all_cities')
            .filter('name', 'in', '("Paris","Tokyo")')
          ```
      - id: filter-embedded-resources
        name: Filter embedded resources
        code: |
          ```dart
          final res = await supabase
            .from('cities')
            .select('name, countries ( name )')
            .filter('countries.name', 'in', '("France","Japan")')
            .execute();
          ```
