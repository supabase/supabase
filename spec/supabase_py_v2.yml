openref: 0.1

info:
  id: reference/supabase-py
  title: Supabase Client
  description: |

    Supabase Python(Community).

  definition: ../../spec/enrichments/tsdoc_v2/combined.json
  specUrl: https://github.com/supabase/supabase/edit/master/spec/supabase_py_v2.yml
  slugPrefix: '/'
  libraries:
    - name: 'Python'
      id: 'py'
      version: '0.0.1'

functions:
  - id: initializing
    $ref: '@supabase/supabase-js.index.SupabaseClient.constructor'
    description: |
      You can initialize a new Supabase client using the `create_client()` method.

      The Supabase client is your entrypoint to the rest of the Supabase functionality
      and is the easiest way to interact with everything we offer within the Supabase ecosystem.

    examples:
      - id: create-client
        name: create_client()
        code: |
          ```
          import os
          from supabase import create_client, Client

          url: str = os.environ.get("SUPABASE_URL")
          key: str = os.environ.get("SUPABASE_KEY")
          supabase: Client = create_client(url, key)
          ```
      - id: with-timeout-option
        name: With timeout option
        code: |
          ```
          import os
          from supabase import create_client, Client

          url: str = os.environ.get("SUPABASE_URL")
          key: str = os.environ.get("SUPABASE_KEY")
          supabase: Client = create_client(url, key, options={'timeout': 10})
          ```

  - id: sign-up
    title: 'sign_up()'
    $ref: '@supabase/gotrue-js.GoTrueClient.signUp'
    notes: |
      - By default, the user needs to verify their email address before logging in. To turn this off, disable **Confirm email** in [your project](https://app.supabase.com/project/_/auth/providers).
      - **Confirm email** determines if users need to confirm their email address after signing up.
        - If **Confirm email** is enabled, a `user` is returned but `session` is null.
        - If **Confirm email** is disabled, both a `user` and a `session` are returned.
      - By default, when the user confirms their email address, they are redirected to the [`SITE_URL`](https://supabase.com/docs/reference/auth/config#site_url). You can modify your `SITE_URL` or add additional redirect URLs in [your project](https://app.supabase.com/project/_/auth/url-configuration).
      - If signUp() is called for an existing confirmed user:
          - If **Confirm email** is enabled in [your project](https://app.supabase.com/project/_/auth/providers), an obfuscated/fake user object is returned.
          - If **Confirm email** is disabled, the error message, `User already registered` is returned.
      - To fetch the currently logged-in user, refer to [`getUser()`](/docs/reference/javascript/auth-getuser).
    examples:
      - id: signup
        name: Sign up
        code: |
          ```
          res = supabase.auth.signUp({
            email: 'example@email.com',
            password: 'example-password',
          })
          ```
      - id: sign-up-with-additional-user-metadata
        name: Sign up with additional user metadata
        code: |
          ```
          res = supabase.auth.signUp({
            email: 'example@email.com',
            password: 'example-password',
            options: {
              data: {
                first_name: 'John',
                age: 27,
              }
            }
          })
          ```
  - id: sign-out
    title: 'sign_out()'
    $ref: '@supabase/gotrue-js.GoTrueClient.signOut'
    notes: |
      - In order to use the `signOut()` method, the user needs to be signed in first.
    examples:
      - id: sign-out
        name: Sign out
        code: |
          ```
          res = supabase.auth.sign_out()
          ```
  - id: verify-otp
    title: 'verify_otp()'
    $ref: '@supabase/gotrue-js.GoTrueClient.verifyOtp'
    notes: |
      - The `verifyOtp` method takes in different verification types. If a phone number is used, the type can either be `sms` or `phone_change`. If an email address is used, the type can be one of the following: `signup`, `magiclink`, `recovery`, `invite` or `email_change`.
      - The verification type used should be determined based on the corresponding auth method called before `verifyOtp` to sign up / sign-in a user.
    examples:
      - id: verify-sms-one-time-password
        name: Verify SMS One-Time Password (OTP)
        code: |
          ```
          res = supabase.auth.verify_otp(phone, token)
          ```

  - id: get-session
    title: 'get_session_from_url'
    $ref: '@supabase/gotrue-js.GoTrueClient.getSession'
    examples:
      - id: get-session
        name: Get the session data from URL
        code: |
          ```
          res = supabase.auth.get_session_from_url(url)
          ```

  - id: set-session
    title: 'set_session()'
    $ref: '@supabase/gotrue-js.GoTrueClient.setSession'
    notes: |
      - `setSession()` takes in a refresh token and uses it to get a new session.
      - The refresh token can only be used once to obtain a new session.
      - [Refresh token rotation](/docs/reference/auth/config#refresh_token_rotation_enabled) is enabled by default on all projects to guard against replay attacks.
      - You can configure the [`REFRESH_TOKEN_REUSE_INTERVAL`](https://supabase.com/docs/reference/auth/config#refresh_token_reuse_interval) which provides a short window in which the same refresh token can be used multiple times in the event of concurrency or offline issues.
      - If you are using React Native, you will need to install a Buffer polyfill via a library such as [rn-nodeify](https://github.com/tradle/rn-nodeify) to properly use the library.
    examples:
      - id: set-session
        name: Refresh the session
        description: Sets the session data from refresh_token and returns current session or an error if the refresh_token is invalid.
        code: |
          ```
          res = supabase.auth.set_session(refresh_token)
          ```
  - id: refresh-session
    title: 'refresh_ession()'
    $ref: '@supabase/gotrue-js.GoTrueClient.refreshSession'
    notes: |
      - This method will refresh the session whether the current one is expired or not.
      - Both examples destructure `user` and `session` from `data`. This is not required; so `const { data, error } =` is also valid.
    examples:
      - id: refresh-session
        name: Refresh session using the current session
        code: |
          ```
          res = supabase.auth.refresh_session()
          ```
  - id: select
    title: 'Fetch data: select()'
    $ref: '@supabase/postgrest-js.PostgrestQueryBuilder.select'
    notes: |
      - By default, Supabase projects return a maximum of 1,000 rows. This setting can be changed in your project's [API settings](https://app.supabase.com/project/_/settings/api). It's recommended that you keep it low to limit the payload size of accidental or malicious requests.
      - `apikey` is a reserved keyword if you're using the [Supabase Platform](/docs/guides/platform) and [should be avoided as a column name](https://github.com/supabase/supabase/issues/5465).
    examples:
      - id: getting-your-data
        name: Getting your data
        code: |
          ```
          r = supabase
          .from('countries')
          .select("*")
          ```
      - id: selecting-specific-columns
        name: Selecting specific columns
        code: |
          ```
          r = await supabase
          .from('countries')
          .select('name')
          ```

  - id: invoke
    title: 'invoke()'
    description: |
      Invoke a Supabase Function.
    $ref: '@supabase/functions-js.F'
    notes: |
      - Requires an Authorization header.
      - When you pass in a body to your function, we automatically attach the Content-Type header for `Blob`, `ArrayBuffer`, `File`, `FormData` and `String`. If it doesn't match any of these types we assume the payload is `json`, serialise it and attach the `Content-Type` header as `application/json`. You can override this behaviour by passing in a `Content-Type` header of your own.
    examples:
      - id: invoke-function
        name: Basic invocation
        description:
        code: |
          ```
          func = supabase.functions()
          @asyncio.coroutine
          async def test_func(loop):
            resp = await func.invoke("hello-world",invoke_options={'body':{}})
            return resp

          loop = asyncio.get_event_loop()
          resp = loop.run_until_complete(test_func(loop))
          loop.close()
          ```

  - id: list-buckets
    title: 'list_buckets()'
    $ref: '@supabase/storage-js.packages/StorageBucketApi.default.listBuckets'
    notes: |
      - RLS policy permissions required:
        - `buckets` table permissions: `select`
        - `objects` table permissions: none
      - Refer to the [Storage guide](/docs/guides/storage#access-control) on how access control works
    examples:
      - id: list-buckets
        name: List buckets
        code: |
          ```
          res = supabase.storage().list_buckets()
          ```

  - id: get-bucket
    title: 'get_bucket()'
    $ref: '@supabase/storage-js.packages/StorageBucketApi.default.getBucket'
    notes: |
      - RLS policy permissions required:
        - `buckets` table permissions: `select`
        - `objects` table permissions: none
      - Refer to the [Storage guide](/docs/guides/storage#access-control) on how access control works
    examples:
      - id: get-bucket
        name: Get bucket
        code: |
          ```
          res = supabase.storage().get_bucket(name)
          ```

  - id: create-bucket
    title: 'create_bucket()'
    $ref: '@supabase/storage-js.packages/StorageBucketApi.default.createBucket'
    notes: |
      - RLS policy permissions required:
        - `buckets` table permissions: `insert`
        - `objects` table permissions: none
      - Refer to the [Storage guide](/docs/guides/storage#access-control) on how access control works
    examples:
      - id: create-bucket
        name: Create bucket
        code: |
          ```
          res = supabase.storage().create_bucket(name)
          ```

  - id: empty-bucket
    title: 'empty_bucket()'
    $ref: '@supabase/storage-js.packages/StorageBucketApi.default.emptyBucket'
    notes: |
      - RLS policy permissions required:
        - `buckets` table permissions: `select`
        - `objects` table permissions: `select` and `delete`
      - Refer to the [Storage guide](/docs/guides/storage#access-control) on how access control works
    examples:
      - id: empty-bucket
        name: Empty bucket
        code: |
          ```
          res = supabase.storage().empty_bucket(name)
          ```
  - id: delete-bucket
    title: 'delete_bucket()'
    $ref: '@supabase/storage-js.packages/StorageBucketApi.default.deleteBucket'
    notes: |
      - RLS policy permissions required:
        - `buckets` table permissions: `select` and `delete`
        - `objects` table permissions: none
      - Refer to the [Storage guide](/docs/guides/storage#access-control) on how access control works
    examples:
      - id: delete-bucket
        name: Delete bucket
        code: |
          ```
          res = supabase.storage().delete_bucket(name)
          ```

  - id: from-upload
    title: 'from_.upload()'
    $ref: '@supabase/storage-js.packages/StorageFileApi.default.upload'
    notes: |
      - RLS policy permissions required:
        - `buckets` table permissions: none
        - `objects` table permissions: `insert`
      - Refer to the [Storage guide](/docs/guides/storage#access-control) on how access control works
    examples:
      - id: upload-file
        name: Upload file using filepath
        code: |
          ```
          with open(source, 'rb+') as f:
            res = supabase.storage().from_('bucket').upload(destination, os.path.abspath(source))
          ```
  - id: from-move
    title: 'from_.move()'
    $ref: '@supabase/storage-js.packages/StorageFileApi.default.move'
    notes: |
      - RLS policy permissions required:
        - `buckets` table permissions: none
        - `objects` table permissions: `update` and `select`
      - Refer to the [Storage guide](/docs/guides/storage#access-control) on how access control works
    examples:
      - id: move-file
        name: Move file
        code: |
          ```
          res = supabase.storage().from_(bucket).move('public/avatar1.png', 'private/avatar2.png')
          ```

  - id: from-create-signed-url
    title: 'from_.create_signed_url()'
    $ref: '@supabase/storage-js.packages/StorageFileApi.default.createSignedUrl'
    notes: |
      - RLS policy permissions required:
        - `buckets` table permissions: none
        - `objects` table permissions: `select`
      - Refer to the [Storage guide](/docs/guides/storage#access-control) on how access control works
    examples:
      - id: create-signed-url
        name: Create Signed URL
        code: |
          ```
          res = supabase.storage().from_(bucket_name).create_signed_url(filepath, expiry_duration)
          ```

  - id: from-get-public-url
    title: 'from_.get_public_url()'
    $ref: '@supabase/storage-js.packages/StorageFileApi.default.getPublicUrl'
    notes: |
      - The bucket needs to be set to public, either via [updateBucket()](/docs/reference/javascript/storage-updatebucket) or by going to Storage on [app.supabase.com](https://app.supabase.com), clicking the overflow menu on a bucket and choosing "Make public"
      - RLS policy permissions required:
        - `buckets` table permissions: none
        - `objects` table permissions: none
      - Refer to the [Storage guide](/docs/guides/storage#access-control) on how access control works
    examples:
      - id: get-public-url
        name: Returns the URL for an asset in a public bucket
        code: |
          ```
          res = supabase.storage().from_(bucket_name).get_public_url('test/avatar1.jpg')
          ```

  - id: from-download
    title: 'from_.download()'
    $ref: '@supabase/storage-js.packages/StorageFileApi.default.download'
    notes: |
      - RLS policy permissions required:
        - `buckets` table permissions: none
        - `objects` table permissions: `select`
      - Refer to the [Storage guide](/docs/guides/storage#access-control) on how access control works
    examples:
      - id: download-file
        name: Download file
        code: |
          ```
          with open(destination, 'wb+') as f:
            res = supabase.storage().from_(bucket_name).download(source)
            f.write(res)
          ```

  - id: from-remove
    title: 'from_.remove()'
    $ref: '@supabase/storage-js.packages/StorageFileApi.default.remove'
    notes: |
      - RLS policy permissions required:
        - `buckets` table permissions: none
        - `objects` table permissions: `delete` and `select`
      - Refer to the [Storage guide](/docs/guides/storage#access-control) on how access control works
    examples:
      - id: delete-file
        name: Delete file
        code: |
          ```
          res = supabase.storage().from_('test').remove('test.jpg')
          ```
  - id: from-list
    title: 'from_.list()'
    $ref: '@supabase/storage-js.packages/StorageFileApi.default.list'
    notes: |
      - RLS policy permissions required:
        - `buckets` table permissions: none
        - `objects` table permissions: `select`
      - Refer to the [Storage guide](/docs/guides/storage#access-control) on how access control works
    examples:
      - id: list-files
        name: List files in a bucket
        code: |
          ```
          res = supabase.storage().from_('test').list()
          ```
  - id: subscribe
    title: on().subscribe()
    $ref: '@supabase/realtime-js.RealtimeChannel.on'
    notes: |
      - We are implementing this feature at the moment. If you have queries feel free to open an issue on the [realtime-py](https://github.com/supabase-community) repository.
