create table "public"."todos" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null,
    "task" text,
    "is_complete" boolean default false,
    "inserted_at" timestamp with time zone not null default timezone('utc'::text, now())
);


alter table "public"."todos" enable row level security;

CREATE UNIQUE INDEX todos_pkey ON public.todos USING btree (id);

alter table "public"."todos" add constraint "todos_pkey" PRIMARY KEY using index "todos_pkey";

alter table "public"."todos" add constraint "todos_task_check" CHECK ((char_length(task) > 3)) not valid;

alter table "public"."todos" validate constraint "todos_task_check";

alter table "public"."todos" add constraint "todos_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."todos" validate constraint "todos_user_id_fkey";

grant delete on table "public"."todos" to "anon";

grant insert on table "public"."todos" to "anon";

grant references on table "public"."todos" to "anon";

grant select on table "public"."todos" to "anon";

grant trigger on table "public"."todos" to "anon";

grant truncate on table "public"."todos" to "anon";

grant update on table "public"."todos" to "anon";

grant delete on table "public"."todos" to "authenticated";

grant insert on table "public"."todos" to "authenticated";

grant references on table "public"."todos" to "authenticated";

grant select on table "public"."todos" to "authenticated";

grant trigger on table "public"."todos" to "authenticated";

grant truncate on table "public"."todos" to "authenticated";

grant update on table "public"."todos" to "authenticated";

grant delete on table "public"."todos" to "service_role";

grant insert on table "public"."todos" to "service_role";

grant references on table "public"."todos" to "service_role";

grant select on table "public"."todos" to "service_role";

grant trigger on table "public"."todos" to "service_role";

grant truncate on table "public"."todos" to "service_role";

grant update on table "public"."todos" to "service_role";

create policy "Individuals can create todos."
on "public"."todos"
as permissive
for insert
to public
with check ((auth.uid() = user_id));


create policy "Individuals can delete their own todos."
on "public"."todos"
as permissive
for delete
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Individuals can update their own todos."
on "public"."todos"
as permissive
for update
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Everyone can read all todos. "
on "public"."todos"
as permissive
for select
to public
using (true);




