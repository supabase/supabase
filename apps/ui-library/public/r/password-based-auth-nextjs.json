{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "password-based-auth-nextjs",
  "type": "registry:block",
  "title": "Password Based Auth flow for Nextjs and Supabase",
  "description": "Password Based Auth flow for Nextjs and Supabase",
  "dependencies": [
    "@supabase/ssr@latest",
    "@supabase/supabase-js@latest"
  ],
  "registryDependencies": [
    "button",
    "card",
    "input",
    "label"
  ],
  "files": [
    {
      "path": "registry/default/blocks/password-based-auth-nextjs/app/auth/login/page.tsx",
      "content": "import { LoginForm } from '@/registry/default/blocks/password-based-auth-nextjs/components/login-form'\r\n\r\nexport default function Page() {\r\n  return (\r\n    <div className=\"flex min-h-svh w-full items-center justify-center p-6 md:p-10\">\r\n      <div className=\"w-full max-w-sm\">\r\n        <LoginForm />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:page",
      "target": "app/auth/login/page.tsx"
    },
    {
      "path": "registry/default/blocks/password-based-auth-nextjs/app/auth/error/page.tsx",
      "content": "import { Card, CardContent, CardHeader, CardTitle } from '@/registry/default/components/ui/card'\r\n\r\nexport default async function Page({ searchParams }: { searchParams: Promise<{ error: string }> }) {\r\n  const params = await searchParams\r\n\r\n  return (\r\n    <div className=\"flex min-h-svh w-full items-center justify-center p-6 md:p-10\">\r\n      <div className=\"w-full max-w-sm\">\r\n        <div className=\"flex flex-col gap-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"text-2xl\">Sorry, something went wrong.</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {params?.error ? (\r\n                <p className=\"text-sm text-muted-foreground\">Code error: {params.error}</p>\r\n              ) : (\r\n                <p className=\"text-sm text-muted-foreground\">An unspecified error occurred.</p>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:page",
      "target": "app/auth/error/page.tsx"
    },
    {
      "path": "registry/default/blocks/password-based-auth-nextjs/app/protected/page.tsx",
      "content": "import { redirect } from 'next/navigation'\r\n\r\nimport { LogoutButton } from '@/registry/default/blocks/password-based-auth-nextjs/components/logout-button'\r\nimport { createClient } from '@/registry/default/clients/nextjs/lib/supabase/server'\r\n\r\nexport default async function ProtectedPage() {\r\n  const supabase = await createClient()\r\n\r\n  const { data, error } = await supabase.auth.getClaims()\r\n  if (error || !data?.claims) {\r\n    redirect('/auth/login')\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex h-svh w-full items-center justify-center gap-2\">\r\n      <p>\r\n        Hello <span>{data.claims.email}</span>\r\n      </p>\r\n      <LogoutButton />\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:page",
      "target": "app/protected/page.tsx"
    },
    {
      "path": "registry/default/blocks/password-based-auth-nextjs/app/auth/confirm/route.ts",
      "content": "import { createClient } from '@/registry/default/clients/nextjs/lib/supabase/server'\r\nimport { type EmailOtpType } from '@supabase/supabase-js'\r\nimport { redirect } from 'next/navigation'\r\nimport { type NextRequest } from 'next/server'\r\n\r\nexport async function GET(request: NextRequest) {\r\n  const { searchParams } = new URL(request.url)\r\n  const token_hash = searchParams.get('token_hash')\r\n  const type = searchParams.get('type') as EmailOtpType | null\r\n  const _next = searchParams.get('next')\r\n  const next = _next?.startsWith('/') ? _next : '/'\r\n\r\n  if (token_hash && type) {\r\n    const supabase = await createClient()\r\n\r\n    const { error } = await supabase.auth.verifyOtp({\r\n      type,\r\n      token_hash,\r\n    })\r\n    if (!error) {\r\n      // redirect user to specified redirect URL or root of app\r\n      redirect(next)\r\n    } else {\r\n      // redirect the user to an error page with some instructions\r\n      redirect(`/auth/error?error=${error?.message}`)\r\n    }\r\n  }\r\n\r\n  // redirect the user to an error page with some instructions\r\n  redirect(`/auth/error?error=No token hash or type`)\r\n}\r\n",
      "type": "registry:page",
      "target": "app/auth/confirm/route.ts"
    },
    {
      "path": "registry/default/blocks/password-based-auth-nextjs/components/login-form.tsx",
      "content": "'use client'\r\n\r\nimport { cn } from '@/lib/utils'\r\nimport { createClient } from '@/registry/default/clients/nextjs/lib/supabase/client'\r\nimport { Button } from '@/registry/default/components/ui/button'\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from '@/registry/default/components/ui/card'\r\nimport { Input } from '@/registry/default/components/ui/input'\r\nimport { Label } from '@/registry/default/components/ui/label'\r\nimport Link from 'next/link'\r\nimport { useRouter } from 'next/navigation'\r\nimport { useState } from 'react'\r\n\r\nexport function LoginForm({ className, ...props }: React.ComponentPropsWithoutRef<'div'>) {\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [error, setError] = useState<string | null>(null)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const router = useRouter()\r\n\r\n  const handleLogin = async (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    const supabase = createClient()\r\n    setIsLoading(true)\r\n    setError(null)\r\n\r\n    try {\r\n      const { error } = await supabase.auth.signInWithPassword({\r\n        email,\r\n        password,\r\n      })\r\n      if (error) throw error\r\n      // Update this route to redirect to an authenticated route. The user already has an active session.\r\n      router.push('/protected')\r\n    } catch (error: unknown) {\r\n      setError(error instanceof Error ? error.message : 'An error occurred')\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={cn('flex flex-col gap-6', className)} {...props}>\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"text-2xl\">Login</CardTitle>\r\n          <CardDescription>Enter your email below to login to your account</CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <form onSubmit={handleLogin}>\r\n            <div className=\"flex flex-col gap-6\">\r\n              <div className=\"grid gap-2\">\r\n                <Label htmlFor=\"email\">Email</Label>\r\n                <Input\r\n                  id=\"email\"\r\n                  type=\"email\"\r\n                  placeholder=\"m@example.com\"\r\n                  required\r\n                  value={email}\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                />\r\n              </div>\r\n              <div className=\"grid gap-2\">\r\n                <div className=\"flex items-center\">\r\n                  <Label htmlFor=\"password\">Password</Label>\r\n                  <Link\r\n                    href=\"/auth/forgot-password\"\r\n                    className=\"ml-auto inline-block text-sm underline-offset-4 hover:underline\"\r\n                  >\r\n                    Forgot your password?\r\n                  </Link>\r\n                </div>\r\n                <Input\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  required\r\n                  value={password}\r\n                  onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n              </div>\r\n              {error && <p className=\"text-sm text-red-500\">{error}</p>}\r\n              <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\r\n                {isLoading ? 'Logging in...' : 'Login'}\r\n              </Button>\r\n            </div>\r\n            <div className=\"mt-4 text-center text-sm\">\r\n              Don&apos;t have an account?{' '}\r\n              <Link href=\"/auth/sign-up\" className=\"underline underline-offset-4\">\r\n                Sign up\r\n              </Link>\r\n            </div>\r\n          </form>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/blocks/password-based-auth-nextjs/middleware.ts",
      "content": "import { updateSession } from '@/registry/default/clients/nextjs/lib/supabase/middleware'\r\nimport { type NextRequest } from 'next/server'\r\n\r\nexport async function middleware(request: NextRequest) {\r\n  return await updateSession(request)\r\n}\r\n\r\nexport const config = {\r\n  matcher: [\r\n    /*\r\n     * Match all request paths except:\r\n     * - _next/static (static files)\r\n     * - _next/image (image optimization files)\r\n     * - favicon.ico (favicon file)\r\n     * - images - .svg, .png, .jpg, .jpeg, .gif, .webp\r\n     * Feel free to modify this pattern to include more paths.\r\n     */\r\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\r\n  ],\r\n}\r\n",
      "type": "registry:file",
      "target": "middleware.ts"
    },
    {
      "path": "registry/default/blocks/password-based-auth-nextjs/app/auth/sign-up/page.tsx",
      "content": "import { SignUpForm } from '@/registry/default/blocks/password-based-auth-nextjs/components/sign-up-form'\r\n\r\nexport default function Page() {\r\n  return (\r\n    <div className=\"flex min-h-svh w-full items-center justify-center p-6 md:p-10\">\r\n      <div className=\"w-full max-w-sm\">\r\n        <SignUpForm />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:page",
      "target": "app/auth/sign-up/page.tsx"
    },
    {
      "path": "registry/default/blocks/password-based-auth-nextjs/app/auth/sign-up-success/page.tsx",
      "content": "import {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from '@/registry/default/components/ui/card'\r\n\r\nexport default function Page() {\r\n  return (\r\n    <div className=\"flex min-h-svh w-full items-center justify-center p-6 md:p-10\">\r\n      <div className=\"w-full max-w-sm\">\r\n        <div className=\"flex flex-col gap-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"text-2xl\">Thank you for signing up!</CardTitle>\r\n              <CardDescription>Check your email to confirm</CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <p className=\"text-sm text-muted-foreground\">\r\n                You&apos;ve successfully signed up. Please check your email to confirm your account\r\n                before signing in.\r\n              </p>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:page",
      "target": "app/auth/sign-up-success/page.tsx"
    },
    {
      "path": "registry/default/blocks/password-based-auth-nextjs/components/sign-up-form.tsx",
      "content": "'use client'\r\n\r\nimport { cn } from '@/lib/utils'\r\nimport { createClient } from '@/registry/default/clients/nextjs/lib/supabase/client'\r\nimport { Button } from '@/registry/default/components/ui/button'\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from '@/registry/default/components/ui/card'\r\nimport { Input } from '@/registry/default/components/ui/input'\r\nimport { Label } from '@/registry/default/components/ui/label'\r\nimport Link from 'next/link'\r\nimport { useRouter } from 'next/navigation'\r\nimport { useState } from 'react'\r\n\r\nexport function SignUpForm({ className, ...props }: React.ComponentPropsWithoutRef<'div'>) {\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [repeatPassword, setRepeatPassword] = useState('')\r\n  const [error, setError] = useState<string | null>(null)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const router = useRouter()\r\n\r\n  const handleSignUp = async (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    const supabase = createClient()\r\n    setIsLoading(true)\r\n    setError(null)\r\n\r\n    if (password !== repeatPassword) {\r\n      setError('Passwords do not match')\r\n      setIsLoading(false)\r\n      return\r\n    }\r\n\r\n    try {\r\n      const { error } = await supabase.auth.signUp({\r\n        email,\r\n        password,\r\n        options: {\r\n          emailRedirectTo: `${window.location.origin}/protected`,\r\n        },\r\n      })\r\n      if (error) throw error\r\n      router.push('/auth/sign-up-success')\r\n    } catch (error: unknown) {\r\n      setError(error instanceof Error ? error.message : 'An error occurred')\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={cn('flex flex-col gap-6', className)} {...props}>\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"text-2xl\">Sign up</CardTitle>\r\n          <CardDescription>Create a new account</CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <form onSubmit={handleSignUp}>\r\n            <div className=\"flex flex-col gap-6\">\r\n              <div className=\"grid gap-2\">\r\n                <Label htmlFor=\"email\">Email</Label>\r\n                <Input\r\n                  id=\"email\"\r\n                  type=\"email\"\r\n                  placeholder=\"m@example.com\"\r\n                  required\r\n                  value={email}\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                />\r\n              </div>\r\n              <div className=\"grid gap-2\">\r\n                <div className=\"flex items-center\">\r\n                  <Label htmlFor=\"password\">Password</Label>\r\n                </div>\r\n                <Input\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  required\r\n                  value={password}\r\n                  onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n              </div>\r\n              <div className=\"grid gap-2\">\r\n                <div className=\"flex items-center\">\r\n                  <Label htmlFor=\"repeat-password\">Repeat Password</Label>\r\n                </div>\r\n                <Input\r\n                  id=\"repeat-password\"\r\n                  type=\"password\"\r\n                  required\r\n                  value={repeatPassword}\r\n                  onChange={(e) => setRepeatPassword(e.target.value)}\r\n                />\r\n              </div>\r\n              {error && <p className=\"text-sm text-red-500\">{error}</p>}\r\n              <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\r\n                {isLoading ? 'Creating an account...' : 'Sign up'}\r\n              </Button>\r\n            </div>\r\n            <div className=\"mt-4 text-center text-sm\">\r\n              Already have an account?{' '}\r\n              <Link href=\"/auth/login\" className=\"underline underline-offset-4\">\r\n                Login\r\n              </Link>\r\n            </div>\r\n          </form>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/blocks/password-based-auth-nextjs/app/auth/forgot-password/page.tsx",
      "content": "import { ForgotPasswordForm } from '@/registry/default/blocks/password-based-auth-nextjs/components/forgot-password-form'\r\n\r\nexport default function Page() {\r\n  return (\r\n    <div className=\"flex min-h-svh w-full items-center justify-center p-6 md:p-10\">\r\n      <div className=\"w-full max-w-sm\">\r\n        <ForgotPasswordForm />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:page",
      "target": "app/auth/forgot-password/page.tsx"
    },
    {
      "path": "registry/default/blocks/password-based-auth-nextjs/app/auth/update-password/page.tsx",
      "content": "import { UpdatePasswordForm } from '@/registry/default/blocks/password-based-auth-nextjs/components/update-password-form'\r\n\r\nexport default function Page() {\r\n  return (\r\n    <div className=\"flex min-h-svh w-full items-center justify-center p-6 md:p-10\">\r\n      <div className=\"w-full max-w-sm\">\r\n        <UpdatePasswordForm />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:page",
      "target": "app/auth/update-password/page.tsx"
    },
    {
      "path": "registry/default/blocks/password-based-auth-nextjs/components/forgot-password-form.tsx",
      "content": "'use client'\r\n\r\nimport { cn } from '@/lib/utils'\r\nimport { createClient } from '@/registry/default/clients/nextjs/lib/supabase/client'\r\nimport { Button } from '@/registry/default/components/ui/button'\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from '@/registry/default/components/ui/card'\r\nimport { Input } from '@/registry/default/components/ui/input'\r\nimport { Label } from '@/registry/default/components/ui/label'\r\nimport Link from 'next/link'\r\nimport { useState } from 'react'\r\n\r\nexport function ForgotPasswordForm({ className, ...props }: React.ComponentPropsWithoutRef<'div'>) {\r\n  const [email, setEmail] = useState('')\r\n  const [error, setError] = useState<string | null>(null)\r\n  const [success, setSuccess] = useState(false)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  const handleForgotPassword = async (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    const supabase = createClient()\r\n    setIsLoading(true)\r\n    setError(null)\r\n\r\n    try {\r\n      // The url which will be included in the email. This URL needs to be configured in your redirect URLs in the Supabase dashboard at https://supabase.com/dashboard/project/_/auth/url-configuration\r\n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\r\n        redirectTo: `${window.location.origin}/auth/update-password`,\r\n      })\r\n      if (error) throw error\r\n      setSuccess(true)\r\n    } catch (error: unknown) {\r\n      setError(error instanceof Error ? error.message : 'An error occurred')\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={cn('flex flex-col gap-6', className)} {...props}>\r\n      {success ? (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"text-2xl\">Check Your Email</CardTitle>\r\n            <CardDescription>Password reset instructions sent</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <p className=\"text-sm text-muted-foreground\">\r\n              If you registered using your email and password, you will receive a password reset\r\n              email.\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n      ) : (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"text-2xl\">Reset Your Password</CardTitle>\r\n            <CardDescription>\r\n              Type in your email and we&apos;ll send you a link to reset your password\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <form onSubmit={handleForgotPassword}>\r\n              <div className=\"flex flex-col gap-6\">\r\n                <div className=\"grid gap-2\">\r\n                  <Label htmlFor=\"email\">Email</Label>\r\n                  <Input\r\n                    id=\"email\"\r\n                    type=\"email\"\r\n                    placeholder=\"m@example.com\"\r\n                    required\r\n                    value={email}\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                  />\r\n                </div>\r\n                {error && <p className=\"text-sm text-red-500\">{error}</p>}\r\n                <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\r\n                  {isLoading ? 'Sending...' : 'Send reset email'}\r\n                </Button>\r\n              </div>\r\n              <div className=\"mt-4 text-center text-sm\">\r\n                Already have an account?{' '}\r\n                <Link href=\"/auth/login\" className=\"underline underline-offset-4\">\r\n                  Login\r\n                </Link>\r\n              </div>\r\n            </form>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/blocks/password-based-auth-nextjs/components/update-password-form.tsx",
      "content": "'use client'\r\n\r\nimport { cn } from '@/lib/utils'\r\nimport { createClient } from '@/registry/default/clients/nextjs/lib/supabase/client'\r\nimport { Button } from '@/registry/default/components/ui/button'\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from '@/registry/default/components/ui/card'\r\nimport { Input } from '@/registry/default/components/ui/input'\r\nimport { Label } from '@/registry/default/components/ui/label'\r\nimport { useRouter } from 'next/navigation'\r\nimport { useState } from 'react'\r\n\r\nexport function UpdatePasswordForm({ className, ...props }: React.ComponentPropsWithoutRef<'div'>) {\r\n  const [password, setPassword] = useState('')\r\n  const [error, setError] = useState<string | null>(null)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const router = useRouter()\r\n\r\n  const handleForgotPassword = async (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    const supabase = createClient()\r\n    setIsLoading(true)\r\n    setError(null)\r\n\r\n    try {\r\n      const { error } = await supabase.auth.updateUser({ password })\r\n      if (error) throw error\r\n      // Update this route to redirect to an authenticated route. The user already has an active session.\r\n      router.push('/protected')\r\n    } catch (error: unknown) {\r\n      setError(error instanceof Error ? error.message : 'An error occurred')\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={cn('flex flex-col gap-6', className)} {...props}>\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"text-2xl\">Reset Your Password</CardTitle>\r\n          <CardDescription>Please enter your new password below.</CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <form onSubmit={handleForgotPassword}>\r\n            <div className=\"flex flex-col gap-6\">\r\n              <div className=\"grid gap-2\">\r\n                <Label htmlFor=\"password\">New password</Label>\r\n                <Input\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  placeholder=\"New password\"\r\n                  required\r\n                  value={password}\r\n                  onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n              </div>\r\n              {error && <p className=\"text-sm text-red-500\">{error}</p>}\r\n              <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\r\n                {isLoading ? 'Saving...' : 'Save new password'}\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/blocks/password-based-auth-nextjs/components/logout-button.tsx",
      "content": "'use client'\r\n\r\nimport { createClient } from '@/registry/default/clients/nextjs/lib/supabase/client'\r\nimport { Button } from '@/registry/default/components/ui/button'\r\nimport { useRouter } from 'next/navigation'\r\n\r\nexport function LogoutButton() {\r\n  const router = useRouter()\r\n\r\n  const logout = async () => {\r\n    const supabase = createClient()\r\n    await supabase.auth.signOut()\r\n    router.push('/auth/login')\r\n  }\r\n\r\n  return <Button onClick={logout}>Logout</Button>\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/clients/nextjs/lib/supabase/client.ts",
      "content": "import { createBrowserClient } from '@supabase/ssr'\r\n\r\nexport function createClient() {\r\n  return createBrowserClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_PUBLISHABLE_OR_ANON_KEY!\r\n  )\r\n}\r\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/default/clients/nextjs/lib/supabase/middleware.ts",
      "content": "import { createServerClient } from '@supabase/ssr'\r\nimport { NextResponse, type NextRequest } from 'next/server'\r\n\r\nexport async function updateSession(request: NextRequest) {\r\n  let supabaseResponse = NextResponse.next({\r\n    request,\r\n  })\r\n\r\n  // With Fluid compute, don't put this client in a global environment\r\n  // variable. Always create a new one on each request.\r\n  const supabase = createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_PUBLISHABLE_OR_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        getAll() {\r\n          return request.cookies.getAll()\r\n        },\r\n        setAll(cookiesToSet) {\r\n          cookiesToSet.forEach(({ name, value }) => request.cookies.set(name, value))\r\n          supabaseResponse = NextResponse.next({\r\n            request,\r\n          })\r\n          cookiesToSet.forEach(({ name, value, options }) =>\r\n            supabaseResponse.cookies.set(name, value, options)\r\n          )\r\n        },\r\n      },\r\n    }\r\n  )\r\n\r\n  // Do not run code between createServerClient and\r\n  // supabase.auth.getClaims(). A simple mistake could make it very hard to debug\r\n  // issues with users being randomly logged out.\r\n\r\n  // IMPORTANT: If you remove getClaims() and you use server-side rendering\r\n  // with the Supabase client, your users may be randomly logged out.\r\n  const { data } = await supabase.auth.getClaims()\r\n  const user = data?.claims\r\n\r\n  if (\r\n    !user &&\r\n    !request.nextUrl.pathname.startsWith('/login') &&\r\n    !request.nextUrl.pathname.startsWith('/auth')\r\n  ) {\r\n    // no user, potentially respond by redirecting the user to the login page\r\n    const url = request.nextUrl.clone()\r\n    url.pathname = '/auth/login'\r\n    return NextResponse.redirect(url)\r\n  }\r\n\r\n  // IMPORTANT: You *must* return the supabaseResponse object as it is.\r\n  // If you're creating a new response object with NextResponse.next() make sure to:\r\n  // 1. Pass the request in it, like so:\r\n  //    const myNewResponse = NextResponse.next({ request })\r\n  // 2. Copy over the cookies, like so:\r\n  //    myNewResponse.cookies.setAll(supabaseResponse.cookies.getAll())\r\n  // 3. Change the myNewResponse object to fit your needs, but avoid changing\r\n  //    the cookies!\r\n  // 4. Finally:\r\n  //    return myNewResponse\r\n  // If this is not done, you may be causing the browser and server to go out\r\n  // of sync and terminate the user's session prematurely!\r\n\r\n  return supabaseResponse\r\n}\r\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/default/clients/nextjs/lib/supabase/server.ts",
      "content": "import { createServerClient } from '@supabase/ssr'\r\nimport { cookies } from 'next/headers'\r\n\r\n/**\r\n * If using Fluid compute: Don't put this client in a global variable. Always create a new client within each\r\n * function when using it.\r\n */\r\nexport async function createClient() {\r\n  const cookieStore = await cookies()\r\n\r\n  return createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_PUBLISHABLE_OR_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        getAll() {\r\n          return cookieStore.getAll()\r\n        },\r\n        setAll(cookiesToSet) {\r\n          try {\r\n            cookiesToSet.forEach(({ name, value, options }) =>\r\n              cookieStore.set(name, value, options)\r\n            )\r\n          } catch {\r\n            // The `setAll` method was called from a Server Component.\r\n            // This can be ignored if you have middleware refreshing\r\n            // user sessions.\r\n          }\r\n        },\r\n      },\r\n    }\r\n  )\r\n}\r\n",
      "type": "registry:lib"
    }
  ],
  "envVars": {
    "NEXT_PUBLIC_SUPABASE_URL": "",
    "NEXT_PUBLIC_SUPABASE_PUBLISHABLE_OR_ANON_KEY": ""
  },
  "docs": "You'll need to set the following environment variables in your project: `NEXT_PUBLIC_SUPABASE_URL` and `NEXT_PUBLIC_SUPABASE_PUBLISHABLE_OR_ANON_KEY`."
}