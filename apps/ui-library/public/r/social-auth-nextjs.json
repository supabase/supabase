{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "social-auth-nextjs",
  "type": "registry:block",
  "title": "Social Auth flow for Nextjs and Supabase",
  "description": "Social Auth flow for Nextjs and Supabase",
  "dependencies": [
    "@supabase/ssr@latest",
    "@supabase/supabase-js@latest"
  ],
  "registryDependencies": [
    "button",
    "card"
  ],
  "files": [
    {
      "path": "registry/default/blocks/social-auth-nextjs/app/auth/login/page.tsx",
      "content": "import { LoginForm } from '@/registry/default/blocks/social-auth-nextjs/components/login-form'\r\n\r\nexport default function Page() {\r\n  return (\r\n    <div className=\"flex min-h-svh w-full items-center justify-center p-6 md:p-10\">\r\n      <div className=\"w-full max-w-sm\">\r\n        <LoginForm />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:page",
      "target": "app/auth/login/page.tsx"
    },
    {
      "path": "registry/default/blocks/social-auth-nextjs/app/auth/error/page.tsx",
      "content": "import { Card, CardContent, CardHeader, CardTitle } from '@/registry/default/components/ui/card'\r\n\r\nexport default async function Page({ searchParams }: { searchParams: Promise<{ error: string }> }) {\r\n  const params = await searchParams\r\n\r\n  return (\r\n    <div className=\"flex min-h-svh w-full items-center justify-center p-6 md:p-10\">\r\n      <div className=\"w-full max-w-sm\">\r\n        <div className=\"flex flex-col gap-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"text-2xl\">Sorry, something went wrong.</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {params?.error ? (\r\n                <p className=\"text-sm text-muted-foreground\">Code error: {params.error}</p>\r\n              ) : (\r\n                <p className=\"text-sm text-muted-foreground\">An unspecified error occurred.</p>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:page",
      "target": "app/auth/error/page.tsx"
    },
    {
      "path": "registry/default/blocks/social-auth-nextjs/app/protected/page.tsx",
      "content": "import { redirect } from 'next/navigation'\r\n\r\nimport { LogoutButton } from '@/registry/default/blocks/social-auth-nextjs/components/logout-button'\r\nimport { createClient } from '@/registry/default/clients/nextjs/lib/supabase/server'\r\n\r\nexport default async function ProtectedPage() {\r\n  const supabase = await createClient()\r\n\r\n  const { data, error } = await supabase.auth.getClaims()\r\n  if (error || !data?.claims) {\r\n    redirect('/auth/login')\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex h-svh w-full items-center justify-center gap-2\">\r\n      <p>\r\n        Hello <span>{data.claims.email}</span>\r\n      </p>\r\n      <LogoutButton />\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:page",
      "target": "app/protected/page.tsx"
    },
    {
      "path": "registry/default/blocks/social-auth-nextjs/app/auth/oauth/route.ts",
      "content": "import { NextResponse } from 'next/server'\r\n// The client you created from the Server-Side Auth instructions\r\nimport { createClient } from '@/registry/default/clients/nextjs/lib/supabase/server'\r\n\r\nexport async function GET(request: Request) {\r\n  const { searchParams, origin } = new URL(request.url)\r\n  const code = searchParams.get('code')\r\n  // if \"next\" is in param, use it as the redirect URL\r\n  let next = searchParams.get('next') ?? '/'\r\n  if (!next.startsWith('/')) {\r\n    // if \"next\" is not a relative URL, use the default\r\n    next = '/'\r\n  }\r\n\r\n  if (code) {\r\n    const supabase = await createClient()\r\n    const { error } = await supabase.auth.exchangeCodeForSession(code)\r\n    if (!error) {\r\n      const forwardedHost = request.headers.get('x-forwarded-host') // original origin before load balancer\r\n      const isLocalEnv = process.env.NODE_ENV === 'development'\r\n      if (isLocalEnv) {\r\n        // we can be sure that there is no load balancer in between, so no need to watch for X-Forwarded-Host\r\n        return NextResponse.redirect(`${origin}${next}`)\r\n      } else if (forwardedHost) {\r\n        return NextResponse.redirect(`https://${forwardedHost}${next}`)\r\n      } else {\r\n        return NextResponse.redirect(`${origin}${next}`)\r\n      }\r\n    }\r\n  }\r\n\r\n  // return the user to an error page with instructions\r\n  return NextResponse.redirect(`${origin}/auth/error`)\r\n}\r\n",
      "type": "registry:page",
      "target": "app/auth/oauth/route.ts"
    },
    {
      "path": "registry/default/blocks/social-auth-nextjs/components/login-form.tsx",
      "content": "'use client'\r\n\r\nimport { cn } from '@/lib/utils'\r\nimport { createClient } from '@/registry/default/clients/nextjs/lib/supabase/client'\r\nimport { Button } from '@/registry/default/components/ui/button'\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from '@/registry/default/components/ui/card'\r\nimport { useState } from 'react'\r\n\r\nexport function LoginForm({ className, ...props }: React.ComponentPropsWithoutRef<'div'>) {\r\n  const [error, setError] = useState<string | null>(null)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  const handleSocialLogin = async (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    const supabase = createClient()\r\n    setIsLoading(true)\r\n    setError(null)\r\n\r\n    try {\r\n      const { error } = await supabase.auth.signInWithOAuth({\r\n        provider: 'github',\r\n        options: {\r\n          redirectTo: `${window.location.origin}/auth/oauth?next=/protected`,\r\n        },\r\n      })\r\n\r\n      if (error) throw error\r\n    } catch (error: unknown) {\r\n      setError(error instanceof Error ? error.message : 'An error occurred')\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={cn('flex flex-col gap-6', className)} {...props}>\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"text-2xl\">Welcome!</CardTitle>\r\n          <CardDescription>Sign in to your account to continue</CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <form onSubmit={handleSocialLogin}>\r\n            <div className=\"flex flex-col gap-6\">\r\n              {error && <p className=\"text-sm text-destructive-500\">{error}</p>}\r\n              <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\r\n                {isLoading ? 'Logging in...' : 'Continue with GitHub'}\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/blocks/social-auth-nextjs/middleware.ts",
      "content": "import { updateSession } from '@/registry/default/clients/nextjs/lib/supabase/middleware'\r\nimport { type NextRequest } from 'next/server'\r\n\r\nexport async function middleware(request: NextRequest) {\r\n  return await updateSession(request)\r\n}\r\n\r\nexport const config = {\r\n  matcher: [\r\n    /*\r\n     * Match all request paths except for the ones starting with:\r\n     * - _next/static (static files)\r\n     * - _next/image (image optimization files)\r\n     * - favicon.ico (favicon file)\r\n     * Feel free to modify this pattern to include more paths.\r\n     */\r\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\r\n  ],\r\n}\r\n",
      "type": "registry:file",
      "target": "middleware.ts"
    },
    {
      "path": "registry/default/blocks/social-auth-nextjs/components/logout-button.tsx",
      "content": "'use client'\r\n\r\nimport { createClient } from '@/registry/default/clients/nextjs/lib/supabase/client'\r\nimport { Button } from '@/registry/default/components/ui/button'\r\nimport { useRouter } from 'next/navigation'\r\n\r\nexport function LogoutButton() {\r\n  const router = useRouter()\r\n\r\n  const logout = async () => {\r\n    const supabase = createClient()\r\n    await supabase.auth.signOut()\r\n    router.push('/auth/login')\r\n  }\r\n\r\n  return <Button onClick={logout}>Logout</Button>\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/clients/nextjs/lib/supabase/client.ts",
      "content": "import { createBrowserClient } from '@supabase/ssr'\r\n\r\nexport function createClient() {\r\n  return createBrowserClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_PUBLISHABLE_OR_ANON_KEY!\r\n  )\r\n}\r\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/default/clients/nextjs/lib/supabase/middleware.ts",
      "content": "import { createServerClient } from '@supabase/ssr'\r\nimport { NextResponse, type NextRequest } from 'next/server'\r\n\r\nexport async function updateSession(request: NextRequest) {\r\n  let supabaseResponse = NextResponse.next({\r\n    request,\r\n  })\r\n\r\n  // With Fluid compute, don't put this client in a global environment\r\n  // variable. Always create a new one on each request.\r\n  const supabase = createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_PUBLISHABLE_OR_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        getAll() {\r\n          return request.cookies.getAll()\r\n        },\r\n        setAll(cookiesToSet) {\r\n          cookiesToSet.forEach(({ name, value }) => request.cookies.set(name, value))\r\n          supabaseResponse = NextResponse.next({\r\n            request,\r\n          })\r\n          cookiesToSet.forEach(({ name, value, options }) =>\r\n            supabaseResponse.cookies.set(name, value, options)\r\n          )\r\n        },\r\n      },\r\n    }\r\n  )\r\n\r\n  // Do not run code between createServerClient and\r\n  // supabase.auth.getClaims(). A simple mistake could make it very hard to debug\r\n  // issues with users being randomly logged out.\r\n\r\n  // IMPORTANT: If you remove getClaims() and you use server-side rendering\r\n  // with the Supabase client, your users may be randomly logged out.\r\n  const { data } = await supabase.auth.getClaims()\r\n  const user = data?.claims\r\n\r\n  if (\r\n    !user &&\r\n    !request.nextUrl.pathname.startsWith('/login') &&\r\n    !request.nextUrl.pathname.startsWith('/auth')\r\n  ) {\r\n    // no user, potentially respond by redirecting the user to the login page\r\n    const url = request.nextUrl.clone()\r\n    url.pathname = '/auth/login'\r\n    return NextResponse.redirect(url)\r\n  }\r\n\r\n  // IMPORTANT: You *must* return the supabaseResponse object as it is.\r\n  // If you're creating a new response object with NextResponse.next() make sure to:\r\n  // 1. Pass the request in it, like so:\r\n  //    const myNewResponse = NextResponse.next({ request })\r\n  // 2. Copy over the cookies, like so:\r\n  //    myNewResponse.cookies.setAll(supabaseResponse.cookies.getAll())\r\n  // 3. Change the myNewResponse object to fit your needs, but avoid changing\r\n  //    the cookies!\r\n  // 4. Finally:\r\n  //    return myNewResponse\r\n  // If this is not done, you may be causing the browser and server to go out\r\n  // of sync and terminate the user's session prematurely!\r\n\r\n  return supabaseResponse\r\n}\r\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/default/clients/nextjs/lib/supabase/server.ts",
      "content": "import { createServerClient } from '@supabase/ssr'\r\nimport { cookies } from 'next/headers'\r\n\r\n/**\r\n * If using Fluid compute: Don't put this client in a global variable. Always create a new client within each\r\n * function when using it.\r\n */\r\nexport async function createClient() {\r\n  const cookieStore = await cookies()\r\n\r\n  return createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_PUBLISHABLE_OR_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        getAll() {\r\n          return cookieStore.getAll()\r\n        },\r\n        setAll(cookiesToSet) {\r\n          try {\r\n            cookiesToSet.forEach(({ name, value, options }) =>\r\n              cookieStore.set(name, value, options)\r\n            )\r\n          } catch {\r\n            // The `setAll` method was called from a Server Component.\r\n            // This can be ignored if you have middleware refreshing\r\n            // user sessions.\r\n          }\r\n        },\r\n      },\r\n    }\r\n  )\r\n}\r\n",
      "type": "registry:lib"
    }
  ],
  "envVars": {
    "NEXT_PUBLIC_SUPABASE_URL": "",
    "NEXT_PUBLIC_SUPABASE_PUBLISHABLE_OR_ANON_KEY": ""
  },
  "docs": "You'll need to set the following environment variables in your project: `NEXT_PUBLIC_SUPABASE_URL` and `NEXT_PUBLIC_SUPABASE_PUBLISHABLE_OR_ANON_KEY`."
}