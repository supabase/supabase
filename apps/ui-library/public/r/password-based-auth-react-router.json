{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "password-based-auth-react-router",
  "type": "registry:block",
  "title": "Password Based Auth flow for React Router and Supabase",
  "description": "Password Based Auth flow for React Router and Supabase",
  "dependencies": [
    "@supabase/ssr@latest",
    "@react-router/dev@latest",
    "@react-router/fs-routes@latest",
    "@supabase/supabase-js@latest"
  ],
  "registryDependencies": [
    "button",
    "card",
    "input",
    "label"
  ],
  "files": [
    {
      "path": "registry/default/blocks/password-based-auth-react-router/app/routes/auth.confirm.tsx",
      "content": "import { createClient } from '@/registry/default/clients/react-router/lib/supabase/server'\r\nimport { type EmailOtpType } from '@supabase/supabase-js'\r\nimport { type LoaderFunctionArgs, redirect } from 'react-router'\r\n\r\nexport async function loader({ request }: LoaderFunctionArgs) {\r\n  const requestUrl = new URL(request.url)\r\n  const token_hash = requestUrl.searchParams.get('token_hash')\r\n  const type = requestUrl.searchParams.get('type') as EmailOtpType | null\r\n  const _next = requestUrl.searchParams.get('next')\r\n  const next = _next?.startsWith('/') ? _next : '/'\r\n\r\n  if (token_hash && type) {\r\n    const { supabase, headers } = createClient(request)\r\n    const { error } = await supabase.auth.verifyOtp({\r\n      type,\r\n      token_hash,\r\n    })\r\n    if (!error) {\r\n      return redirect(next, { headers })\r\n    } else {\r\n      return redirect(`/auth/error?error=${error?.message}`)\r\n    }\r\n  }\r\n\r\n  // redirect the user to an error page with some instructions\r\n  return redirect(`/auth/error?error=No token hash or type`)\r\n}\r\n",
      "type": "registry:file",
      "target": "app/routes/auth.confirm.tsx"
    },
    {
      "path": "registry/default/blocks/password-based-auth-react-router/app/routes/auth.error.tsx",
      "content": "import { Card, CardContent, CardHeader, CardTitle } from '@/registry/default/components/ui/card'\r\nimport { useSearchParams } from 'react-router'\r\n\r\nexport default function Page() {\r\n  let [searchParams] = useSearchParams()\r\n\r\n  return (\r\n    <div className=\"flex min-h-svh w-full items-center justify-center p-6 md:p-10\">\r\n      <div className=\"w-full max-w-sm\">\r\n        <div className=\"flex flex-col gap-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"text-2xl\">Sorry, something went wrong.</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {searchParams?.get('error') ? (\r\n                <p className=\"text-sm text-muted-foreground\">\r\n                  Code error: {searchParams?.get('error')}\r\n                </p>\r\n              ) : (\r\n                <p className=\"text-sm text-muted-foreground\">An unspecified error occurred.</p>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:file",
      "target": "app/routes/auth.error.tsx"
    },
    {
      "path": "registry/default/blocks/password-based-auth-react-router/app/routes/forgot-password.tsx",
      "content": "import { createClient } from '@/registry/default/clients/react-router/lib/supabase/server'\r\nimport { Button } from '@/registry/default/components/ui/button'\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from '@/registry/default/components/ui/card'\r\nimport { Input } from '@/registry/default/components/ui/input'\r\nimport { Label } from '@/registry/default/components/ui/label'\r\nimport {\r\n  type ActionFunctionArgs,\r\n  Link,\r\n  data,\r\n  redirect,\r\n  useFetcher,\r\n  useSearchParams,\r\n} from 'react-router'\r\n\r\nexport const action = async ({ request }: ActionFunctionArgs) => {\r\n  const formData = await request.formData()\r\n  const email = formData.get('email') as string\r\n\r\n  const { supabase, headers } = createClient(request)\r\n  const origin = new URL(request.url).origin\r\n\r\n  // Send the actual reset password email\r\n  const { error } = await supabase.auth.resetPasswordForEmail(email, {\r\n    redirectTo: `${origin}/auth/confirm?next=/update-password`,\r\n  })\r\n\r\n  if (error) {\r\n    return data(\r\n      {\r\n        error: error instanceof Error ? error.message : 'An error occurred',\r\n        data: { email },\r\n      },\r\n      { headers }\r\n    )\r\n  }\r\n\r\n  return redirect('/forgot-password?success')\r\n}\r\n\r\nexport default function ForgotPassword() {\r\n  const fetcher = useFetcher<typeof action>()\r\n  let [searchParams] = useSearchParams()\r\n\r\n  const success = !!searchParams.has('success')\r\n  const error = fetcher.data?.error\r\n  const loading = fetcher.state === 'submitting'\r\n\r\n  return (\r\n    <div className=\"flex min-h-svh w-full items-center justify-center p-6 md:p-10\">\r\n      <div className=\"w-full max-w-sm\">\r\n        <div className=\"flex flex-col gap-6\">\r\n          {success ? (\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"text-2xl\">Check Your Email</CardTitle>\r\n                <CardDescription>Password reset instructions sent</CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <p className=\"text-sm text-muted-foreground\">\r\n                  If you registered using your email and password, you will receive a password reset\r\n                  email.\r\n                </p>\r\n              </CardContent>\r\n            </Card>\r\n          ) : (\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"text-2xl\">Reset Your Password</CardTitle>\r\n                <CardDescription>\r\n                  Type in your email and we&apos;ll send you a link to reset your password\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <fetcher.Form method=\"post\">\r\n                  <div className=\"flex flex-col gap-6\">\r\n                    <div className=\"grid gap-2\">\r\n                      <Label htmlFor=\"email\">Email</Label>\r\n                      <Input\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        type=\"email\"\r\n                        placeholder=\"m@example.com\"\r\n                        required\r\n                      />\r\n                    </div>\r\n                    {error && <p className=\"text-sm text-red-500\">{error}</p>}\r\n                    <Button type=\"submit\" className=\"w-full\" disabled={loading}>\r\n                      {loading ? 'Sending...' : 'Send reset email'}\r\n                    </Button>\r\n                  </div>\r\n                  <div className=\"mt-4 text-center text-sm\">\r\n                    Already have an account?{' '}\r\n                    <Link to=\"/login\" className=\"underline underline-offset-4\">\r\n                      Login\r\n                    </Link>\r\n                  </div>\r\n                </fetcher.Form>\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:file",
      "target": "app/routes/forgot-password.tsx"
    },
    {
      "path": "registry/default/blocks/password-based-auth-react-router/app/routes/login.tsx",
      "content": "import { createClient } from '@/registry/default/clients/react-router/lib/supabase/server'\r\nimport { Button } from '@/registry/default/components/ui/button'\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from '@/registry/default/components/ui/card'\r\nimport { Input } from '@/registry/default/components/ui/input'\r\nimport { Label } from '@/registry/default/components/ui/label'\r\nimport { type ActionFunctionArgs, Link, redirect, useFetcher } from 'react-router'\r\n\r\nexport const action = async ({ request }: ActionFunctionArgs) => {\r\n  const { supabase, headers } = createClient(request)\r\n\r\n  const formData = await request.formData()\r\n\r\n  const email = formData.get('email') as string\r\n  const password = formData.get('password') as string\r\n\r\n  const { error } = await supabase.auth.signInWithPassword({\r\n    email,\r\n    password,\r\n  })\r\n\r\n  if (error) {\r\n    return {\r\n      error: error instanceof Error ? error.message : 'An error occurred',\r\n    }\r\n  }\r\n\r\n  // Update this route to redirect to an authenticated route. The user already has an active session.\r\n  return redirect('/protected', { headers })\r\n}\r\n\r\nexport default function Login() {\r\n  const fetcher = useFetcher<typeof action>()\r\n\r\n  const error = fetcher.data?.error\r\n  const loading = fetcher.state === 'submitting'\r\n\r\n  return (\r\n    <div className=\"flex min-h-svh w-full items-center justify-center p-6 md:p-10\">\r\n      <div className=\"w-full max-w-sm\">\r\n        <div className=\"flex flex-col gap-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"text-2xl\">Login</CardTitle>\r\n              <CardDescription>Enter your email below to login to your account</CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <fetcher.Form method=\"post\">\r\n                <div className=\"flex flex-col gap-6\">\r\n                  <div className=\"grid gap-2\">\r\n                    <Label htmlFor=\"email\">Email</Label>\r\n                    <Input\r\n                      id=\"email\"\r\n                      name=\"email\"\r\n                      type=\"email\"\r\n                      placeholder=\"m@example.com\"\r\n                      required\r\n                    />\r\n                  </div>\r\n                  <div className=\"grid gap-2\">\r\n                    <div className=\"flex items-center\">\r\n                      <Label htmlFor=\"password\">Password</Label>\r\n                      <Link\r\n                        to=\"/forgot-password\"\r\n                        className=\"ml-auto inline-block text-sm underline-offset-4 hover:underline\"\r\n                      >\r\n                        Forgot your password?\r\n                      </Link>\r\n                    </div>\r\n                    <Input id=\"password\" type=\"password\" name=\"password\" required />\r\n                  </div>\r\n                  {error && <p className=\"text-sm text-red-500\">{error}</p>}\r\n                  <Button type=\"submit\" className=\"w-full\" disabled={loading}>\r\n                    {loading ? 'Logging in...' : 'Login'}\r\n                  </Button>\r\n                </div>\r\n                <div className=\"mt-4 text-center text-sm\">\r\n                  Don&apos;t have an account?{' '}\r\n                  <Link to=\"/sign-up\" className=\"underline underline-offset-4\">\r\n                    Sign up\r\n                  </Link>\r\n                </div>\r\n              </fetcher.Form>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:file",
      "target": "app/routes/login.tsx"
    },
    {
      "path": "registry/default/blocks/password-based-auth-react-router/app/routes/logout.tsx",
      "content": "import { createClient } from '@/registry/default/clients/react-router/lib/supabase/server'\r\nimport { type ActionFunctionArgs, redirect } from 'react-router'\r\n\r\nexport async function loader({ request }: ActionFunctionArgs) {\r\n  const { supabase, headers } = createClient(request)\r\n\r\n  const { error } = await supabase.auth.signOut()\r\n\r\n  if (error) {\r\n    console.error(error)\r\n    return { success: false, error: error.message }\r\n  }\r\n\r\n  // Redirect to dashboard or home page after successful sign-in\r\n  return redirect('/', { headers })\r\n}\r\n",
      "type": "registry:file",
      "target": "app/routes/logout.tsx"
    },
    {
      "path": "registry/default/blocks/password-based-auth-react-router/app/routes/protected.tsx",
      "content": "import { createClient } from '@/registry/default/clients/react-router/lib/supabase/server'\r\nimport { Button } from '@/registry/default/components/ui/button'\r\nimport { type LoaderFunctionArgs, redirect, useLoaderData } from 'react-router'\r\n\r\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\r\n  const { supabase } = createClient(request)\r\n\r\n  const { data, error } = await supabase.auth.getUser()\r\n  if (error || !data?.user) {\r\n    return redirect('/login')\r\n  }\r\n\r\n  return data\r\n}\r\n\r\nexport default function ProtectedPage() {\r\n  let data = useLoaderData<typeof loader>()\r\n\r\n  return (\r\n    <div className=\"flex items-center justify-center h-screen gap-2\">\r\n      <p>\r\n        Hello <span className=\"text-primary font-semibold\">{data.user.email}</span>\r\n      </p>\r\n      <a href=\"/logout\">\r\n        <Button>Logout</Button>\r\n      </a>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:file",
      "target": "app/routes/protected.tsx"
    },
    {
      "path": "registry/default/blocks/password-based-auth-react-router/app/routes/sign-up.tsx",
      "content": "import { createClient } from '@/registry/default/clients/react-router/lib/supabase/server'\r\nimport { Button } from '@/registry/default/components/ui/button'\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from '@/registry/default/components/ui/card'\r\nimport { Input } from '@/registry/default/components/ui/input'\r\nimport { Label } from '@/registry/default/components/ui/label'\r\nimport { type ActionFunctionArgs, Link, redirect, useFetcher, useSearchParams } from 'react-router'\r\n\r\nexport const action = async ({ request }: ActionFunctionArgs) => {\r\n  const { supabase } = createClient(request)\r\n\r\n  const url = new URL(request.url)\r\n  const origin = url.origin\r\n\r\n  const formData = await request.formData()\r\n\r\n  const email = formData.get('email') as string\r\n  const password = formData.get('password') as string\r\n  const repeatPassword = formData.get('repeat-password') as string\r\n\r\n  if (!password) {\r\n    return {\r\n      error: 'Password is required',\r\n    }\r\n  }\r\n\r\n  if (password !== repeatPassword) {\r\n    return { error: 'Passwords do not match' }\r\n  }\r\n\r\n  const { error } = await supabase.auth.signUp({\r\n    email,\r\n    password,\r\n    options: {\r\n      emailRedirectTo: `${origin}/protected`,\r\n    },\r\n  })\r\n\r\n  if (error) {\r\n    return { error: error.message }\r\n  }\r\n\r\n  return redirect('/sign-up?success')\r\n}\r\n\r\nexport default function SignUp() {\r\n  const fetcher = useFetcher<typeof action>()\r\n  let [searchParams] = useSearchParams()\r\n\r\n  const success = !!searchParams.has('success')\r\n  const error = fetcher.data?.error\r\n  const loading = fetcher.state === 'submitting'\r\n\r\n  return (\r\n    <div className=\"flex min-h-svh w-full items-center justify-center p-6 md:p-10\">\r\n      <div className=\"w-full max-w-sm\">\r\n        <div className=\"flex flex-col gap-6\">\r\n          {success ? (\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"text-2xl\">Thank you for signing up!</CardTitle>\r\n                <CardDescription>Check your email to confirm</CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <p className=\"text-sm text-muted-foreground\">\r\n                  You've successfully signed up. Please check your email to confirm your account\r\n                  before signing in.\r\n                </p>\r\n              </CardContent>\r\n            </Card>\r\n          ) : (\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"text-2xl\">Sign up</CardTitle>\r\n                <CardDescription>Create a new account</CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <fetcher.Form method=\"post\">\r\n                  <div className=\"flex flex-col gap-6\">\r\n                    <div className=\"grid gap-2\">\r\n                      <Label htmlFor=\"email\">Email</Label>\r\n                      <Input\r\n                        id=\"email\"\r\n                        name=\"email\"\r\n                        type=\"email\"\r\n                        placeholder=\"m@example.com\"\r\n                        required\r\n                      />\r\n                    </div>\r\n                    <div className=\"grid gap-2\">\r\n                      <div className=\"flex items-center\">\r\n                        <Label htmlFor=\"password\">Password</Label>\r\n                      </div>\r\n                      <Input id=\"password\" name=\"password\" type=\"password\" required />\r\n                    </div>\r\n                    <div className=\"grid gap-2\">\r\n                      <div className=\"flex items-center\">\r\n                        <Label htmlFor=\"repeat-password\">Repeat Password</Label>\r\n                      </div>\r\n                      <Input id=\"repeat-password\" name=\"repeat-password\" type=\"password\" required />\r\n                    </div>\r\n                    {error && <p className=\"text-sm text-red-500\">{error}</p>}\r\n                    <Button type=\"submit\" className=\"w-full\" disabled={loading}>\r\n                      {loading ? 'Creating an account...' : 'Sign up'}\r\n                    </Button>\r\n                  </div>\r\n                  <div className=\"mt-4 text-center text-sm\">\r\n                    Already have an account?{' '}\r\n                    <Link to=\"/login\" className=\"underline underline-offset-4\">\r\n                      Login\r\n                    </Link>\r\n                  </div>\r\n                </fetcher.Form>\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:file",
      "target": "app/routes/sign-up.tsx"
    },
    {
      "path": "registry/default/blocks/password-based-auth-react-router/app/routes/update-password.tsx",
      "content": "import { createClient } from '@/registry/default/clients/react-router/lib/supabase/server'\r\nimport { Button } from '@/registry/default/components/ui/button'\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from '@/registry/default/components/ui/card'\r\nimport { Input } from '@/registry/default/components/ui/input'\r\nimport { Label } from '@/registry/default/components/ui/label'\r\nimport { type ActionFunctionArgs, redirect, useFetcher } from 'react-router'\r\n\r\nexport const action = async ({ request }: ActionFunctionArgs) => {\r\n  const { supabase, headers } = createClient(request)\r\n  const formData = await request.formData()\r\n  const password = formData.get('password') as string\r\n\r\n  if (!password) {\r\n    return { error: 'Password is required' }\r\n  }\r\n\r\n  const { error } = await supabase.auth.updateUser({ password: password })\r\n\r\n  if (error) {\r\n    return {\r\n      error: error instanceof Error ? error.message : 'An error occurred',\r\n    }\r\n  }\r\n\r\n  // Redirect to sign-in page after successful password update\r\n  return redirect('/protected', { headers })\r\n}\r\n\r\nexport default function Page() {\r\n  const fetcher = useFetcher<typeof action>()\r\n\r\n  const error = fetcher.data?.error\r\n  const loading = fetcher.state === 'submitting'\r\n\r\n  return (\r\n    <div className=\"flex min-h-svh w-full items-center justify-center p-6 md:p-10\">\r\n      <div className=\"w-full max-w-sm\">\r\n        <div className=\"flex flex-col gap-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"text-2xl\">Reset Your Password</CardTitle>\r\n              <CardDescription>Please enter your new password below.</CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <fetcher.Form method=\"post\">\r\n                <div className=\"flex flex-col gap-6\">\r\n                  <div className=\"grid gap-2\">\r\n                    <Label htmlFor=\"password\">New password</Label>\r\n                    <Input\r\n                      id=\"password\"\r\n                      name=\"password\"\r\n                      type=\"password\"\r\n                      placeholder=\"New password\"\r\n                      required\r\n                    />\r\n                  </div>\r\n                  {error && <p className=\"text-sm text-red-500\">{error}</p>}\r\n                  <Button type=\"submit\" className=\"w-full\" disabled={loading}>\r\n                    {loading ? 'Saving...' : 'Save new password'}\r\n                  </Button>\r\n                </div>\r\n              </fetcher.Form>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:file",
      "target": "app/routes/update-password.tsx"
    },
    {
      "path": "registry/default/blocks/password-based-auth-react-router/app/routes.ts",
      "content": "import { type RouteConfig } from '@react-router/dev/routes'\r\nimport { flatRoutes } from '@react-router/fs-routes'\r\n\r\nexport default flatRoutes() satisfies RouteConfig\r\n",
      "type": "registry:file",
      "target": "app/routes.ts"
    },
    {
      "path": "registry/default/clients/react-router/lib/supabase/client.ts",
      "content": "/// <reference types=\"vite/types/importMeta.d.ts\" />\r\nimport { createBrowserClient } from '@supabase/ssr'\r\n\r\nexport function createClient() {\r\n  return createBrowserClient(\r\n    import.meta.env.VITE_SUPABASE_URL!,\r\n    import.meta.env.VITE_SUPABASE_PUBLISHABLE_OR_ANON_KEY!\r\n  )\r\n}\r\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/default/clients/react-router/lib/supabase/server.ts",
      "content": "import { createServerClient, parseCookieHeader, serializeCookieHeader } from '@supabase/ssr'\r\n\r\nexport function createClient(request: Request) {\r\n  const headers = new Headers()\r\n\r\n  const supabase = createServerClient(\r\n    process.env.VITE_SUPABASE_URL!,\r\n    process.env.VITE_SUPABASE_PUBLISHABLE_OR_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        getAll() {\r\n          return parseCookieHeader(request.headers.get('Cookie') ?? '') as {\r\n            name: string\r\n            value: string\r\n          }[]\r\n        },\r\n        setAll(cookiesToSet) {\r\n          cookiesToSet.forEach(({ name, value, options }) =>\r\n            headers.append('Set-Cookie', serializeCookieHeader(name, value, options))\r\n          )\r\n        },\r\n      },\r\n    }\r\n  )\r\n\r\n  return { supabase, headers }\r\n}\r\n",
      "type": "registry:lib"
    }
  ],
  "envVars": {
    "VITE_SUPABASE_URL": "",
    "VITE_SUPABASE_PUBLISHABLE_OR_ANON_KEY": ""
  },
  "docs": "You'll need to set the following environment variables in your project: `VITE_SUPABASE_URL` and `VITE_SUPABASE_PUBLISHABLE_OR_ANON_KEY`."
}