{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "password-based-auth-react-router",
  "type": "registry:block",
  "title": "Password Based Auth flow for React Router and Supabase",
  "description": "Password Based Auth flow for React Router and Supabase",
  "dependencies": [
    "@supabase/ssr@latest",
    "@react-router/dev@latest",
    "@supabase/supabase-js@latest"
  ],
  "registryDependencies": [
    "button",
    "card",
    "input",
    "label"
  ],
  "files": [
    {
      "path": "registry/default/blocks/password-based-auth-react-router/app/routes.ts",
      "content": "import { type RouteConfig, route, index } from '@react-router/dev/routes'\n\nexport default [\n  route('sign-in', 'routes/sign-in.tsx'),\n  route('sign-up', 'routes/sign-up.tsx'),\n  route('sign-out', 'routes/sign-out.tsx'),\n  route('forgot-password', 'routes/forgot-password.tsx'),\n  route('protected', 'routes/protected.tsx'),\n] satisfies RouteConfig\n",
      "type": "registry:page",
      "target": "app/routes.ts"
    },
    {
      "path": "registry/default/blocks/password-based-auth-react-router/app/routes/sign-in.tsx",
      "content": "import { redirect } from 'react-router'\nimport { Form, Link, useActionData, useNavigation } from 'react-router'\nimport type { ActionFunctionArgs } from 'react-router'\nimport { createClient } from '@/registry/default/clients/react-router/lib/supabase.server'\nimport { Input } from '@/registry/default/components/ui/input'\nimport { Label } from '@/registry/default/components/ui/label'\nimport { Button } from '@/registry/default/components/ui/button'\n\nexport const action = async ({ request }: ActionFunctionArgs) => {\n  const { supabase, headers } = createClient(request)\n  const formData = await request.formData()\n\n  const { error } = await supabase.auth.signInWithPassword({\n    email: formData.get('email') as string,\n    password: formData.get('password') as string,\n  })\n\n  if (error) {\n    return { success: false, error: error.message }\n  }\n\n  // Redirect to home page after successful sign-in\n  return redirect('/', { headers })\n}\n\nconst SignIn = () => {\n  const actionData = useActionData<typeof action>()\n  const navigation = useNavigation()\n  const isSubmitting = navigation.state === 'submitting'\n\n  return (\n    <div className=\"max-w-md mx-auto mt-24\">\n      <Form method=\"post\" className=\"flex-1 flex flex-col min-w-64\">\n        <h1 className=\"text-2xl font-medium\">Sign in</h1>\n        <p className=\"text-sm text-foreground\">\n          Don&apos;t have an account?{' '}\n          <Link className=\"text-foreground font-medium underline\" to=\"/sign-up\">\n            Sign up\n          </Link>\n        </p>\n        <div className=\"flex flex-col gap-2 [&>input]:mb-3 mt-8\">\n          <Label htmlFor=\"email\">Email</Label>\n          <Input name=\"email\" placeholder=\"you@example.com\" required />\n          <div className=\"flex justify-between items-center\">\n            <Label htmlFor=\"password\">Password</Label>\n            <Link className=\"text-xs text-foreground underline\" to=\"/forgot-password\">\n              Forgot Password?\n            </Link>\n          </div>\n          <Input type=\"password\" name=\"password\" placeholder=\"Your password\" required />\n          <Button disabled={isSubmitting}>{isSubmitting ? 'Signing in...' : 'Sign in'}</Button>\n\n          {actionData?.error && (\n            <div className=\"flex flex-col gap-2 w-full max-w-md text-sm\">\n              {actionData.error && (\n                <div className=\"text-foreground border-l-2 border-foreground px-4\">\n                  {actionData.error}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </Form>\n    </div>\n  )\n}\n\nexport default SignIn\n",
      "type": "registry:page",
      "target": "app/routes/sign-in.tsx"
    },
    {
      "path": "registry/default/blocks/password-based-auth-react-router/app/routes/sign-up.tsx",
      "content": "import { Form, Link, useActionData, useNavigation } from 'react-router'\nimport type { ActionFunctionArgs } from 'react-router'\nimport { createClient } from '@/registry/default/clients/react-router/lib/supabase.server'\nimport { Input } from '@/registry/default/components/ui/input'\nimport { Label } from '@/registry/default/components/ui/label'\nimport { Button } from '@/registry/default/components/ui/button'\n\nexport const action = async ({ request }: ActionFunctionArgs) => {\n  const { supabase, headers } = createClient(request)\n  const formData = await request.formData()\n\n  const { error } = await supabase.auth.signUp({\n    email: formData.get('email') as string,\n    password: formData.get('password') as string,\n  })\n\n  if (error) {\n    return { success: false, error: error.message }\n  }\n\n  return {\n    success: true,\n    error: null,\n    message: 'Success! Please check your email for further instructions.',\n  }\n}\n\nexport const SignUp = () => {\n  const actionData = useActionData<typeof action>()\n  const navigation = useNavigation()\n  const isSubmitting = navigation.state === 'submitting'\n\n  return (\n    <div className=\"max-w-md mx-auto mt-24\">\n      <Form method=\"post\" className=\"flex-1 flex flex-col min-w-64\">\n        <h1 className=\"text-2xl font-medium\">Sign up</h1>\n        <p className=\"text-sm text-foreground\">\n          Already have an account?{' '}\n          <Link className=\"text-foreground font-medium underline\" to=\"/sign-in\">\n            Sign in\n          </Link>\n        </p>\n        <div className=\"flex flex-col gap-2 [&>input]:mb-3 mt-8\">\n          <Label htmlFor=\"email\">Email</Label>\n          <Input name=\"email\" placeholder=\"you@example.com\" required />\n          <div className=\"flex justify-between items-center\">\n            <Label htmlFor=\"password\">Password</Label>\n          </div>\n          <Input type=\"password\" name=\"password\" placeholder=\"Your password\" required />\n          <Button disabled={isSubmitting}>{isSubmitting ? 'Signing up...' : 'Sign up'}</Button>\n\n          {!actionData?.success && actionData?.error && (\n            <div className=\"flex flex-col gap-2 w-full max-w-md text-sm\">\n              {actionData.error && (\n                <div className=\"text-foreground border-l-2 border-foreground px-4\">\n                  {actionData.error}\n                </div>\n              )}\n            </div>\n          )}\n          {actionData?.success && (\n            <div className=\"flex flex-col gap-2 w-full max-w-md text-sm\">\n              {actionData.message && (\n                <div className=\"text-foreground border-l-2 border-foreground px-4\">\n                  {actionData.message}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </Form>\n    </div>\n  )\n}\n\nexport default SignUp\n",
      "type": "registry:page",
      "target": "app/routes/sign-up.tsx"
    },
    {
      "path": "registry/default/blocks/password-based-auth-react-router/app/routes/sign-out.tsx",
      "content": "import type { ActionFunctionArgs } from 'react-router'\nimport { redirect } from 'react-router'\nimport { createClient } from '@/registry/default/clients/react-router/lib/supabase.server'\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const { supabase, headers } = createClient(request)\n\n  const { error } = await supabase.auth.signOut()\n\n  if (error) {\n    console.error(error)\n    return { success: false, error: error.message }\n  }\n\n  // Redirect to dashboard or home page after successful sign-in\n  return redirect('/', { headers })\n}\n",
      "type": "registry:page",
      "target": "app/routes/sign-out.tsx"
    },
    {
      "path": "registry/default/blocks/password-based-auth-react-router/app/routes/protected.tsx",
      "content": "import { redirect } from 'react-router'\nimport { InfoIcon } from 'lucide-react'\n\nimport { createClient } from '@/registry/default/clients/react-router/lib/supabase.server'\nimport type { Route } from '../+types/root'\n\nexport const loader = async ({ request }: Route.LoaderArgs) => {\n  const { supabase } = createClient(request)\n\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n\n  // Redirect to sign-in page if user is not authenticated\n  if (!user) {\n    return redirect('/sign-in')\n  }\n\n  return { user }\n}\n\nconst ProtectedPage = ({ loaderData }: Route.ComponentProps) => {\n  const { user } = loaderData\n\n  return (\n    <div className=\"flex-1 w-full flex flex-col gap-12 max-w-5xl mx-auto\">\n      <div className=\"w-full max-w-5xl mx-auto\">\n        <div className=\"bg-accent text-sm p-3 px-5 rounded-md text-foreground flex gap-3 items-center\">\n          <InfoIcon size=\"16\" strokeWidth={2} />\n          This is a protected page that you can only see as an authenticated user\n        </div>\n      </div>\n      <div className=\"flex flex-col gap-2 items-start\">\n        <h2 className=\"font-bold text-2xl mb-4\">Your user details</h2>\n        <pre className=\"text-xs font-mono p-3 rounded border max-h-32 overflow-auto\">\n          {JSON.stringify(user, null, 2)}\n        </pre>\n      </div>\n    </div>\n  )\n}\n\nexport default ProtectedPage\n",
      "type": "registry:page",
      "target": "app/routes/protected.tsx"
    },
    {
      "path": "registry/default/blocks/password-based-auth-react-router/app/routes/forgot-password.tsx",
      "content": "import { redirect } from 'react-router'\nimport { Form, useActionData } from 'react-router'\nimport type { ActionFunctionArgs } from 'react-router'\n\nimport { Input } from '@/registry/default/components/ui/input'\nimport { Button } from '@/registry/default/components/ui/button'\nimport { createClient } from '@/registry/default/clients/react-router/lib/supabase.server'\n\nexport const action = async ({ request }: ActionFunctionArgs) => {\n  const { supabase, headers } = createClient(request)\n  const formData = await request.formData()\n\n  const { error } = await supabase.auth.resetPasswordForEmail(formData.get('email') as string, {\n    redirectTo: 'https://example.com/update-password',\n  })\n\n  if (error) {\n    return { success: false, error: error.message }\n  }\n\n  // Redirect to dashboard or home page after successful sign-in\n  return redirect('/profile', { headers })\n}\n\nconst ForgotPassword = () => {\n  const actionData = useActionData<typeof action>()\n\n  return (\n    <div className=\"max-w-md mx-auto mt-24\">\n      <p>Forgot your password? </p>\n      <Form method=\"post\" className=\"grid gap-4 mt-4\">\n        <Input type=\"email\" name=\"email\" placeholder=\"Email\" required />\n        <br />\n        <Button type=\"submit\">Send reset email</Button>\n      </Form>\n      {actionData?.error && <p style={{ color: 'red' }}>{actionData.error}</p>}\n    </div>\n  )\n}\n\nexport default ForgotPassword\n",
      "type": "registry:page",
      "target": "app/routes/forgot-password.tsx"
    },
    {
      "path": "registry/default/clients/react/lib/supabase/client.ts",
      "content": "import { createClient as createSupabaseClient } from '@supabase/supabase-js'\n\nexport function createClient() {\n  return createSupabaseClient(process.env.VITE_SUPABASE_URL!, process.env.VITE_SUPABASE_ANON_KEY!)\n}\n",
      "type": "registry:lib"
    }
  ]
}