{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "social-auth-tanstack",
  "type": "registry:block",
  "title": "Social Auth flow for TanStack and Supabase",
  "description": "Social Auth flow for TanStack and Supabase",
  "dependencies": [
    "@supabase/ssr@latest",
    "@supabase/supabase-js@latest"
  ],
  "registryDependencies": [
    "button",
    "card"
  ],
  "files": [
    {
      "path": "registry/default/blocks/social-auth-tanstack/components/login-form.tsx",
      "content": "import { cn } from '@/lib/utils'\r\nimport { createClient } from '@/registry/default/clients/tanstack/lib/supabase/client'\r\nimport { Button } from '@/registry/default/components/ui/button'\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from '@/registry/default/components/ui/card'\r\nimport { useState } from 'react'\r\n\r\nexport function LoginForm({ className, ...props }: React.ComponentPropsWithoutRef<'div'>) {\r\n  const [error, setError] = useState<string | null>(null)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  const handleSocialLogin = async (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    const supabase = createClient()\r\n    setIsLoading(true)\r\n    setError(null)\r\n\r\n    try {\r\n      const { error } = await supabase.auth.signInWithOAuth({\r\n        provider: 'github',\r\n        options: {\r\n          redirectTo: `${window.location.origin}/auth/oauth?next=/protected`,\r\n        },\r\n      })\r\n\r\n      if (error) throw error\r\n    } catch (error: unknown) {\r\n      setError(error instanceof Error ? error.message : 'An error occurred')\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={cn('flex flex-col gap-6', className)} {...props}>\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"text-2xl\">Welcome!</CardTitle>\r\n          <CardDescription>Sign in to your account to continue</CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <form onSubmit={handleSocialLogin}>\r\n            <div className=\"flex flex-col gap-6\">\r\n              {error && <p className=\"text-sm text-destructive-500\">{error}</p>}\r\n              <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\r\n                {isLoading ? 'Logging in...' : 'Continue with GitHub'}\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/blocks/social-auth-tanstack/lib/supabase/fetch-user-server-fn.ts",
      "content": "import { createClient } from '@/registry/default/clients/tanstack/lib/supabase/server'\r\nimport type { Factor, User } from '@supabase/supabase-js'\r\nimport { createServerFn } from '@tanstack/react-start'\r\ntype SSRSafeUser = User & {\r\n  factors: (Factor & { factor_type: 'phone' | 'totp' })[]\r\n}\r\n\r\nexport const fetchUser: () => Promise<SSRSafeUser | null> = createServerFn({\r\n  method: 'GET',\r\n}).handler(async () => {\r\n  const supabase = createClient()\r\n  const { data, error } = await supabase.auth.getUser()\r\n\r\n  if (error) {\r\n    return null\r\n  }\r\n\r\n  return data.user as SSRSafeUser\r\n})\r\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/default/blocks/social-auth-tanstack/routes/_protected.tsx",
      "content": "import { fetchUser } from '@/registry/default/blocks/social-auth-tanstack/lib/supabase/fetch-user-server-fn'\r\nimport { createFileRoute, redirect } from '@tanstack/react-router'\r\n\r\nexport const Route = createFileRoute('/_protected')({\r\n  beforeLoad: async () => {\r\n    const user = await fetchUser()\r\n\r\n    if (!user) {\r\n      throw redirect({ to: '/login' })\r\n    }\r\n\r\n    return {\r\n      user,\r\n    }\r\n  },\r\n})\r\n",
      "type": "registry:file",
      "target": "routes/_protected.tsx"
    },
    {
      "path": "registry/default/blocks/social-auth-tanstack/routes/_protected/protected.tsx",
      "content": "import { createFileRoute } from '@tanstack/react-router'\r\n\r\nexport const Route = createFileRoute('/_protected/info')({\r\n  component: Info,\r\n  loader: async ({ context }) => {\r\n    return {\r\n      user: context.user!,\r\n    }\r\n  },\r\n})\r\n\r\nfunction Info() {\r\n  const data = Route.useLoaderData()\r\n\r\n  return <p>Hello {data.user.email}</p>\r\n}\r\n",
      "type": "registry:file",
      "target": "routes/_protected/protected.tsx"
    },
    {
      "path": "registry/default/blocks/social-auth-tanstack/routes/auth/error.tsx",
      "content": "import { Card, CardContent, CardHeader, CardTitle } from '@/registry/default/components/ui/card'\r\nimport { createFileRoute } from '@tanstack/react-router'\r\n\r\nexport const Route = createFileRoute('/auth/error')({\r\n  component: AuthError,\r\n  validateSearch: (params) => {\r\n    if (params.error && typeof params.error === 'string') {\r\n      return { error: params.error }\r\n    }\r\n    return null\r\n  },\r\n})\r\n\r\nfunction AuthError() {\r\n  const params = Route.useSearch()\r\n\r\n  return (\r\n    <div className=\"flex min-h-svh w-full items-center justify-center p-6 md:p-10\">\r\n      <div className=\"w-full max-w-sm\">\r\n        <div className=\"flex flex-col gap-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"text-2xl\">Sorry, something went wrong.</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {params?.error ? (\r\n                <p className=\"text-sm text-muted-foreground\">Code error: {params.error}</p>\r\n              ) : (\r\n                <p className=\"text-sm text-muted-foreground\">An unspecified error occurred.</p>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:file",
      "target": "routes/auth/error.tsx"
    },
    {
      "path": "registry/default/blocks/social-auth-tanstack/routes/auth/oauth.ts",
      "content": "import { createClient } from '@/registry/default/clients/tanstack/lib/supabase/server'\r\nimport { createFileRoute, redirect } from '@tanstack/react-router'\r\nimport { createServerFn } from '@tanstack/react-start'\r\nimport { getWebRequest } from '@tanstack/react-start/server'\r\n\r\nconst confirmFn = createServerFn({ method: 'GET' })\r\n  .validator((searchParams: unknown) => {\r\n    if (\r\n      searchParams &&\r\n      typeof searchParams === 'object' &&\r\n      'code' in searchParams &&\r\n      'next' in searchParams\r\n    ) {\r\n      return searchParams\r\n    }\r\n    throw new Error('Invalid search params')\r\n  })\r\n  .handler(async (ctx) => {\r\n    const request = getWebRequest()\r\n\r\n    if (!request) {\r\n      throw redirect({ to: `/auth/error`, search: { error: 'No request' } })\r\n    }\r\n\r\n    const searchParams = ctx.data\r\n    const code = searchParams['code'] as string\r\n    const _next = (searchParams['next'] ?? '/') as string\r\n    const next = _next?.startsWith('/') ? _next : '/'\r\n\r\n    if (code) {\r\n      const supabase = createClient()\r\n\r\n      const { error } = await supabase.auth.exchangeCodeForSession(code)\r\n      if (!error) {\r\n        // redirect user to specified redirect URL or root of app\r\n        throw redirect({ href: next })\r\n      } else {\r\n        // redirect the user to an error page with some instructions\r\n        throw redirect({\r\n          to: `/auth/error`,\r\n          search: { error: error?.message },\r\n        })\r\n      }\r\n    }\r\n\r\n    // redirect the user to an error page with some instructions\r\n    throw redirect({\r\n      to: `/auth/error`,\r\n      search: { error: 'No code found' },\r\n    })\r\n  })\r\n\r\nexport const Route = createFileRoute('/auth/confirm')({\r\n  preload: false,\r\n  loader: (opts) => confirmFn({ data: opts.location.search }),\r\n})\r\n",
      "type": "registry:file",
      "target": "routes/auth/oauth.ts"
    },
    {
      "path": "registry/default/blocks/social-auth-tanstack/routes/login.tsx",
      "content": "import { LoginForm } from '@/registry/default/blocks/social-auth-tanstack/components/login-form'\r\nimport { createFileRoute } from '@tanstack/react-router'\r\n\r\nexport const Route = createFileRoute('/login')({\r\n  component: Login,\r\n})\r\n\r\nfunction Login() {\r\n  return (\r\n    <div className=\"flex min-h-svh w-full items-center justify-center p-6 md:p-10\">\r\n      <div className=\"w-full max-w-sm\">\r\n        <LoginForm />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:file",
      "target": "routes/login.tsx"
    },
    {
      "path": "registry/default/clients/tanstack/lib/supabase/client.ts",
      "content": "/// <reference types=\"vite/types/importMeta.d.ts\" />\r\nimport { createBrowserClient } from '@supabase/ssr'\r\n\r\nexport function createClient() {\r\n  return createBrowserClient(\r\n    import.meta.env.VITE_SUPABASE_URL!,\r\n    import.meta.env.VITE_SUPABASE_PUBLISHABLE_OR_ANON_KEY!\r\n  )\r\n}\r\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/default/clients/tanstack/lib/supabase/server.ts",
      "content": "import { createServerClient } from '@supabase/ssr'\r\nimport { parseCookies, setCookie } from '@tanstack/react-start/server'\r\n\r\nexport function createClient() {\r\n  return createServerClient(\r\n    process.env.VITE_SUPABASE_URL!,\r\n    process.env.VITE_SUPABASE_PUBLISHABLE_OR_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        getAll() {\r\n          return Object.entries(parseCookies()).map(\r\n            ([name, value]) =>\r\n              ({\r\n                name,\r\n                value,\r\n              }) as { name: string; value: string }\r\n          )\r\n        },\r\n        setAll(cookies) {\r\n          cookies.forEach((cookie) => {\r\n            setCookie(cookie.name, cookie.value)\r\n          })\r\n        },\r\n      },\r\n    }\r\n  )\r\n}\r\n",
      "type": "registry:lib"
    }
  ],
  "envVars": {
    "VITE_SUPABASE_URL": "",
    "VITE_SUPABASE_PUBLISHABLE_OR_ANON_KEY": ""
  },
  "docs": "You'll need to set the following environment variables in your project: `VITE_SUPABASE_URL` and `VITE_SUPABASE_PUBLISHABLE_OR_ANON_KEY`."
}