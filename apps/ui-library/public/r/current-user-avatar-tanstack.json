{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "current-user-avatar-tanstack",
  "type": "registry:component",
  "title": "Current User Avatar",
  "description": "Component which renders the current user's avatar.",
  "dependencies": [
    "@supabase/ssr@latest",
    "@supabase/supabase-js@latest"
  ],
  "registryDependencies": [
    "avatar"
  ],
  "files": [
    {
      "path": "registry/default/blocks/current-user-avatar/components/current-user-avatar.tsx",
      "content": "'use client'\r\n\r\nimport { useCurrentUserImage } from '@/registry/default/blocks/current-user-avatar/hooks/use-current-user-image'\r\nimport { useCurrentUserName } from '@/registry/default/blocks/current-user-avatar/hooks/use-current-user-name'\r\nimport { Avatar, AvatarFallback, AvatarImage } from '@/registry/default/components/ui/avatar'\r\n\r\nexport const CurrentUserAvatar = () => {\r\n  const profileImage = useCurrentUserImage()\r\n  const name = useCurrentUserName()\r\n  const initials = name\r\n    ?.split(' ')\r\n    ?.map((word) => word[0])\r\n    ?.join('')\r\n    ?.toUpperCase()\r\n\r\n  return (\r\n    <Avatar>\r\n      {profileImage && <AvatarImage src={profileImage} alt={initials} />}\r\n      <AvatarFallback>{initials}</AvatarFallback>\r\n    </Avatar>\r\n  )\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/blocks/current-user-avatar/hooks/use-current-user-name.ts",
      "content": "import { createClient } from '@/registry/default/clients/nextjs/lib/supabase/client'\r\nimport { useEffect, useState } from 'react'\r\n\r\nexport const useCurrentUserName = () => {\r\n  const [name, setName] = useState<string | null>(null)\r\n\r\n  useEffect(() => {\r\n    const fetchProfileName = async () => {\r\n      const { data, error } = await createClient().auth.getSession()\r\n      if (error) {\r\n        console.error(error)\r\n      }\r\n\r\n      setName(data.session?.user.user_metadata.full_name ?? '?')\r\n    }\r\n\r\n    fetchProfileName()\r\n  }, [])\r\n\r\n  return name || '?'\r\n}\r\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/default/blocks/current-user-avatar/hooks/use-current-user-image.ts",
      "content": "import { createClient } from '@/registry/default/clients/nextjs/lib/supabase/client'\r\nimport { useEffect, useState } from 'react'\r\n\r\nexport const useCurrentUserImage = () => {\r\n  const [image, setImage] = useState<string | null>(null)\r\n\r\n  useEffect(() => {\r\n    const fetchUserImage = async () => {\r\n      const { data, error } = await createClient().auth.getSession()\r\n      if (error) {\r\n        console.error(error)\r\n      }\r\n\r\n      setImage(data.session?.user.user_metadata.avatar_url ?? null)\r\n    }\r\n    fetchUserImage()\r\n  }, [])\r\n\r\n  return image\r\n}\r\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/default/clients/tanstack/lib/supabase/client.ts",
      "content": "/// <reference types=\"vite/types/importMeta.d.ts\" />\r\nimport { createBrowserClient } from '@supabase/ssr'\r\n\r\nexport function createClient() {\r\n  return createBrowserClient(\r\n    import.meta.env.VITE_SUPABASE_URL!,\r\n    import.meta.env.VITE_SUPABASE_PUBLISHABLE_OR_ANON_KEY!\r\n  )\r\n}\r\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/default/clients/tanstack/lib/supabase/server.ts",
      "content": "import { createServerClient } from '@supabase/ssr'\r\nimport { parseCookies, setCookie } from '@tanstack/react-start/server'\r\n\r\nexport function createClient() {\r\n  return createServerClient(\r\n    process.env.VITE_SUPABASE_URL!,\r\n    process.env.VITE_SUPABASE_PUBLISHABLE_OR_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        getAll() {\r\n          return Object.entries(parseCookies()).map(\r\n            ([name, value]) =>\r\n              ({\r\n                name,\r\n                value,\r\n              }) as { name: string; value: string }\r\n          )\r\n        },\r\n        setAll(cookies) {\r\n          cookies.forEach((cookie) => {\r\n            setCookie(cookie.name, cookie.value)\r\n          })\r\n        },\r\n      },\r\n    }\r\n  )\r\n}\r\n",
      "type": "registry:lib"
    }
  ],
  "envVars": {
    "VITE_SUPABASE_URL": "",
    "VITE_SUPABASE_PUBLISHABLE_OR_ANON_KEY": ""
  },
  "docs": "You'll need to set the following environment variables in your project: `VITE_SUPABASE_URL` and `VITE_SUPABASE_PUBLISHABLE_OR_ANON_KEY`."
}