{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "realtime-chat",
  "type": "registry:component",
  "title": "Realtime Chat",
  "description": "Component which renders realtime chat messages from other users in a room.",
  "dependencies": [
    "@supabase/ssr@latest"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/default/blocks/realtime-chat/components/chat-message.tsx",
      "content": "import type { ChatMessage } from './realtime-chat'\n\ninterface ChatMessageItemProps {\n  message: ChatMessage\n  isOwnMessage: boolean\n}\n\nexport const ChatMessageItem = ({ message, isOwnMessage }: ChatMessageItemProps) => {\n  return (\n    <div className={`flex ${isOwnMessage ? 'justify-end' : 'justify-start'}`}>\n      <div\n        className={`max-w-[70%] rounded-lg p-3 ${\n          isOwnMessage ? 'bg-blue-800 text-white' : 'bg-slate-100'\n        }`}\n      >\n        <div className=\"text-sm font-semibold mb-1\">{message.user.name}</div>\n        <div>{message.content}</div>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/blocks/realtime-chat/components/realtime-chat.tsx",
      "content": "'use client'\n\nimport { useRealtimeChat } from '@/registry/default/blocks/realtime-chat/hooks/use-realtime-chat'\nimport { ChatMessageItem } from './chat-message'\n\nexport interface ChatMessage {\n  id: string\n  content: string\n  user: {\n    name: string\n    avatar?: string\n  }\n  createdAt: string\n}\n\ninterface RealtimeChatProps {\n  roomName: string\n  username: string\n  avatar?: string\n}\n\nexport const RealtimeChat = ({ roomName, username, avatar }: RealtimeChatProps) => {\n  const { messages, sendMessage } = useRealtimeChat({ roomName, username })\n\n  console.log(messages)\n\n  return (\n    <div className=\"flex flex-col h-full w-full\">\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n        {messages.length === 0 ? (\n          <div className=\"text-center text-sm text-foreground/50\">No messages yet</div>\n        ) : null}\n        {messages.map((message) => (\n          <ChatMessageItem\n            key={message.id}\n            message={message}\n            isOwnMessage={message.user.name === username}\n          />\n        ))}\n      </div>\n      <div className=\"border-t p-4\">\n        <form\n          onSubmit={(e) => {\n            e.preventDefault()\n            const form = e.currentTarget\n            const input = form.elements.namedItem('message') as HTMLInputElement\n            if (input.value.trim()) {\n              sendMessage(input.value)\n              input.value = ''\n            }\n          }}\n        >\n          <input\n            type=\"text\"\n            name=\"message\"\n            className=\"w-full px-4 py-2 border rounded-lg\"\n            placeholder=\"Type a message...\"\n          />\n        </form>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/blocks/realtime-chat/hooks/use-realtime-chat.tsx",
      "content": "'use client'\n\nimport { useEffect, useState } from 'react'\nimport { createClient } from '@/registry/default/clients/nextjs/lib/supabase/client'\nimport { ChatMessage } from '../components/realtime-chat'\n\ninterface UseRealtimeChatProps {\n  roomName: string\n  username: string\n}\n\nexport function useRealtimeChat({ roomName, username }: UseRealtimeChatProps) {\n  const supabase = createClient()\n  const [messages, setMessages] = useState<ChatMessage[]>([])\n  const [channel, setChannel] = useState<ReturnType<typeof supabase.channel> | null>(null)\n\n  useEffect(() => {\n    // Create a single channel instance\n    const newChannel = supabase.channel(`chat:${roomName}`)\n\n    // Subscribe to broadcast messages\n    newChannel\n      .on('broadcast', { event: 'message' }, (payload) => {\n        setMessages((current) => [...current, payload.payload as ChatMessage])\n      })\n      .subscribe()\n\n    setChannel(newChannel)\n\n    return () => {\n      supabase.removeChannel(newChannel)\n    }\n  }, [roomName, supabase])\n\n  const sendMessage = async (content: string) => {\n    if (!channel) return\n\n    const message: ChatMessage = {\n      id: crypto.randomUUID(),\n      content,\n      user: {\n        name: username,\n      },\n      createdAt: new Date().toISOString(),\n    }\n\n    // Update local state immediately for the sender\n    setMessages((current) => [...current, message])\n\n    // Broadcast to other users\n    await channel.send({\n      type: 'broadcast',\n      event: 'message',\n      payload: message,\n    })\n  }\n\n  return { messages, sendMessage }\n}\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/default/clients/nextjs/lib/supabase/client.ts",
      "content": "import { createBrowserClient } from '@supabase/ssr'\n\nexport function createClient() {\n  return createBrowserClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n  )\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/default/clients/nextjs/lib/supabase/middleware.ts",
      "content": "import { createServerClient } from '@supabase/ssr'\nimport { NextResponse, type NextRequest } from 'next/server'\n\nexport async function updateSession(request: NextRequest) {\n  let supabaseResponse = NextResponse.next({\n    request,\n  })\n\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return request.cookies.getAll()\n        },\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({ name, value }) => request.cookies.set(name, value))\n          supabaseResponse = NextResponse.next({\n            request,\n          })\n          cookiesToSet.forEach(({ name, value, options }) =>\n            supabaseResponse.cookies.set(name, value, options)\n          )\n        },\n      },\n    }\n  )\n\n  // Do not run code between createServerClient and\n  // supabase.auth.getUser(). A simple mistake could make it very hard to debug\n  // issues with users being randomly logged out.\n\n  // IMPORTANT: DO NOT REMOVE auth.getUser()\n\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n\n  if (\n    !user &&\n    !request.nextUrl.pathname.startsWith('/login') &&\n    !request.nextUrl.pathname.startsWith('/auth')\n  ) {\n    // no user, potentially respond by redirecting the user to the login page\n    const url = request.nextUrl.clone()\n    url.pathname = '/login'\n    return NextResponse.redirect(url)\n  }\n\n  // IMPORTANT: You *must* return the supabaseResponse object as it is.\n  // If you're creating a new response object with NextResponse.next() make sure to:\n  // 1. Pass the request in it, like so:\n  //    const myNewResponse = NextResponse.next({ request })\n  // 2. Copy over the cookies, like so:\n  //    myNewResponse.cookies.setAll(supabaseResponse.cookies.getAll())\n  // 3. Change the myNewResponse object to fit your needs, but avoid changing\n  //    the cookies!\n  // 4. Finally:\n  //    return myNewResponse\n  // If this is not done, you may be causing the browser and server to go out\n  // of sync and terminate the user's session prematurely!\n\n  return supabaseResponse\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/default/clients/nextjs/lib/supabase/server.ts",
      "content": "import { createServerClient } from '@supabase/ssr'\nimport { cookies } from 'next/headers'\n\nexport async function createClient() {\n  const cookieStore = await cookies()\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll()\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options)\n            )\n          } catch {\n            // The `setAll` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n    }\n  )\n}\n",
      "type": "registry:lib"
    }
  ]
}