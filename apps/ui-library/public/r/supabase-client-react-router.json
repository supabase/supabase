{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "supabase-client-react-router",
  "type": "registry:lib",
  "title": "Supabase Client for React Router",
  "description": "",
  "dependencies": [
    "@supabase/ssr@latest"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/default/clients/react-router/lib/supabase.client.ts",
      "content": "import { createBrowserClient } from '@supabase/ssr'\n\n// Use this function to create a client for the browser. You should pass the env variables through a loader and use them\n// to instantiate the client.\nexport function createClient(supabaseUrl: string, supabaseAnonKey: string) {\n  return createBrowserClient(supabaseUrl, supabaseAnonKey)\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/default/clients/react-router/lib/supabase.server.ts",
      "content": "import { createServerClient, parseCookieHeader, serializeCookieHeader } from '@supabase/ssr'\n\nexport function createClient(request: Request) {\n  const headers = new Headers()\n\n  const supabase = createServerClient(process.env.SUPABASE_URL!, process.env.SUPABASE_ANON_KEY!, {\n    cookies: {\n      getAll() {\n        return parseCookieHeader(request.headers.get('Cookie') ?? '') as {\n          name: string\n          value: string\n        }[]\n      },\n      setAll(cookiesToSet) {\n        cookiesToSet.forEach(({ name, value, options }) =>\n          headers.append('Set-Cookie', serializeCookieHeader(name, value, options))\n        )\n      },\n    },\n  })\n\n  return { supabase, headers }\n}\n",
      "type": "registry:lib"
    }
  ]
}