{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "realtime-cursor-nextjs",
  "type": "registry:component",
  "title": "Realtime Cursor",
  "description": "Component which renders realtime cursors from other users in a room.",
  "dependencies": [
    "lucide-react",
    "@supabase/ssr@latest",
    "@supabase/supabase-js@latest"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/default/blocks/realtime-cursor/components/cursor.tsx",
      "content": "import { cn } from '@/lib/utils'\r\nimport { MousePointer2 } from 'lucide-react'\r\n\r\nexport const Cursor = ({\r\n  className,\r\n  style,\r\n  color,\r\n  name,\r\n}: {\r\n  className?: string\r\n  style?: React.CSSProperties\r\n  color: string\r\n  name: string\r\n}) => {\r\n  return (\r\n    <div className={cn('pointer-events-none', className)} style={style}>\r\n      <MousePointer2 color={color} fill={color} size={30} />\r\n\r\n      <div\r\n        className=\"mt-1 px-2 py-1 rounded text-xs font-bold text-white text-center\"\r\n        style={{ backgroundColor: color }}\r\n      >\r\n        {name}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/blocks/realtime-cursor/components/realtime-cursors.tsx",
      "content": "'use client'\r\n\r\nimport { Cursor } from '@/registry/default/blocks/realtime-cursor/components/cursor'\r\nimport { useRealtimeCursors } from '@/registry/default/blocks/realtime-cursor/hooks/use-realtime-cursors'\r\n\r\nconst THROTTLE_MS = 50\r\n\r\nexport const RealtimeCursors = ({ roomName, username }: { roomName: string; username: string }) => {\r\n  const { cursors } = useRealtimeCursors({ roomName, username, throttleMs: THROTTLE_MS })\r\n\r\n  return (\r\n    <div>\r\n      {Object.keys(cursors).map((id) => (\r\n        <Cursor\r\n          key={id}\r\n          className=\"fixed transition-transform ease-in-out z-50\"\r\n          style={{\r\n            transitionDuration: '20ms',\r\n            top: 0,\r\n            left: 0,\r\n            transform: `translate(${cursors[id].position.x}px, ${cursors[id].position.y}px)`,\r\n          }}\r\n          color={cursors[id].color}\r\n          name={cursors[id].user.name}\r\n        />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/blocks/realtime-cursor/hooks/use-realtime-cursors.ts",
      "content": "import { createClient } from '@/registry/default/clients/nextjs/lib/supabase/client'\r\nimport { RealtimeChannel } from '@supabase/supabase-js'\r\nimport { useCallback, useEffect, useRef, useState } from 'react'\r\n\r\n/**\r\n * Throttle a callback to a certain delay, It will only call the callback if the delay has passed, with the arguments\r\n * from the last call\r\n */\r\nconst useThrottleCallback = <Params extends unknown[], Return>(\r\n  callback: (...args: Params) => Return,\r\n  delay: number\r\n) => {\r\n  const lastCall = useRef(0)\r\n  const timeout = useRef<NodeJS.Timeout | null>(null)\r\n\r\n  return useCallback(\r\n    (...args: Params) => {\r\n      const now = Date.now()\r\n      const remainingTime = delay - (now - lastCall.current)\r\n\r\n      if (remainingTime <= 0) {\r\n        if (timeout.current) {\r\n          clearTimeout(timeout.current)\r\n          timeout.current = null\r\n        }\r\n        lastCall.current = now\r\n        callback(...args)\r\n      } else if (!timeout.current) {\r\n        timeout.current = setTimeout(() => {\r\n          lastCall.current = Date.now()\r\n          timeout.current = null\r\n          callback(...args)\r\n        }, remainingTime)\r\n      }\r\n    },\r\n    [callback, delay]\r\n  )\r\n}\r\n\r\nconst supabase = createClient()\r\n\r\nconst generateRandomColor = () => `hsl(${Math.floor(Math.random() * 360)}, 100%, 70%)`\r\n\r\nconst generateRandomNumber = () => Math.floor(Math.random() * 100)\r\n\r\nconst EVENT_NAME = 'realtime-cursor-move'\r\n\r\ntype CursorEventPayload = {\r\n  position: {\r\n    x: number\r\n    y: number\r\n  }\r\n  user: {\r\n    id: number\r\n    name: string\r\n  }\r\n  color: string\r\n  timestamp: number\r\n}\r\n\r\nexport const useRealtimeCursors = ({\r\n  roomName,\r\n  username,\r\n  throttleMs,\r\n}: {\r\n  roomName: string\r\n  username: string\r\n  throttleMs: number\r\n}) => {\r\n  const [color] = useState(generateRandomColor())\r\n  const [userId] = useState(generateRandomNumber())\r\n  const [cursors, setCursors] = useState<Record<string, CursorEventPayload>>({})\r\n\r\n  const channelRef = useRef<RealtimeChannel | null>(null)\r\n\r\n  const callback = useCallback(\r\n    (event: MouseEvent) => {\r\n      const { clientX, clientY } = event\r\n\r\n      const payload: CursorEventPayload = {\r\n        position: {\r\n          x: clientX,\r\n          y: clientY,\r\n        },\r\n        user: {\r\n          id: userId,\r\n          name: username,\r\n        },\r\n        color: color,\r\n        timestamp: new Date().getTime(),\r\n      }\r\n\r\n      channelRef.current?.send({\r\n        type: 'broadcast',\r\n        event: EVENT_NAME,\r\n        payload: payload,\r\n      })\r\n    },\r\n    [color, userId, username]\r\n  )\r\n\r\n  const handleMouseMove = useThrottleCallback(callback, throttleMs)\r\n\r\n  useEffect(() => {\r\n    const channel = supabase.channel(roomName)\r\n    channelRef.current = channel\r\n\r\n    channel\r\n      .on('broadcast', { event: EVENT_NAME }, (data: { payload: CursorEventPayload }) => {\r\n        const { user } = data.payload\r\n        // Don't render your own cursor\r\n        if (user.id === userId) return\r\n\r\n        setCursors((prev) => {\r\n          if (prev[userId]) {\r\n            delete prev[userId]\r\n          }\r\n\r\n          return {\r\n            ...prev,\r\n            [user.id]: data.payload,\r\n          }\r\n        })\r\n      })\r\n      .subscribe()\r\n\r\n    return () => {\r\n      channel.unsubscribe()\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    // Add event listener for mousemove\r\n    window.addEventListener('mousemove', handleMouseMove)\r\n\r\n    // Cleanup on unmount\r\n    return () => {\r\n      window.removeEventListener('mousemove', handleMouseMove)\r\n    }\r\n  }, [handleMouseMove])\r\n\r\n  return { cursors }\r\n}\r\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/default/clients/nextjs/lib/supabase/client.ts",
      "content": "import { createBrowserClient } from '@supabase/ssr'\r\n\r\nexport function createClient() {\r\n  return createBrowserClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_PUBLISHABLE_OR_ANON_KEY!\r\n  )\r\n}\r\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/default/clients/nextjs/lib/supabase/middleware.ts",
      "content": "import { createServerClient } from '@supabase/ssr'\r\nimport { NextResponse, type NextRequest } from 'next/server'\r\n\r\nexport async function updateSession(request: NextRequest) {\r\n  let supabaseResponse = NextResponse.next({\r\n    request,\r\n  })\r\n\r\n  // With Fluid compute, don't put this client in a global environment\r\n  // variable. Always create a new one on each request.\r\n  const supabase = createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_PUBLISHABLE_OR_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        getAll() {\r\n          return request.cookies.getAll()\r\n        },\r\n        setAll(cookiesToSet) {\r\n          cookiesToSet.forEach(({ name, value }) => request.cookies.set(name, value))\r\n          supabaseResponse = NextResponse.next({\r\n            request,\r\n          })\r\n          cookiesToSet.forEach(({ name, value, options }) =>\r\n            supabaseResponse.cookies.set(name, value, options)\r\n          )\r\n        },\r\n      },\r\n    }\r\n  )\r\n\r\n  // Do not run code between createServerClient and\r\n  // supabase.auth.getClaims(). A simple mistake could make it very hard to debug\r\n  // issues with users being randomly logged out.\r\n\r\n  // IMPORTANT: If you remove getClaims() and you use server-side rendering\r\n  // with the Supabase client, your users may be randomly logged out.\r\n  const { data } = await supabase.auth.getClaims()\r\n  const user = data?.claims\r\n\r\n  if (\r\n    !user &&\r\n    !request.nextUrl.pathname.startsWith('/login') &&\r\n    !request.nextUrl.pathname.startsWith('/auth')\r\n  ) {\r\n    // no user, potentially respond by redirecting the user to the login page\r\n    const url = request.nextUrl.clone()\r\n    url.pathname = '/auth/login'\r\n    return NextResponse.redirect(url)\r\n  }\r\n\r\n  // IMPORTANT: You *must* return the supabaseResponse object as it is.\r\n  // If you're creating a new response object with NextResponse.next() make sure to:\r\n  // 1. Pass the request in it, like so:\r\n  //    const myNewResponse = NextResponse.next({ request })\r\n  // 2. Copy over the cookies, like so:\r\n  //    myNewResponse.cookies.setAll(supabaseResponse.cookies.getAll())\r\n  // 3. Change the myNewResponse object to fit your needs, but avoid changing\r\n  //    the cookies!\r\n  // 4. Finally:\r\n  //    return myNewResponse\r\n  // If this is not done, you may be causing the browser and server to go out\r\n  // of sync and terminate the user's session prematurely!\r\n\r\n  return supabaseResponse\r\n}\r\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/default/clients/nextjs/lib/supabase/server.ts",
      "content": "import { createServerClient } from '@supabase/ssr'\r\nimport { cookies } from 'next/headers'\r\n\r\n/**\r\n * If using Fluid compute: Don't put this client in a global variable. Always create a new client within each\r\n * function when using it.\r\n */\r\nexport async function createClient() {\r\n  const cookieStore = await cookies()\r\n\r\n  return createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_PUBLISHABLE_OR_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        getAll() {\r\n          return cookieStore.getAll()\r\n        },\r\n        setAll(cookiesToSet) {\r\n          try {\r\n            cookiesToSet.forEach(({ name, value, options }) =>\r\n              cookieStore.set(name, value, options)\r\n            )\r\n          } catch {\r\n            // The `setAll` method was called from a Server Component.\r\n            // This can be ignored if you have middleware refreshing\r\n            // user sessions.\r\n          }\r\n        },\r\n      },\r\n    }\r\n  )\r\n}\r\n",
      "type": "registry:lib"
    }
  ],
  "envVars": {
    "NEXT_PUBLIC_SUPABASE_URL": "",
    "NEXT_PUBLIC_SUPABASE_PUBLISHABLE_OR_ANON_KEY": ""
  },
  "docs": "You'll need to set the following environment variables in your project: `NEXT_PUBLIC_SUPABASE_URL` and `NEXT_PUBLIC_SUPABASE_PUBLISHABLE_OR_ANON_KEY`."
}