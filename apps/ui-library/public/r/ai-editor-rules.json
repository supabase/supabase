{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ai-editor-rules",
  "type": "registry:file",
  "title": "Prompt rules for AI Editors",
  "description": "Prompts for working with Supabase using AI-powered IDE tools",
  "dependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/default/ai-editor-rules/create-db-functions.mdc",
      "content": "---\r\n# Specify the following for Cursor rules\r\ndescription: Guidelines for writing Supabase database functions\r\nalwaysApply: false\r\n---\r\n\r\n# Database: Create functions\r\n\r\nYou're a Supabase Postgres expert in writing database functions. Generate **high-quality PostgreSQL functions** that adhere to the following best practices:\r\n\r\n## General Guidelines\r\n\r\n1. **Default to `SECURITY INVOKER`:**\r\n\r\n   - Functions should run with the permissions of the user invoking the function, ensuring safer access control.\r\n   - Use `SECURITY DEFINER` only when explicitly required and explain the rationale.\r\n\r\n2. **Set the `search_path` Configuration Parameter:**\r\n\r\n   - Always set `search_path` to an empty string (`set search_path = '';`).\r\n   - This avoids unexpected behavior and security risks caused by resolving object references in untrusted or unintended schemas.\r\n   - Use fully qualified names (e.g., `schema_name.table_name`) for all database objects referenced within the function.\r\n\r\n3. **Adhere to SQL Standards and Validation:**\r\n   - Ensure all queries within the function are valid PostgreSQL SQL queries and compatible with the specified context (ie. Supabase).\r\n\r\n## Best Practices\r\n\r\n1. **Minimize Side Effects:**\r\n\r\n   - Prefer functions that return results over those that modify data unless they serve a specific purpose (e.g., triggers).\r\n\r\n2. **Use Explicit Typing:**\r\n\r\n   - Clearly specify input and output types, avoiding ambiguous or loosely typed parameters.\r\n\r\n3. **Default to Immutable or Stable Functions:**\r\n\r\n   - Where possible, declare functions as `IMMUTABLE` or `STABLE` to allow better optimization by PostgreSQL. Use `VOLATILE` only if the function modifies data or has side effects.\r\n\r\n4. **Triggers (if Applicable):**\r\n   - If the function is used as a trigger, include a valid `CREATE TRIGGER` statement that attaches the function to the desired table and event (e.g., `BEFORE INSERT`).\r\n\r\n## Example Templates\r\n\r\n### Simple Function with `SECURITY INVOKER`\r\n\r\n```sql\r\ncreate or replace function my_schema.hello_world()\r\nreturns text\r\nlanguage plpgsql\r\nsecurity invoker\r\nset search_path = ''\r\nas $$\r\nbegin\r\n  return 'hello world';\r\nend;\r\n$$;\r\n```\r\n\r\n### Function with Parameters and Fully Qualified Object Names\r\n\r\n```sql\r\ncreate or replace function public.calculate_total_price(order_id bigint)\r\nreturns numeric\r\nlanguage plpgsql\r\nsecurity invoker\r\nset search_path = ''\r\nas $$\r\ndeclare\r\n  total numeric;\r\nbegin\r\n  select sum(price * quantity)\r\n  into total\r\n  from public.order_items\r\n  where order_id = calculate_total_price.order_id;\r\n\r\n  return total;\r\nend;\r\n$$;\r\n```\r\n\r\n### Function as a Trigger\r\n\r\n```sql\r\ncreate or replace function my_schema.update_updated_at()\r\nreturns trigger\r\nlanguage plpgsql\r\nsecurity invoker\r\nset search_path = ''\r\nas $$\r\nbegin\r\n  -- Update the \"updated_at\" column on row modification\r\n  new.updated_at := now();\r\n  return new;\r\nend;\r\n$$;\r\n\r\ncreate trigger update_updated_at_trigger\r\nbefore update on my_schema.my_table\r\nfor each row\r\nexecute function my_schema.update_updated_at();\r\n```\r\n\r\n### Function with Error Handling\r\n\r\n```sql\r\ncreate or replace function my_schema.safe_divide(numerator numeric, denominator numeric)\r\nreturns numeric\r\nlanguage plpgsql\r\nsecurity invoker\r\nset search_path = ''\r\nas $$\r\nbegin\r\n  if denominator = 0 then\r\n    raise exception 'Division by zero is not allowed';\r\n  end if;\r\n\r\n  return numerator / denominator;\r\nend;\r\n$$;\r\n```\r\n\r\n### Immutable Function for Better Optimization\r\n\r\n```sql\r\ncreate or replace function my_schema.full_name(first_name text, last_name text)\r\nreturns text\r\nlanguage sql\r\nsecurity invoker\r\nset search_path = ''\r\nimmutable\r\nas $$\r\n  select first_name || ' ' || last_name;\r\n$$;\r\n```\r\n",
      "type": "registry:file",
      "target": "~/.cursor/rules/create-db-functions.mdc"
    },
    {
      "path": "registry/default/ai-editor-rules/create-migration.mdc",
      "content": "---\r\n# Specify the following for Cursor rules\r\ndescription: Guidelines for writing Postgres migrations\r\nalwaysApply: false\r\n---\r\n\r\n# Database: Create migration\r\n\r\nYou are a Postgres Expert who loves creating secure database schemas.\r\n\r\nThis project uses the migrations provided by the Supabase CLI.\r\n\r\n## Creating a migration file\r\n\r\nGiven the context of the user's message, create a database migration file inside the folder `supabase/migrations/`.\r\n\r\nThe file MUST following this naming convention:\r\n\r\nThe file MUST be named in the format `YYYYMMDDHHmmss_short_description.sql` with proper casing for months, minutes, and seconds in UTC time:\r\n\r\n1. `YYYY` - Four digits for the year (e.g., `2024`).\r\n2. `MM` - Two digits for the month (01 to 12).\r\n3. `DD` - Two digits for the day of the month (01 to 31).\r\n4. `HH` - Two digits for the hour in 24-hour format (00 to 23).\r\n5. `mm` - Two digits for the minute (00 to 59).\r\n6. `ss` - Two digits for the second (00 to 59).\r\n7. Add an appropriate description for the migration.\r\n\r\nFor example:\r\n\r\n```\r\n20240906123045_create_profiles.sql\r\n```\r\n\r\n## SQL Guidelines\r\n\r\nWrite Postgres-compatible SQL code for Supabase migration files that:\r\n\r\n- Includes a header comment with metadata about the migration, such as the purpose, affected tables/columns, and any special considerations.\r\n- Includes thorough comments explaining the purpose and expected behavior of each migration step.\r\n- Write all SQL in lowercase.\r\n- Add copious comments for any destructive SQL commands, including truncating, dropping, or column alterations.\r\n- When creating a new table, you MUST enable Row Level Security (RLS) even if the table is intended for public access.\r\n- When creating RLS Policies\r\n  - Ensure the policies cover all relevant access scenarios (e.g. select, insert, update, delete) based on the table's purpose and data sensitivity.\r\n  - If the table is intended for public access the policy can simply return `true`.\r\n  - RLS Policies should be granular: one policy for `select`, one for `insert` etc) and for each supabase role (`anon` and `authenticated`). DO NOT combine Policies even if the functionality is the same for both roles.\r\n  - Include comments explaining the rationale and intended behavior of each security policy\r\n\r\nThe generated SQL code should be production-ready, well-documented, and aligned with Supabase's best practices.\r\n",
      "type": "registry:file",
      "target": "~/.cursor/rules/create-migration.mdc"
    },
    {
      "path": "registry/default/ai-editor-rules/create-rls-policies.mdc",
      "content": "---\r\ndescription: Guidelines for writing Postgres Row Level Security policies\r\nalwaysApply: false\r\n---\r\n\r\n# Database: Create RLS policies\r\n\r\nYou're a Supabase Postgres expert in writing row level security policies. Your purpose is to generate a policy with the constraints given by the user. You should first retrieve schema information to write policies for, usually the 'public' schema.\r\n\r\nThe output should use the following instructions:\r\n\r\n- The generated SQL must be valid SQL.\r\n- You can use only CREATE POLICY or ALTER POLICY queries, no other queries are allowed.\r\n- Always use double apostrophe in SQL strings (eg. 'Night''s watch')\r\n- You can add short explanations to your messages.\r\n- The result should be a valid markdown. The SQL code should be wrapped in ``` (including sql language tag).\r\n- Always use \"auth.uid()\" instead of \"current_user\".\r\n- SELECT policies should always have USING but not WITH CHECK\r\n- INSERT policies should always have WITH CHECK but not USING\r\n- UPDATE policies should always have WITH CHECK and most often have USING\r\n- DELETE policies should always have USING but not WITH CHECK\r\n- Don't use `FOR ALL`. Instead separate into 4 separate policies for select, insert, update, and delete.\r\n- The policy name should be short but detailed text explaining the policy, enclosed in double quotes.\r\n- Always put explanations as separate text. Never use inline SQL comments.\r\n- If the user asks for something that's not related to SQL policies, explain to the user\r\n  that you can only help with policies.\r\n- Discourage `RESTRICTIVE` policies and encourage `PERMISSIVE` policies, and explain why.\r\n\r\nThe output should look like this:\r\n\r\n```sql\r\nCREATE POLICY \"My descriptive policy.\" ON books FOR INSERT to authenticated USING ( (select auth.uid()) = author_id ) WITH ( true );\r\n```\r\n\r\nSince you are running in a Supabase environment, take note of these Supabase-specific additions below.\r\n\r\n## Authenticated and unauthenticated roles\r\n\r\nSupabase maps every request to one of the roles:\r\n\r\n- `anon`: an unauthenticated request (the user is not logged in)\r\n- `authenticated`: an authenticated request (the user is logged in)\r\n\r\nThese are actually [Postgres Roles](mdc:docs/guides/database/postgres/roles). You can use these roles within your Policies using the `TO` clause:\r\n\r\n```sql\r\ncreate policy \"Profiles are viewable by everyone\"\r\non profiles\r\nfor select\r\nto authenticated, anon\r\nusing ( true );\r\n\r\n-- OR\r\n\r\ncreate policy \"Public profiles are viewable only by authenticated users\"\r\non profiles\r\nfor select\r\nto authenticated\r\nusing ( true );\r\n```\r\n\r\nNote that `for ...` must be added after the table but before the roles. `to ...` must be added after `for ...`:\r\n\r\n### Incorrect\r\n\r\n```sql\r\ncreate policy \"Public profiles are viewable only by authenticated users\"\r\non profiles\r\nto authenticated\r\nfor select\r\nusing ( true );\r\n```\r\n\r\n### Correct\r\n\r\n```sql\r\ncreate policy \"Public profiles are viewable only by authenticated users\"\r\non profiles\r\nfor select\r\nto authenticated\r\nusing ( true );\r\n```\r\n\r\n## Multiple operations\r\n\r\nPostgreSQL policies do not support specifying multiple operations in a single FOR clause. You need to create separate policies for each operation.\r\n\r\n### Incorrect\r\n\r\n```sql\r\ncreate policy \"Profiles can be created and deleted by any user\"\r\non profiles\r\nfor insert, delete -- cannot create a policy on multiple operators\r\nto authenticated\r\nwith check ( true )\r\nusing ( true );\r\n```\r\n\r\n### Correct\r\n\r\n```sql\r\ncreate policy \"Profiles can be created by any user\"\r\non profiles\r\nfor insert\r\nto authenticated\r\nwith check ( true );\r\n\r\ncreate policy \"Profiles can be deleted by any user\"\r\non profiles\r\nfor delete\r\nto authenticated\r\nusing ( true );\r\n```\r\n\r\n## Helper functions\r\n\r\nSupabase provides some helper functions that make it easier to write Policies.\r\n\r\n### `auth.uid()`\r\n\r\nReturns the ID of the user making the request.\r\n\r\n### `auth.jwt()`\r\n\r\nReturns the JWT of the user making the request. Anything that you store in the user's `raw_app_meta_data` column or the `raw_user_meta_data` column will be accessible using this function. It's important to know the distinction between these two:\r\n\r\n- `raw_user_meta_data` - can be updated by the authenticated user using the `supabase.auth.update()` function. It is not a good place to store authorization data.\r\n- `raw_app_meta_data` - cannot be updated by the user, so it's a good place to store authorization data.\r\n\r\nThe `auth.jwt()` function is extremely versatile. For example, if you store some team data inside `app_metadata`, you can use it to determine whether a particular user belongs to a team. For example, if this was an array of IDs:\r\n\r\n```sql\r\ncreate policy \"User is in team\"\r\non my_table\r\nto authenticated\r\nusing ( team_id in (select auth.jwt() -> 'app_metadata' -> 'teams'));\r\n```\r\n\r\n### MFA\r\n\r\nThe `auth.jwt()` function can be used to check for [Multi-Factor Authentication](mdc:docs/guides/auth/auth-mfa#enforce-rules-for-mfa-logins). For example, you could restrict a user from updating their profile unless they have at least 2 levels of authentication (Assurance Level 2):\r\n\r\n```sql\r\ncreate policy \"Restrict updates.\"\r\non profiles\r\nas restrictive\r\nfor update\r\nto authenticated using (\r\n  (select auth.jwt()->>'aal') = 'aal2'\r\n);\r\n```\r\n\r\n## RLS performance recommendations\r\n\r\nEvery authorization system has an impact on performance. While row level security is powerful, the performance impact is important to keep in mind. This is especially true for queries that scan every row in a table - like many `select` operations, including those using limit, offset, and ordering.\r\n\r\nBased on a series of [tests](mdc:https:/github.com/GaryAustin1/RLS-Performance), we have a few recommendations for RLS:\r\n\r\n### Add indexes\r\n\r\nMake sure you've added [indexes](mdc:docs/guides/database/postgres/indexes) on any columns used within the Policies which are not already indexed (or primary keys). For a Policy like this:\r\n\r\n```sql\r\ncreate policy \"Users can access their own records\" on test_table\r\nto authenticated\r\nusing ( (select auth.uid()) = user_id );\r\n```\r\n\r\nYou can add an index like:\r\n\r\n```sql\r\ncreate index userid\r\non test_table\r\nusing btree (user_id);\r\n```\r\n\r\n### Call functions with `select`\r\n\r\nYou can use `select` statement to improve policies that use functions. For example, instead of this:\r\n\r\n```sql\r\ncreate policy \"Users can access their own records\" on test_table\r\nto authenticated\r\nusing ( auth.uid() = user_id );\r\n```\r\n\r\nYou can do:\r\n\r\n```sql\r\ncreate policy \"Users can access their own records\" on test_table\r\nto authenticated\r\nusing ( (select auth.uid()) = user_id );\r\n```\r\n\r\nThis method works well for JWT functions like `auth.uid()` and `auth.jwt()` as well as `security definer` Functions. Wrapping the function causes an `initPlan` to be run by the Postgres optimizer, which allows it to \"cache\" the results per-statement, rather than calling the function on each row.\r\n\r\nCaution: You can only use this technique if the results of the query or function do not change based on the row data.\r\n\r\n### Minimize joins\r\n\r\nYou can often rewrite your Policies to avoid joins between the source and the target table. Instead, try to organize your policy to fetch all the relevant data from the target table into an array or set, then you can use an `IN` or `ANY` operation in your filter.\r\n\r\nFor example, this is an example of a slow policy which joins the source `test_table` to the target `team_user`:\r\n\r\n```sql\r\ncreate policy \"Users can access records belonging to their teams\" on test_table\r\nto authenticated\r\nusing (\r\n  (select auth.uid()) in (\r\n    select user_id\r\n    from team_user\r\n    where team_user.team_id = team_id -- joins to the source \"test_table.team_id\"\r\n  )\r\n);\r\n```\r\n\r\nWe can rewrite this to avoid this join, and instead select the filter criteria into a set:\r\n\r\n```sql\r\ncreate policy \"Users can access records belonging to their teams\" on test_table\r\nto authenticated\r\nusing (\r\n  team_id in (\r\n    select team_id\r\n    from team_user\r\n    where user_id = (select auth.uid()) -- no join\r\n  )\r\n);\r\n```\r\n\r\n### Specify roles in your policies\r\n\r\nAlways use the Role of inside your policies, specified by the `TO` operator. For example, instead of this query:\r\n\r\n```sql\r\ncreate policy \"Users can access their own records\" on rls_test\r\nusing ( auth.uid() = user_id );\r\n```\r\n\r\nUse:\r\n\r\n```sql\r\ncreate policy \"Users can access their own records\" on rls_test\r\nto authenticated\r\nusing ( (select auth.uid()) = user_id );\r\n```\r\n\r\nThis prevents the policy `( (select auth.uid()) = user_id )` from running for any `anon` users, since the execution stops at the `to authenticated` step.\r\n",
      "type": "registry:file",
      "target": "~/.cursor/rules/create-rls-policies.mdc"
    },
    {
      "path": "registry/default/ai-editor-rules/postgres-sql-style-guide.mdc",
      "content": "---\r\n# Specify the following for Cursor rules\r\ndescription: Guidelines for writing Postgres SQL\r\nalwaysApply: false\r\n---\r\n\r\n# Postgres SQL Style Guide\r\n\r\n## General\r\n\r\n- Use lowercase for SQL reserved words to maintain consistency and readability.\r\n- Employ consistent, descriptive identifiers for tables, columns, and other database objects.\r\n- Use white space and indentation to enhance the readability of your code.\r\n- Store dates in ISO 8601 format (`yyyy-mm-ddThh:mm:ss.sssss`).\r\n- Include comments for complex logic, using '/_ ... _/' for block comments and '--' for line comments.\r\n\r\n## Naming Conventions\r\n\r\n- Avoid SQL reserved words and ensure names are unique and under 63 characters.\r\n- Use snake_case for tables and columns.\r\n- Prefer plurals for table names\r\n- Prefer singular names for columns.\r\n\r\n## Tables\r\n\r\n- Avoid prefixes like 'tbl\\_' and ensure no table name matches any of its column names.\r\n- Always add an `id` column of type `identity generated always` unless otherwise specified.\r\n- Create all tables in the `public` schema unless otherwise specified.\r\n- Always add the schema to SQL queries for clarity.\r\n- Always add a comment to describe what the table does. The comment can be up to 1024 characters.\r\n\r\n## Columns\r\n\r\n- Use singular names and avoid generic names like 'id'.\r\n- For references to foreign tables, use the singular of the table name with the `_id` suffix. For example `user_id` to reference the `users` table\r\n- Always use lowercase except in cases involving acronyms or when readability would be enhanced by an exception.\r\n\r\n#### Examples:\r\n\r\n```sql\r\ncreate table books (\r\n  id bigint generated always as identity primary key,\r\n  title text not null,\r\n  author_id bigint references authors (id)\r\n);\r\ncomment on table books is 'A list of all the books in the library.';\r\n```\r\n\r\n## Queries\r\n\r\n- When the query is shorter keep it on just a few lines. As it gets larger start adding newlines for readability\r\n- Add spaces for readability.\r\n\r\nSmaller queries:\r\n\r\n```sql\r\nselect *\r\nfrom employees\r\nwhere end_date is null;\r\n\r\nupdate employees\r\nset end_date = '2023-12-31'\r\nwhere employee_id = 1001;\r\n```\r\n\r\nLarger queries:\r\n\r\n```sql\r\nselect\r\n  first_name,\r\n  last_name\r\nfrom employees\r\nwhere start_date between '2021-01-01' and '2021-12-31' and status = 'employed';\r\n```\r\n\r\n### Joins and Subqueries\r\n\r\n- Format joins and subqueries for clarity, aligning them with related SQL clauses.\r\n- Prefer full table names when referencing tables. This helps for readability.\r\n\r\n```sql\r\nselect\r\n  employees.employee_name,\r\n  departments.department_name\r\nfrom\r\n  employees\r\n  join departments on employees.department_id = departments.department_id\r\nwhere employees.start_date > '2022-01-01';\r\n```\r\n\r\n## Aliases\r\n\r\n- Use meaningful aliases that reflect the data or transformation applied, and always include the 'as' keyword for clarity.\r\n\r\n```sql\r\nselect count(*) as total_employees\r\nfrom employees\r\nwhere end_date is null;\r\n```\r\n\r\n## Complex queries and CTEs\r\n\r\n- If a query is extremely complex, prefer a CTE.\r\n- Make sure the CTE is clear and linear. Prefer readability over performance.\r\n- Add comments to each block.\r\n\r\n```sql\r\nwith\r\n  department_employees as (\r\n    -- Get all employees and their departments\r\n    select\r\n      employees.department_id,\r\n      employees.first_name,\r\n      employees.last_name,\r\n      departments.department_name\r\n    from\r\n      employees\r\n      join departments on employees.department_id = departments.department_id\r\n  ),\r\n  employee_counts as (\r\n    -- Count how many employees in each department\r\n    select\r\n      department_name,\r\n      count(*) as num_employees\r\n    from department_employees\r\n    group by department_name\r\n  )\r\nselect\r\n  department_name,\r\n  num_employees\r\nfrom employee_counts\r\norder by department_name;\r\n```\r\n",
      "type": "registry:file",
      "target": "~/.cursor/rules/postgres-sql-style-guide.mdc"
    },
    {
      "path": "registry/default/ai-editor-rules/writing-supabase-edge-functions.mdc",
      "content": "---\r\ndescription: Coding rules for Supabase Edge Functions\r\nalwaysApply: false\r\n---\r\n\r\n# Writing Supabase Edge Functions\r\n\r\nYou're an expert in writing TypeScript and Deno JavaScript runtime. Generate **high-quality Supabase Edge Functions** that adhere to the following best practices:\r\n\r\n## Guidelines\r\n\r\n1. Try to use Web APIs and Deno’s core APIs instead of external dependencies (eg: use fetch instead of Axios, use WebSockets API instead of node-ws)\r\n2. If you are reusing utility methods between Edge Functions, add them to `supabase/functions/_shared` and import using a relative path. Do NOT have cross dependencies between Edge Functions.\r\n3. Do NOT use bare specifiers when importing dependecnies. If you need to use an external dependency, make sure it's prefixed with either `npm:` or `jsr:`. For example, `@supabase/supabase-js` should be written as `npm:@supabase/supabase-js`.\r\n4. For external imports, always define a version. For example, `npm:@express` should be written as `npm:express@4.18.2`.\r\n5. For external dependencies, importing via `npm:` and `jsr:` is preferred. Minimize the use of imports from @`deno.land/x` , `esm.sh` and @`unpkg.com` . If you have a package from one of those CDNs, you can replace the CDN hostname with `npm:` specifier.\r\n6. You can also use Node built-in APIs. You will need to import them using `node:` specifier. For example, to import Node process: `import process from \"node:process\". Use Node APIs when you find gaps in Deno APIs.\r\n7. Do NOT use `import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\"`. Instead use the built-in `Deno.serve`.\r\n8. Following environment variables (ie. secrets) are pre-populated in both local and hosted Supabase environments. Users don't need to manually set them:\r\n   - SUPABASE_URL\r\n   - SUPABASE_PUBLISHABLE_OR_ANON_KEY\r\n   - SUPABASE_SERVICE_ROLE_KEY\r\n   - SUPABASE_DB_URL\r\n9. To set other environment variables (ie. secrets) users can put them in a env file and run the `supabase secrets set --env-file path/to/env-file`\r\n10. A single Edge Function can handle multiple routes. It is recommended to use a library like Express or Hono to handle the routes as it's easier for developer to understand and maintain. Each route must be prefixed with `/function-name` so they are routed correctly.\r\n11. File write operations are ONLY permitted on `/tmp` directory. You can use either Deno or Node File APIs.\r\n12. Use `EdgeRuntime.waitUntil(promise)` static method to run long-running tasks in the background without blocking response to a request. Do NOT assume it is available in the request / execution context.\r\n\r\n## Example Templates\r\n\r\n### Simple Hello World Function\r\n\r\n```tsx\r\ninterface reqPayload {\r\n  name: string\r\n}\r\n\r\nconsole.info('server started')\r\n\r\nDeno.serve(async (req: Request) => {\r\n  const { name }: reqPayload = await req.json()\r\n  const data = {\r\n    message: `Hello ${name} from foo!`,\r\n  }\r\n\r\n  return new Response(JSON.stringify(data), {\r\n    headers: { 'Content-Type': 'application/json', Connection: 'keep-alive' },\r\n  })\r\n})\r\n```\r\n\r\n### Example Function using Node built-in API\r\n\r\n```tsx\r\nimport { randomBytes } from 'node:crypto'\r\nimport { createServer } from 'node:http'\r\nimport process from 'node:process'\r\n\r\nconst generateRandomString = (length) => {\r\n  const buffer = randomBytes(length)\r\n  return buffer.toString('hex')\r\n}\r\n\r\nconst randomString = generateRandomString(10)\r\nconsole.log(randomString)\r\n\r\nconst server = createServer((req, res) => {\r\n  const message = `Hello`\r\n  res.end(message)\r\n})\r\n\r\nserver.listen(9999)\r\n```\r\n\r\n### Using npm packages in Functions\r\n\r\n```tsx\r\nimport express from 'npm:express@4.18.2'\r\n\r\nconst app = express()\r\n\r\napp.get(/(.*)/, (req, res) => {\r\n  res.send('Welcome to Supabase')\r\n})\r\n\r\napp.listen(8000)\r\n```\r\n\r\n### Generate embeddings using built-in @Supabase.ai API\r\n\r\n```tsx\r\nconst model = new Supabase.ai.Session('gte-small')\r\n\r\nDeno.serve(async (req: Request) => {\r\n  const params = new URL(req.url).searchParams\r\n  const input = params.get('text')\r\n  const output = await model.run(input, { mean_pool: true, normalize: true })\r\n  return new Response(JSON.stringify(output), {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      Connection: 'keep-alive',\r\n    },\r\n  })\r\n})\r\n```\r\n",
      "type": "registry:file",
      "target": "~/.cursor/rules/writing-supabase-edge-functions.mdc"
    },
    {
      "path": "registry/default/ai-editor-rules/use-realtime.mdc",
      "content": "---\r\n# Specify the following for Cursor rules\r\ndescription: Coding rules for Supabase Realtime\r\nalwaysApply: false\r\n---\r\n\r\n# Supabase Realtime AI Assistant Guide\r\n\r\nYou are an expert developer assistant specializing in Supabase Realtime implementations. This guide provides structured, actionable patterns for AI-driven development assistance.\r\n\r\n## Implementation Rules\r\n\r\n### Do\r\n- Use `broadcast` for all realtime events (database changes via triggers, messaging, notifications, game state)\r\n- Use `presence` sparingly for user state tracking (online status, user counters)\r\n- Create indexes for all columns used in RLS policies\r\n- Advice to use topic names that corrolate with concepts and tables: `scope:entity` (e.g., `room:123:messages`)\r\n- Use snake_case for event names: `entity_action` (e.g., `message_created`)\r\n- Include unsubscribe/cleanup logic in all implementations\r\n- Set `private: true` for channels using database triggers or RLS policies\r\n- Give preference to use private channels over public channels (better security and control)\r\n- Implement proper error handling and reconnection logic\r\n\r\n### Don't\r\n- Use `postgres_changes` for new applications (single-threaded, doesn't scale well) and help migrate to `broadcast from database` on existing applications if necessary\r\n- Create multiple subscriptions without proper cleanup\r\n- Write complex RLS queries without proper indexing\r\n- Use generic event names like \"update\" or \"change\"\r\n- Subscribe directly in render functions without state management\r\n- Use database functions (`realtime.send`, `realtime.broadcast_changes`) in client code\r\n\r\n## Function Selection Decision Table\r\n\r\n| Use Case | Recommended Function | Why Not postgres_changes |\r\n|----------|---------------------|--------------------------|\r\n| Custom payloads with business logic | `broadcast` | More flexible, better performance |\r\n| Database change notifications | `broadcast` via database triggers | More scalable, customizable payloads |\r\n| High-frequency updates | `broadcast` with minimal payload | Better throughput and control |\r\n| User presence/status tracking | `presence` (sparingly) | Specialized for state synchronization |\r\n| Simple table mirroring | `broadcast` via database triggers | More scalable, customizable payloads |\r\n| Client to client communication | `broadcast` without triggers and using only websockets | More flexible, better performance |\r\n\r\n**Note:** `postgres_changes` should be avoided due to scalability limitations. Use `broadcast` with database triggers (`realtime.broadcast_changes`) for all database change notifications.\r\n\r\n## Scalability Best Practices\r\n\r\n### Dedicated Topics for Better Performance\r\nUsing dedicated, granular topics ensures messages are only sent to relevant listeners, significantly improving scalability:\r\n\r\n**❌ Avoid Broad Topics:**\r\n```javascript\r\n// This broadcasts to ALL users, even those not interested\r\nconst channel = supabase.channel('global:notifications')\r\n```\r\n\r\n**✅ Use Dedicated Topics:**\r\n```javascript\r\n// This only broadcasts to users in a specific room\r\nconst channel = supabase.channel(`room:${roomId}:messages`)\r\n\r\n// This only broadcasts to a specific user\r\nconst channel = supabase.channel(`user:${userId}:notifications`)\r\n\r\n// This only broadcasts to users with specific permissions\r\nconst channel = supabase.channel(`admin:${orgId}:alerts`)\r\n```\r\n\r\n### Benefits of Dedicated Topics:\r\n- **Reduced Network Traffic**: Messages only reach interested clients\r\n- **Better Performance**: Fewer unnecessary message deliveries\r\n- **Improved Security**: Easier to implement targeted RLS policies\r\n- **Scalability**: System can handle more concurrent users efficiently\r\n- **Cost Optimization**: Reduced bandwidth and processing overhead\r\n\r\n### Topic Naming Strategy:\r\n- **One topic per room**: `room:123:messages`, `room:123:presence`\r\n- **One topic per user**: `user:456:notifications`, `user:456:status`\r\n- **One topic per organization**: `org:789:announcements`\r\n- **One topic per feature**: `game:123:moves`, `game:123:chat`\r\n\r\n## Naming Conventions\r\n\r\n### Topics (Channels)\r\n- **Pattern:** `scope:entity` or `scope:entity:id`\r\n- **Examples:** `room:123:messages`, `game:456:moves`, `user:789:notifications`\r\n- **Public channels:** `public:announcements`, `global:status`\r\n\r\n### Events\r\n- **Pattern:** `entity_action` (snake_case)\r\n- **Examples:** `message_created`, `user_joined`, `game_ended`, `status_changed`\r\n- **Avoid:** Generic names like `update`, `change`, `event`\r\n\r\n## Client Setup Patterns\r\n\r\n```javascript\r\n// Basic setup\r\nconst supabase = createClient('URL', 'ANON_KEY')\r\n\r\n// Channel configuration\r\nconst channel = supabase.channel('room:123:messages', {\r\n  config: {\r\n    broadcast: { self: true, ack: true },\r\n    presence: { key: 'user-session-id', enabled: true },\r\n    private: true  // Required for RLS authorization\r\n  }\r\n})\r\n```\r\n\r\n### Configuration Options\r\n\r\n#### Broadcast Configuration\r\n- **`self: true`** - Receive your own broadcast messages\r\n- **`ack: true`** - Get acknowledgment when server receives your message\r\n\r\n#### Presence Configuration\r\n- **`enabled: true`** - Enable presence tracking for this channel. This flag is set automatically by client library if `on('presence')` is set.\r\n- **`key: string`** - Custom key to identify presence state (useful for user sessions)\r\n\r\n#### Security Configuration\r\n- **`private: true`** - Require authentication and RLS policies\r\n- **`private: false`** - Public channel (default, not recommended for production)\r\n\r\n## Frontend Framework Integration\r\n\r\n### React Pattern\r\n```javascript\r\nconst channelRef = useRef(null)\r\n\r\nuseEffect(() => {\r\n  // Check if already subscribed to prevent multiple subscriptions\r\n  if (channelRef.current?.state === 'subscribed') return\r\n  const channel = supabase.channel('room:123:messages', {\r\n    config: { private: true }\r\n  })\r\n  channelRef.current = channel\r\n\r\n  // Set auth before subscribing\r\n  await supabase.realtime.setAuth()\r\n\r\n  channel\r\n    .on('broadcast', { event: 'message_created' }, handleMessage)\r\n    .on('broadcast', { event: 'user_joined' }, handleUserJoined)\r\n    .subscribe()\r\n\r\n  return () => {\r\n    if (channelRef.current) {\r\n      supabase.removeChannel(channelRef.current)\r\n      channelRef.current = null\r\n    }\r\n  }\r\n}, [roomId])\r\n```\r\n\r\n## Database Triggers\r\n\r\n### Using realtime.broadcast_changes (Recommended for database changes)\r\nThis would be an example of catch all trigger function that would broadcast to topics starting with the table name and the id of the row.\r\n```sql\r\nCREATE OR REPLACE FUNCTION notify_table_changes()\r\nRETURNS TRIGGER AS $$\r\nSECURITY DEFINER\r\nLANGUAGE plpgsql\r\nAS $$\r\nBEGIN\r\n  PERFORM realtime.broadcast_changes(\r\n    TG_TABLE_NAME ||':' || COALESCE(NEW.id, OLD.id)::text,\r\n    TG_OP,\r\n    TG_OP,\r\n    TG_TABLE_NAME,\r\n    TG_TABLE_SCHEMA,\r\n    NEW,\r\n    OLD\r\n  );\r\n  RETURN COALESCE(NEW, OLD);\r\nEND;\r\n$$;\r\n```\r\nBut you can also create more specific trigger functions for specific tables and events so adapt to your use case:\r\n\r\n```sql\r\nCREATE OR REPLACE FUNCTION room_messages_broadcast_trigger()\r\nRETURNS TRIGGER AS $$\r\nSECURITY DEFINER\r\nLANGUAGE plpgsql\r\nAS $$\r\nBEGIN\r\n  PERFORM realtime.broadcast_changes(\r\n    'room:' || COALESCE(NEW.room_id, OLD.room_id)::text,\r\n    TG_OP,\r\n    TG_OP,\r\n    TG_TABLE_NAME,\r\n    TG_TABLE_SCHEMA,\r\n    NEW,\r\n    OLD\r\n  );\r\n  RETURN COALESCE(NEW, OLD);\r\nEND;\r\n$$;\r\n```\r\n\r\nBy default, `realtime.broadcast_changes` requires you to use private channels as we did this to prevent security incidents.\r\n\r\n### Using realtime.send (For custom messages)\r\n```sql\r\nCREATE OR REPLACE FUNCTION notify_custom_event()\r\nRETURNS TRIGGER AS $$\r\nSECURITY DEFINER\r\nLANGUAGE plpgsql\r\nAS $$\r\nBEGIN\r\n  PERFORM realtime.send(\r\n    'room:' || NEW.room_id::text,\r\n    'status_changed',\r\n    jsonb_build_object('id', NEW.id, 'status', NEW.status),\r\n    false\r\n  );\r\n  RETURN NEW;\r\nEND;\r\n$$;\r\n```\r\nThis allows us to broadcast to a specific room with any content that is not bound to a table or if you need to send data to public channels. It's also a good way to integrate with other services and extensions.\r\n\r\n### Conditional Broadcasting\r\nIf you need to broadcast only significant changes, you can use the following pattern:\r\n```sql\r\n-- Only broadcast significant changes\r\nIF TG_OP = 'UPDATE' AND OLD.status IS DISTINCT FROM NEW.status THEN\r\n  PERFORM realtime.broadcast_changes(\r\n    'room:' || NEW.room_id::text,\r\n    TG_OP,\r\n    TG_OP,\r\n    TG_TABLE_NAME,\r\n    TG_TABLE_SCHEMA,\r\n    NEW,\r\n    OLD\r\n  );\r\nEND IF;\r\n```\r\nThis is just an example as you can use any logic you want that is SQL compatible.\r\n\r\n## Authorization Setup\r\n\r\n### Basic RLS Setup\r\nTo access a private channel you need to set RLS policies against `realtime.messages` table for SELECT operations.\r\n```sql\r\n-- Simple policy with indexed columns\r\nCREATE POLICY \"room_members_can_read\" ON realtime.messages\r\nFOR SELECT TO authenticated\r\nUSING (\r\n  topic LIKE 'room:%' AND\r\n  EXISTS (\r\n    SELECT 1 FROM room_members\r\n    WHERE user_id = auth.uid()\r\n    AND room_id = SPLIT_PART(topic, ':', 2)::uuid\r\n  )\r\n);\r\n\r\n-- Required index for performance\r\nCREATE INDEX idx_room_members_user_room\r\nON room_members(user_id, room_id);\r\n```\r\n\r\nTo write to a private channel you need to set RLS policies against `realtime.messages` table for INSERT operations.\r\n\r\n```sql\r\n-- Simple policy with indexed columns\r\nCREATE POLICY \"room_members_can_write\" ON realtime.messages\r\nFOR INSERT TO authenticated\r\nUSING (\r\n  topic LIKE 'room:%' AND\r\n  EXISTS (\r\n    SELECT 1 FROM room_members\r\n    WHERE user_id = auth.uid()\r\n    AND room_id = SPLIT_PART(topic, ':', 2)::uuid\r\n  )\r\n);\r\n```\r\n\r\n### Client Authorization\r\n```javascript\r\nconst channel = supabase.channel('room:123:messages', {\r\n  config: { private: true }\r\n})\r\n  .on('broadcast', { event: 'message_created' }, handleMessage)\r\n  .on('broadcast', { event: 'user_joined' }, handleUserJoined)\r\n\r\n// Set auth before subscribing\r\nawait supabase.realtime.setAuth()\r\n\r\n// Subscribe after auth is set\r\nawait channel.subscribe()\r\n```\r\n\r\n### Enhanced Security: Private-Only Channels\r\n**Enable private-only channels** in Realtime Settings (Dashboard > Project Settings > Realtime Settings) to enforce authorization on all channels and prevent public channel access. This setting requires all clients to use `private: true` and proper authentication, providing additional security for production applications.\r\n\r\n## Error Handling & Reconnection\r\n\r\n### Automatic Reconnection (Built-in)\r\n**Supabase Realtime client handles reconnection automatically:**\r\n- Built-in exponential backoff for connection retries\r\n- Automatic channel rejoining after network interruptions\r\n- Configurable reconnection timing via `reconnectAfterMs` option\r\n\r\n### Channel States\r\nThe client automatically manages these states:\r\n- **`SUBSCRIBED`** - Successfully connected and receiving messages\r\n- **`TIMED_OUT`** - Connection attempt timed out\r\n- **`CLOSED`** - Channel is closed\r\n- **`CHANNEL_ERROR`** - Error occurred, client will automatically retry\r\n\r\n```javascript\r\n// Client automatically reconnects with built-in logic\r\nconst supabase = createClient('URL', 'ANON_KEY', {\r\n  realtime: {\r\n    params: {\r\n      log_level: 'info',\r\n      reconnectAfterMs: 1000 // Custom reconnection timing\r\n    }\r\n  }\r\n})\r\n\r\n// Simple connection state monitoring\r\nchannel.subscribe((status, err) => {\r\n  switch (status) {\r\n    case 'SUBSCRIBED':\r\n      console.log('Connected (or reconnected)')\r\n      break\r\n    case 'CHANNEL_ERROR':\r\n      console.error('Channel error:', err)\r\n      // Client will automatically retry - no manual intervention needed\r\n      break\r\n    case 'CLOSED':\r\n      console.log('Channel closed')\r\n      break\r\n  }\r\n})\r\n```\r\n\r\n## Performance & Scaling Guidelines\r\n\r\n### Channel Structure Optimization\r\n- Use one channel per logical scope (`room:123`, not `user:456:room:123`)\r\n- Shard high-volume topics: `chat:shard:1`, `chat:shard:2`\r\n- Ensure you have enough connections set in your pool, you can refer to [Realtime Settings](https://supabase.com/docs/guides/realtime/settings) and the option `Database connection pool size` to set it.\r\n\r\n## Debugging\r\n\r\n### Enhanced Logging\r\n```javascript\r\nconst supabase = createClient(url, key, {\r\n  realtime: {\r\n    params: { log_level: 'info' }\r\n  }\r\n})\r\n```\r\n\r\n## Migration from Postgres Changes\r\n\r\n### Step 1: Replace Client Code\r\n```javascript\r\n// ❌ Remove postgres_changes\r\nconst oldChannel = supabase.channel('changes').on('postgres_changes', { event: '*', schema: 'public', table: 'messages' }, callback)\r\n\r\n// ✅ Replace with broadcast\r\nconst room_id = \"room_id\" // or any other identifier that you use in the trigger function\r\nconst newChannel = supabase.channel(`messages:${room_id}:changes`, {\r\n  config: { private: true }\r\n})\r\n.on('broadcast', { event: 'INSERT' }, callback)\r\n.on('broadcast', { event: 'DELETE' }, callback)\r\n.on('broadcast', { event: 'UPDATE' }, callback)\r\n```\r\n\r\n### Step 2: Add Database Trigger (Only if using broadcast)\r\n```sql\r\nCREATE TRIGGER messages_broadcast_trigger\r\n  AFTER INSERT OR UPDATE OR DELETE ON messages\r\n  FOR EACH ROW EXECUTE FUNCTION notify_table_changes();\r\n```\r\n\r\n### Step 3: Setup Authorization (Only if using broadcast)\r\n```sql\r\nCREATE POLICY \"users_can_receive_broadcasts\" ON realtime.messages\r\n  FOR SELECT TO authenticated USING (true);\r\n```\r\n\r\n## LLM Implementation Guidelines\r\n\r\n### When Generating Code\r\n1. **Prefer using `broadcast` over `postgres_changes`** - Never suggest `postgres_changes`\r\n2.**Include state checking** - Check channel state before subscribing\r\n3. **Add cleanup logic** - Include unsubscribe in all examples\r\n4. **Suggest proper naming** - Use consistent topic/event conventions\r\n5. **Include error handling** - Add reconnection patterns\r\n6. **Recommend indexing** - When RLS policies are used\r\n7. **Framework-agnostic** - Adapt patterns to user's framework\r\n8. **Inform users to prefer the usage of private channels only** - users can refer to [Realtime Settings](https://supabase.com/docs/guides/realtime/settings) to enable it.\r\n\r\n### Code Generation Checklist\r\n- ✅ Favor `broadcast` over `postgres_changes`\r\n- ✅ Checks `channel.state` before subscribing\r\n- ✅ Includes proper cleanup/unsubscribe logic\r\n- ✅ Uses consistent naming conventions\r\n- ✅ Includes error handling and reconnection\r\n- ✅ Suggests indexes for RLS policies\r\n- ✅ Sets `private: true` for database triggers\r\n- ✅ Implements token refresh if needed\r\n\r\n### Safe Defaults for AI Assistants\r\n- Channel pattern: `scope:entity:id`\r\n- Event pattern: `entity_action`\r\n- Always check channel state before subscribing\r\n- Always include cleanup\r\n- Default to `private: true` for database-triggered channels\r\n- Suggest basic RLS policies with proper indexing\r\n- Include reconnection logic for production apps\r\n- Use `postgres_changes` for simple database change notifications\r\n- Use `broadcast` for custom events and complex payloads\r\n\r\n**Remember:** Choose the right function for your use case, emphasize proper state management, and ensure production-ready patterns with authorization and error handling.",
      "type": "registry:file",
      "target": "~/.cursor/rules/use-realtime.mdc"
    }
  ]
}