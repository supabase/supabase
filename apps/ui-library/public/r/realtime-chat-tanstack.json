{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "realtime-chat-tanstack",
  "type": "registry:component",
  "title": "Realtime Chat",
  "description": "Component which renders realtime chat messages from other users in a room.",
  "dependencies": [
    "@supabase/ssr@latest",
    "@supabase/supabase-js@latest"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/default/blocks/realtime-chat/components/chat-message.tsx",
      "content": "import type { ChatMessage } from './realtime-chat'\n\ninterface ChatMessageItemProps {\n  message: ChatMessage\n  isOwnMessage: boolean\n}\n\nexport const ChatMessageItem = ({ message, isOwnMessage }: ChatMessageItemProps) => {\n  return (\n    <div className={`flex ${isOwnMessage ? 'justify-end' : 'justify-start'}`}>\n      <div\n        className={`max-w-[70%] rounded-lg p-3 ${\n          isOwnMessage ? 'bg-blue-500 text-white' : 'bg-gray-100'\n        }`}\n      >\n        <div className=\"text-sm font-semibold mb-1\">{message.user.name}</div>\n        <div>{message.content}</div>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/blocks/realtime-chat/components/realtime-chat.tsx",
      "content": "'use client'\n\nimport { useRealtimeChat } from '@/registry/default/blocks/realtime-chat/hooks/use-realtime-chat'\nimport { ChatMessageItem } from './chat-message'\n\nexport interface ChatMessage {\n  id: string\n  content: string\n  user: {\n    name: string\n    avatar?: string\n  }\n  createdAt: string\n}\n\ninterface RealtimeChatProps {\n  roomName: string\n  username: string\n  avatar?: string\n}\n\nexport const RealtimeChat = ({ roomName, username, avatar }: RealtimeChatProps) => {\n  const { messages, sendMessage } = useRealtimeChat({ roomName, username })\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n        {messages.map((message) => (\n          <ChatMessageItem\n            key={message.id}\n            message={message}\n            isOwnMessage={message.user.name === username}\n          />\n        ))}\n      </div>\n      <div className=\"border-t p-4\">\n        <form\n          onSubmit={(e) => {\n            e.preventDefault()\n            const form = e.currentTarget\n            const input = form.elements.namedItem('message') as HTMLInputElement\n            if (input.value.trim()) {\n              sendMessage(input.value)\n              input.value = ''\n            }\n          }}\n        >\n          <input\n            type=\"text\"\n            name=\"message\"\n            className=\"w-full px-4 py-2 border rounded-lg\"\n            placeholder=\"Type a message...\"\n          />\n        </form>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/blocks/realtime-chat/hooks/use-realtime-chat.tsx",
      "content": "'use client'\n\nimport { useEffect, useState } from 'react'\nimport { createClient } from '@/registry/default/clients/nextjs/lib/supabase/client'\nimport { ChatMessage } from '../components/realtime-chat'\n\ninterface UseRealtimeChatProps {\n  roomName: string\n  username: string\n}\n\nexport function useRealtimeChat({ roomName, username }: UseRealtimeChatProps) {\n  const supabase = createClient()\n\n  const [messages, setMessages] = useState<ChatMessage[]>([])\n\n  useEffect(() => {\n    // Fetch existing messages\n    const fetchMessages = async () => {\n      const { data, error } = await supabase\n        .from('messages')\n        .select('*')\n        .eq('room', roomName)\n        .order('created_at', { ascending: true })\n\n      if (data && !error) {\n        setMessages(data)\n      }\n    }\n\n    fetchMessages()\n\n    // Subscribe to new messages\n    const channel = supabase\n      .channel(`room:${roomName}`)\n      .on(\n        'postgres_changes',\n        {\n          event: 'INSERT',\n          schema: 'public',\n          table: 'messages',\n          filter: `room=eq.${roomName}`,\n        },\n        (payload) => {\n          setMessages((current) => [...current, payload.new as ChatMessage])\n        }\n      )\n      .subscribe()\n\n    return () => {\n      supabase.removeChannel(channel)\n    }\n  }, [roomName, supabase])\n\n  const sendMessage = async (content: string) => {\n    const { error } = await supabase.from('messages').insert({\n      room: roomName,\n      content,\n      user: {\n        name: username,\n      },\n    })\n\n    if (error) {\n      console.error('Error sending message:', error)\n    }\n  }\n\n  return { messages, sendMessage }\n}\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/default/clients/tanstack/lib/supabase/client.ts",
      "content": "/// <reference types=\"vite/types/importMeta.d.ts\" />\nimport { createBrowserClient } from '@supabase/ssr'\n\nexport function createClient() {\n  return createBrowserClient(\n    import.meta.env.VITE_SUPABASE_URL!,\n    import.meta.env.VITE_SUPABASE_ANON_KEY!\n  )\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/default/clients/tanstack/lib/supabase/server.ts",
      "content": "import { createServerClient } from '@supabase/ssr'\nimport { parseCookies, setCookie } from '@tanstack/react-start/server'\n\nexport function createClient() {\n  return createServerClient(process.env.VITE_SUPABASE_URL!, process.env.VITE_SUPABASE_ANON_KEY!, {\n    cookies: {\n      getAll() {\n        return Object.entries(parseCookies()).map(\n          ([name, value]) =>\n            ({\n              name,\n              value,\n            }) as { name: string; value: string }\n        )\n      },\n      setAll(cookies) {\n        cookies.forEach((cookie) => {\n          setCookie(cookie.name, cookie.value)\n        })\n      },\n    },\n  })\n}\n",
      "type": "registry:lib"
    }
  ]
}