{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "social-auth-react-router",
  "type": "registry:block",
  "title": "Social Auth flow for React Router and Supabase",
  "description": "Social Auth flow for React Router and Supabase",
  "dependencies": [
    "@supabase/ssr@latest",
    "@react-router/dev@latest",
    "@react-router/fs-routes@latest",
    "@supabase/supabase-js@latest"
  ],
  "registryDependencies": [
    "button",
    "card"
  ],
  "files": [
    {
      "path": "registry/default/blocks/social-auth-react-router/app/routes/auth.error.tsx",
      "content": "import { Card, CardContent, CardHeader, CardTitle } from '@/registry/default/components/ui/card'\r\nimport { useSearchParams } from 'react-router'\r\n\r\nexport default function Page() {\r\n  let [searchParams] = useSearchParams()\r\n\r\n  return (\r\n    <div className=\"flex min-h-svh w-full items-center justify-center p-6 md:p-10\">\r\n      <div className=\"w-full max-w-sm\">\r\n        <div className=\"flex flex-col gap-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"text-2xl\">Sorry, something went wrong.</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {searchParams?.get('error') ? (\r\n                <p className=\"text-sm text-muted-foreground\">\r\n                  Code error: {searchParams?.get('error')}\r\n                </p>\r\n              ) : (\r\n                <p className=\"text-sm text-muted-foreground\">An unspecified error occurred.</p>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:file",
      "target": "app/routes/auth.error.tsx"
    },
    {
      "path": "registry/default/blocks/social-auth-react-router/app/routes/auth.oauth.tsx",
      "content": "import { createClient } from '@/registry/default/clients/react-router/lib/supabase/server'\r\nimport { type LoaderFunctionArgs, redirect } from 'react-router'\r\n\r\nexport async function loader({ request }: LoaderFunctionArgs) {\r\n  const requestUrl = new URL(request.url)\r\n  const code = requestUrl.searchParams.get('code')\r\n  const _next = requestUrl.searchParams.get('next')\r\n  const next = _next?.startsWith('/') ? _next : '/'\r\n  if (code) {\r\n    const { supabase, headers } = createClient(request)\r\n\r\n    const { error } = await supabase.auth.exchangeCodeForSession(code)\r\n    if (!error) {\r\n      return redirect(next, { headers })\r\n    } else {\r\n      return redirect(`/auth/error?error=${error?.message}`)\r\n    }\r\n  }\r\n  // redirect the user to an error page with some instructions\r\n  return redirect(`/auth/error`)\r\n}\r\n",
      "type": "registry:file",
      "target": "app/routes/auth.oauth.tsx"
    },
    {
      "path": "registry/default/blocks/social-auth-react-router/app/routes/login.tsx",
      "content": "import { createClient } from '@/registry/default/clients/react-router/lib/supabase/server'\r\nimport { Button } from '@/registry/default/components/ui/button'\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from '@/registry/default/components/ui/card'\r\nimport { type ActionFunctionArgs, redirect, useFetcher } from 'react-router'\r\n\r\nexport const action = async ({ request }: ActionFunctionArgs) => {\r\n  const { supabase } = createClient(request)\r\n  const origin = new URL(request.url).origin\r\n\r\n  const { data, error } = await supabase.auth.signInWithOAuth({\r\n    provider: 'github',\r\n    options: {\r\n      redirectTo: `${origin}/auth/oauth?next=/protected`,\r\n    },\r\n  })\r\n\r\n  if (data.url) {\r\n    return redirect(data.url)\r\n  }\r\n\r\n  if (error) {\r\n    return {\r\n      error: error instanceof Error ? error.message : 'An error occurred',\r\n    }\r\n  }\r\n}\r\n\r\nexport default function Login() {\r\n  const fetcher = useFetcher<typeof action>()\r\n\r\n  const error = fetcher.data?.error\r\n  const loading = fetcher.state === 'submitting'\r\n\r\n  return (\r\n    <div className=\"flex min-h-svh w-full items-center justify-center p-6 md:p-10\">\r\n      <div className=\"w-full max-w-sm\">\r\n        <div className=\"flex flex-col gap-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"text-2xl\">Welcome!</CardTitle>\r\n              <CardDescription>Sign in to your account to continue</CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <fetcher.Form method=\"post\">\r\n                <div className=\"flex flex-col gap-6\">\r\n                  {error && <p className=\"text-sm text-destructive-500\">{error}</p>}\r\n                  <Button type=\"submit\" className=\"w-full\" disabled={loading}>\r\n                    {loading ? 'Logging in...' : 'Continue with GitHub'}\r\n                  </Button>\r\n                </div>\r\n              </fetcher.Form>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:file",
      "target": "app/routes/login.tsx"
    },
    {
      "path": "registry/default/blocks/social-auth-react-router/app/routes/logout.tsx",
      "content": "import { createClient } from '@/registry/default/clients/react-router/lib/supabase/server'\r\nimport { type ActionFunctionArgs, redirect } from 'react-router'\r\n\r\nexport async function loader({ request }: ActionFunctionArgs) {\r\n  const { supabase, headers } = createClient(request)\r\n\r\n  const { error } = await supabase.auth.signOut()\r\n\r\n  if (error) {\r\n    console.error(error)\r\n    return { success: false, error: error.message }\r\n  }\r\n\r\n  // Redirect to dashboard or home page after successful sign-in\r\n  return redirect('/', { headers })\r\n}\r\n",
      "type": "registry:file",
      "target": "app/routes/logout.tsx"
    },
    {
      "path": "registry/default/blocks/social-auth-react-router/app/routes/protected.tsx",
      "content": "import { createClient } from '@/registry/default/clients/react-router/lib/supabase/server'\r\nimport { Button } from '@/registry/default/components/ui/button'\r\nimport { type LoaderFunctionArgs, redirect, useLoaderData } from 'react-router'\r\n\r\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\r\n  const { supabase } = createClient(request)\r\n\r\n  const { data, error } = await supabase.auth.getUser()\r\n  if (error || !data?.user) {\r\n    return redirect('/login')\r\n  }\r\n\r\n  return data\r\n}\r\n\r\nexport default function ProtectedPage() {\r\n  let data = useLoaderData<typeof loader>()\r\n\r\n  return (\r\n    <div className=\"flex items-center justify-center h-screen gap-2\">\r\n      <p>\r\n        Hello <span className=\"text-primary font-semibold\">{data.user.email}</span>\r\n      </p>\r\n      <a href=\"/logout\">\r\n        <Button>Logout</Button>\r\n      </a>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:file",
      "target": "app/routes/protected.tsx"
    },
    {
      "path": "registry/default/blocks/social-auth-react-router/app/routes.ts",
      "content": "import { type RouteConfig } from '@react-router/dev/routes'\r\nimport { flatRoutes } from '@react-router/fs-routes'\r\n\r\nexport default flatRoutes() satisfies RouteConfig\r\n",
      "type": "registry:file",
      "target": "app/routes.ts"
    },
    {
      "path": "registry/default/clients/react-router/lib/supabase/client.ts",
      "content": "/// <reference types=\"vite/types/importMeta.d.ts\" />\r\nimport { createBrowserClient } from '@supabase/ssr'\r\n\r\nexport function createClient() {\r\n  return createBrowserClient(\r\n    import.meta.env.VITE_SUPABASE_URL!,\r\n    import.meta.env.VITE_SUPABASE_PUBLISHABLE_OR_ANON_KEY!\r\n  )\r\n}\r\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/default/clients/react-router/lib/supabase/server.ts",
      "content": "import { createServerClient, parseCookieHeader, serializeCookieHeader } from '@supabase/ssr'\r\n\r\nexport function createClient(request: Request) {\r\n  const headers = new Headers()\r\n\r\n  const supabase = createServerClient(\r\n    process.env.VITE_SUPABASE_URL!,\r\n    process.env.VITE_SUPABASE_PUBLISHABLE_OR_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        getAll() {\r\n          return parseCookieHeader(request.headers.get('Cookie') ?? '') as {\r\n            name: string\r\n            value: string\r\n          }[]\r\n        },\r\n        setAll(cookiesToSet) {\r\n          cookiesToSet.forEach(({ name, value, options }) =>\r\n            headers.append('Set-Cookie', serializeCookieHeader(name, value, options))\r\n          )\r\n        },\r\n      },\r\n    }\r\n  )\r\n\r\n  return { supabase, headers }\r\n}\r\n",
      "type": "registry:lib"
    }
  ],
  "envVars": {
    "VITE_SUPABASE_URL": "",
    "VITE_SUPABASE_PUBLISHABLE_OR_ANON_KEY": ""
  },
  "docs": "You'll need to set the following environment variables in your project: `VITE_SUPABASE_URL` and `VITE_SUPABASE_PUBLISHABLE_OR_ANON_KEY`."
}