{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "password-based-auth-react",
  "type": "registry:block",
  "title": "Password Based Auth flow for React and Supabase",
  "description": "Password Based Auth flow for React and Supabase",
  "dependencies": [
    "@supabase/supabase-js@latest"
  ],
  "registryDependencies": [
    "button",
    "card",
    "input",
    "label"
  ],
  "files": [
    {
      "path": "registry/default/blocks/password-based-auth-react/components/login-form.tsx",
      "content": "import { cn } from '@/lib/utils'\r\nimport { createClient } from '@/registry/default/clients/react/lib/supabase/client'\r\nimport { Button } from '@/registry/default/components/ui/button'\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from '@/registry/default/components/ui/card'\r\nimport { Input } from '@/registry/default/components/ui/input'\r\nimport { Label } from '@/registry/default/components/ui/label'\r\nimport { useState } from 'react'\r\n\r\nexport function LoginForm({ className, ...props }: React.ComponentPropsWithoutRef<'div'>) {\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [error, setError] = useState<string | null>(null)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const supabase = createClient()\r\n\r\n  const handleLogin = async (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    setIsLoading(true)\r\n    setError(null)\r\n\r\n    try {\r\n      const { error } = await supabase.auth.signInWithPassword({\r\n        email,\r\n        password,\r\n      })\r\n      if (error) throw error\r\n      // Update this route to redirect to an authenticated route. The user already has an active session.\r\n      location.href = '/protected'\r\n    } catch (error: unknown) {\r\n      setError(error instanceof Error ? error.message : 'An error occurred')\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={cn('flex flex-col gap-6', className)} {...props}>\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"text-2xl\">Login</CardTitle>\r\n          <CardDescription>Enter your email below to login to your account</CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <form onSubmit={handleLogin}>\r\n            <div className=\"flex flex-col gap-6\">\r\n              <div className=\"grid gap-2\">\r\n                <Label htmlFor=\"email\">Email</Label>\r\n                <Input\r\n                  id=\"email\"\r\n                  type=\"email\"\r\n                  placeholder=\"m@example.com\"\r\n                  required\r\n                  value={email}\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                />\r\n              </div>\r\n              <div className=\"grid gap-2\">\r\n                <div className=\"flex items-center\">\r\n                  <Label htmlFor=\"password\">Password</Label>\r\n                  <a\r\n                    href=\"/forgot-password\"\r\n                    className=\"ml-auto inline-block text-sm underline-offset-4 hover:underline\"\r\n                  >\r\n                    Forgot your password?\r\n                  </a>\r\n                </div>\r\n                <Input\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  required\r\n                  value={password}\r\n                  onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n              </div>\r\n              {error && <p className=\"text-sm text-red-500\">{error}</p>}\r\n              <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\r\n                {isLoading ? 'Logging in...' : 'Login'}\r\n              </Button>\r\n            </div>\r\n            <div className=\"mt-4 text-center text-sm\">\r\n              Don&apos;t have an account?{' '}\r\n              <a href=\"/sign-up\" className=\"underline underline-offset-4\">\r\n                Sign up\r\n              </a>\r\n            </div>\r\n          </form>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/blocks/password-based-auth-react/components/sign-up-form.tsx",
      "content": "import { cn } from '@/lib/utils'\r\nimport { createClient } from '@/registry/default/clients/react/lib/supabase/client'\r\nimport { Button } from '@/registry/default/components/ui/button'\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from '@/registry/default/components/ui/card'\r\nimport { Input } from '@/registry/default/components/ui/input'\r\nimport { Label } from '@/registry/default/components/ui/label'\r\nimport { useState } from 'react'\r\n\r\nexport function SignUpForm({ className, ...props }: React.ComponentPropsWithoutRef<'div'>) {\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [repeatPassword, setRepeatPassword] = useState('')\r\n  const [error, setError] = useState<string | null>(null)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [success, setSuccess] = useState(false)\r\n\r\n  const handleSignUp = async (e: React.FormEvent) => {\r\n    const supabase = createClient()\r\n    e.preventDefault()\r\n    setError(null)\r\n\r\n    if (password !== repeatPassword) {\r\n      setError('Passwords do not match')\r\n      return\r\n    }\r\n    setIsLoading(true)\r\n\r\n    try {\r\n      const { error } = await supabase.auth.signUp({\r\n        email,\r\n        password,\r\n      })\r\n      if (error) throw error\r\n      setSuccess(true)\r\n    } catch (error: unknown) {\r\n      setError(error instanceof Error ? error.message : 'An error occurred')\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={cn('flex flex-col gap-6', className)} {...props}>\r\n      {success ? (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"text-2xl\">Thank you for signing up!</CardTitle>\r\n            <CardDescription>Check your email to confirm</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <p className=\"text-sm text-muted-foreground\">\r\n              You've successfully signed up. Please check your email to confirm your account before\r\n              signing in.\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n      ) : (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"text-2xl\">Sign up</CardTitle>\r\n            <CardDescription>Create a new account</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <form onSubmit={handleSignUp}>\r\n              <div className=\"flex flex-col gap-6\">\r\n                <div className=\"grid gap-2\">\r\n                  <Label htmlFor=\"email\">Email</Label>\r\n                  <Input\r\n                    id=\"email\"\r\n                    type=\"email\"\r\n                    placeholder=\"m@example.com\"\r\n                    required\r\n                    value={email}\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                  />\r\n                </div>\r\n                <div className=\"grid gap-2\">\r\n                  <div className=\"flex items-center\">\r\n                    <Label htmlFor=\"password\">Password</Label>\r\n                  </div>\r\n                  <Input\r\n                    id=\"password\"\r\n                    type=\"password\"\r\n                    required\r\n                    value={password}\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                  />\r\n                </div>\r\n                <div className=\"grid gap-2\">\r\n                  <div className=\"flex items-center\">\r\n                    <Label htmlFor=\"repeat-password\">Repeat Password</Label>\r\n                  </div>\r\n                  <Input\r\n                    id=\"repeat-password\"\r\n                    type=\"password\"\r\n                    required\r\n                    value={repeatPassword}\r\n                    onChange={(e) => setRepeatPassword(e.target.value)}\r\n                  />\r\n                </div>\r\n                {error && <p className=\"text-sm text-red-500\">{error}</p>}\r\n                <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\r\n                  {isLoading ? 'Creating an account...' : 'Sign up'}\r\n                </Button>\r\n              </div>\r\n              <div className=\"mt-4 text-center text-sm\">\r\n                Already have an account?{' '}\r\n                <a href=\"/login\" className=\"underline underline-offset-4\">\r\n                  Login\r\n                </a>\r\n              </div>\r\n            </form>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/blocks/password-based-auth-react/components/forgot-password-form.tsx",
      "content": "import { cn } from '@/lib/utils'\r\nimport { createClient } from '@/registry/default/clients/react/lib/supabase/client'\r\nimport { Button } from '@/registry/default/components/ui/button'\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from '@/registry/default/components/ui/card'\r\nimport { Input } from '@/registry/default/components/ui/input'\r\nimport { Label } from '@/registry/default/components/ui/label'\r\nimport { useState } from 'react'\r\n\r\nexport function ForgotPasswordForm({ className, ...props }: React.ComponentPropsWithoutRef<'div'>) {\r\n  const [email, setEmail] = useState('')\r\n  const [error, setError] = useState<string | null>(null)\r\n  const [success, setSuccess] = useState(false)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  const handleForgotPassword = async (e: React.FormEvent) => {\r\n    const supabase = createClient()\r\n    e.preventDefault()\r\n    setIsLoading(true)\r\n    setError(null)\r\n\r\n    try {\r\n      // The url which will be included in the email. This URL needs to be configured in your redirect URLs in the Supabase dashboard at https://supabase.com/dashboard/project/_/auth/url-configuration\r\n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\r\n        redirectTo: 'http://localhost:3000/update-password',\r\n      })\r\n      if (error) throw error\r\n      setSuccess(true)\r\n    } catch (error: unknown) {\r\n      setError(error instanceof Error ? error.message : 'An error occurred')\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={cn('flex flex-col gap-6', className)} {...props}>\r\n      {success ? (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"text-2xl\">Check Your Email</CardTitle>\r\n            <CardDescription>Password reset instructions sent</CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <p className=\"text-sm text-muted-foreground\">\r\n              If you registered using your email and password, you will receive a password reset\r\n              email.\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n      ) : (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"text-2xl\">Reset Your Password</CardTitle>\r\n            <CardDescription>\r\n              Type in your email and we&apos;ll send you a link to reset your password\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <form onSubmit={handleForgotPassword}>\r\n              <div className=\"flex flex-col gap-6\">\r\n                <div className=\"grid gap-2\">\r\n                  <Label htmlFor=\"email\">Email</Label>\r\n                  <Input\r\n                    id=\"email\"\r\n                    type=\"email\"\r\n                    placeholder=\"m@example.com\"\r\n                    required\r\n                    value={email}\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                  />\r\n                </div>\r\n                {error && <p className=\"text-sm text-red-500\">{error}</p>}\r\n                <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\r\n                  {isLoading ? 'Sending...' : 'Send reset email'}\r\n                </Button>\r\n              </div>\r\n              <div className=\"mt-4 text-center text-sm\">\r\n                Already have an account?{' '}\r\n                <a href=\"/login\" className=\"underline underline-offset-4\">\r\n                  Login\r\n                </a>\r\n              </div>\r\n            </form>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/blocks/password-based-auth-react/components/update-password-form.tsx",
      "content": "import { cn } from '@/lib/utils'\r\nimport { createClient } from '@/registry/default/clients/react/lib/supabase/client'\r\nimport { Button } from '@/registry/default/components/ui/button'\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from '@/registry/default/components/ui/card'\r\nimport { Input } from '@/registry/default/components/ui/input'\r\nimport { Label } from '@/registry/default/components/ui/label'\r\nimport { useState } from 'react'\r\n\r\nexport function UpdatePasswordForm({ className, ...props }: React.ComponentPropsWithoutRef<'div'>) {\r\n  const [password, setPassword] = useState('')\r\n  const [error, setError] = useState<string | null>(null)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n\r\n  const handleForgotPassword = async (e: React.FormEvent) => {\r\n    const supabase = createClient()\r\n    e.preventDefault()\r\n    setIsLoading(true)\r\n    setError(null)\r\n\r\n    try {\r\n      const { error } = await supabase.auth.updateUser({ password })\r\n      if (error) throw error\r\n      // Update this route to redirect to an authenticated route. The user already has an active session.\r\n      location.href = '/protected'\r\n    } catch (error: unknown) {\r\n      setError(error instanceof Error ? error.message : 'An error occurred')\r\n    } finally {\r\n      setIsLoading(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={cn('flex flex-col gap-6', className)} {...props}>\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"text-2xl\">Reset Your Password</CardTitle>\r\n          <CardDescription>Please enter your new password below.</CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <form onSubmit={handleForgotPassword}>\r\n            <div className=\"flex flex-col gap-6\">\r\n              <div className=\"grid gap-2\">\r\n                <Label htmlFor=\"password\">New password</Label>\r\n                <Input\r\n                  id=\"password\"\r\n                  type=\"password\"\r\n                  placeholder=\"New password\"\r\n                  required\r\n                  value={password}\r\n                  onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n              </div>\r\n              {error && <p className=\"text-sm text-red-500\">{error}</p>}\r\n              <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\r\n                {isLoading ? 'Saving...' : 'Save new password'}\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/clients/react/lib/supabase/client.ts",
      "content": "import { createClient as createSupabaseClient } from '@supabase/supabase-js'\r\n\r\nexport function createClient() {\r\n  return createSupabaseClient(\r\n    import.meta.env.VITE_SUPABASE_URL!,\r\n    import.meta.env.VITE_SUPABASE_PUBLISHABLE_OR_ANON_KEY!\r\n  )\r\n}\r\n",
      "type": "registry:lib"
    }
  ],
  "envVars": {
    "VITE_SUPABASE_URL": "",
    "VITE_SUPABASE_PUBLISHABLE_OR_ANON_KEY": ""
  },
  "docs": "You'll need to set the following environment variables in your project: `VITE_SUPABASE_URL` and `VITE_SUPABASE_PUBLISHABLE_OR_ANON_KEY`."
}