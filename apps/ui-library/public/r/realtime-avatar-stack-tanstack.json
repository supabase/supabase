{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "realtime-avatar-stack-tanstack",
  "type": "registry:component",
  "title": "Avatar Stack with Realtime Presence",
  "description": "Component which stack of avatars, tracked by realtime presence.",
  "dependencies": [
    "@supabase/ssr@latest",
    "@supabase/supabase-js@latest"
  ],
  "registryDependencies": [
    "avatar",
    "tooltip"
  ],
  "files": [
    {
      "path": "registry/default/blocks/realtime-avatar-stack/components/avatar-stack.tsx",
      "content": "import { cn } from '@/lib/utils'\r\nimport { Avatar, AvatarFallback, AvatarImage } from '@/registry/default/components/ui/avatar'\r\nimport { Tooltip, TooltipContent, TooltipTrigger } from '@/registry/default/components/ui/tooltip'\r\nimport { cva, type VariantProps } from 'class-variance-authority'\r\nimport * as React from 'react'\r\n\r\nconst avatarStackVariants = cva('flex -space-x-4 -space-y-4', {\r\n  variants: {\r\n    orientation: {\r\n      vertical: 'flex-row',\r\n      horizontal: 'flex-col',\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    orientation: 'vertical',\r\n  },\r\n})\r\n\r\nexport interface AvatarStackProps\r\n  extends React.HTMLAttributes<HTMLDivElement>,\r\n    VariantProps<typeof avatarStackVariants> {\r\n  avatars: { name: string; image: string }[]\r\n  maxAvatarsAmount?: number\r\n}\r\n\r\nconst AvatarStack = ({\r\n  className,\r\n  orientation,\r\n  avatars,\r\n  maxAvatarsAmount = 3,\r\n  ...props\r\n}: AvatarStackProps) => {\r\n  const shownAvatars = avatars.slice(0, maxAvatarsAmount)\r\n  const hiddenAvatars = avatars.slice(maxAvatarsAmount)\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        avatarStackVariants({ orientation }),\r\n        className,\r\n        orientation === 'horizontal' ? '-space-x-0' : '-space-y-0'\r\n      )}\r\n      {...props}\r\n    >\r\n      {shownAvatars.map(({ name, image }, index) => (\r\n        <Tooltip key={`${name}-${image}-${index}`}>\r\n          <TooltipTrigger asChild>\r\n            <Avatar className=\"hover:z-10\">\r\n              <AvatarImage src={image} />\r\n              <AvatarFallback>\r\n                {name\r\n                  ?.split(' ')\r\n                  ?.map((word) => word[0])\r\n                  ?.join('')\r\n                  ?.toUpperCase()}\r\n              </AvatarFallback>\r\n            </Avatar>\r\n          </TooltipTrigger>\r\n          <TooltipContent>\r\n            <p>{name}</p>\r\n          </TooltipContent>\r\n        </Tooltip>\r\n      ))}\r\n\r\n      {hiddenAvatars.length ? (\r\n        <Tooltip key=\"hidden-avatars\">\r\n          <TooltipTrigger asChild>\r\n            <Avatar>\r\n              <AvatarFallback>+{avatars.length - shownAvatars.length}</AvatarFallback>\r\n            </Avatar>\r\n          </TooltipTrigger>\r\n          <TooltipContent>\r\n            {hiddenAvatars.map(({ name }, index) => (\r\n              <p key={`${name}-${index}`}>{name}</p>\r\n            ))}\r\n          </TooltipContent>\r\n        </Tooltip>\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { AvatarStack, avatarStackVariants }\r\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/blocks/realtime-avatar-stack/components/realtime-avatar-stack.tsx",
      "content": "'use client'\r\n\r\nimport { AvatarStack } from '@/registry/default/blocks/realtime-avatar-stack/components/avatar-stack'\r\nimport { useRealtimePresenceRoom } from '@/registry/default/blocks/realtime-avatar-stack/hooks/use-realtime-presence-room'\r\nimport { useMemo } from 'react'\r\n\r\nexport const RealtimeAvatarStack = ({ roomName }: { roomName: string }) => {\r\n  const { users: usersMap } = useRealtimePresenceRoom(roomName)\r\n  const avatars = useMemo(() => {\r\n    return Object.values(usersMap).map((user) => ({\r\n      name: user.name,\r\n      image: user.image,\r\n    }))\r\n  }, [usersMap])\r\n\r\n  return <AvatarStack avatars={avatars} />\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/blocks/realtime-avatar-stack/hooks/use-realtime-presence-room.ts",
      "content": "'use client'\r\n\r\nimport { useCurrentUserImage } from '@/registry/default/blocks/current-user-avatar/hooks/use-current-user-image'\r\nimport { useCurrentUserName } from '@/registry/default/blocks/current-user-avatar/hooks/use-current-user-name'\r\nimport { createClient } from '@/registry/default/clients/nextjs/lib/supabase/client'\r\nimport { useEffect, useState } from 'react'\r\n\r\nconst supabase = createClient()\r\n\r\nexport type RealtimeUser = {\r\n  id: string\r\n  name: string\r\n  image: string\r\n}\r\n\r\nexport const useRealtimePresenceRoom = (roomName: string) => {\r\n  const currentUserImage = useCurrentUserImage()\r\n  const currentUserName = useCurrentUserName()\r\n\r\n  const [users, setUsers] = useState<Record<string, RealtimeUser>>({})\r\n\r\n  useEffect(() => {\r\n    const room = supabase.channel(roomName)\r\n\r\n    room\r\n      .on('presence', { event: 'sync' }, () => {\r\n        const newState = room.presenceState<{ image: string; name: string }>()\r\n\r\n        const newUsers = Object.fromEntries(\r\n          Object.entries(newState).map(([key, values]) => [\r\n            key,\r\n            { name: values[0].name, image: values[0].image },\r\n          ])\r\n        ) as Record<string, RealtimeUser>\r\n        setUsers(newUsers)\r\n      })\r\n      .subscribe(async (status) => {\r\n        if (status !== 'SUBSCRIBED') {\r\n          return\r\n        }\r\n\r\n        await room.track({\r\n          name: currentUserName,\r\n          image: currentUserImage,\r\n        })\r\n      })\r\n\r\n    return () => {\r\n      room.unsubscribe()\r\n    }\r\n  }, [roomName, currentUserName, currentUserImage])\r\n\r\n  return { users }\r\n}\r\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/default/blocks/current-user-avatar/hooks/use-current-user-name.ts",
      "content": "import { createClient } from '@/registry/default/clients/nextjs/lib/supabase/client'\r\nimport { useEffect, useState } from 'react'\r\n\r\nexport const useCurrentUserName = () => {\r\n  const [name, setName] = useState<string | null>(null)\r\n\r\n  useEffect(() => {\r\n    const fetchProfileName = async () => {\r\n      const { data, error } = await createClient().auth.getSession()\r\n      if (error) {\r\n        console.error(error)\r\n      }\r\n\r\n      setName(data.session?.user.user_metadata.full_name ?? '?')\r\n    }\r\n\r\n    fetchProfileName()\r\n  }, [])\r\n\r\n  return name || '?'\r\n}\r\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/default/blocks/current-user-avatar/hooks/use-current-user-image.ts",
      "content": "import { createClient } from '@/registry/default/clients/nextjs/lib/supabase/client'\r\nimport { useEffect, useState } from 'react'\r\n\r\nexport const useCurrentUserImage = () => {\r\n  const [image, setImage] = useState<string | null>(null)\r\n\r\n  useEffect(() => {\r\n    const fetchUserImage = async () => {\r\n      const { data, error } = await createClient().auth.getSession()\r\n      if (error) {\r\n        console.error(error)\r\n      }\r\n\r\n      setImage(data.session?.user.user_metadata.avatar_url ?? null)\r\n    }\r\n    fetchUserImage()\r\n  }, [])\r\n\r\n  return image\r\n}\r\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/default/clients/tanstack/lib/supabase/client.ts",
      "content": "/// <reference types=\"vite/types/importMeta.d.ts\" />\r\nimport { createBrowserClient } from '@supabase/ssr'\r\n\r\nexport function createClient() {\r\n  return createBrowserClient(\r\n    import.meta.env.VITE_SUPABASE_URL!,\r\n    import.meta.env.VITE_SUPABASE_PUBLISHABLE_OR_ANON_KEY!\r\n  )\r\n}\r\n",
      "type": "registry:lib"
    },
    {
      "path": "registry/default/clients/tanstack/lib/supabase/server.ts",
      "content": "import { createServerClient } from '@supabase/ssr'\r\nimport { parseCookies, setCookie } from '@tanstack/react-start/server'\r\n\r\nexport function createClient() {\r\n  return createServerClient(\r\n    process.env.VITE_SUPABASE_URL!,\r\n    process.env.VITE_SUPABASE_PUBLISHABLE_OR_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        getAll() {\r\n          return Object.entries(parseCookies()).map(\r\n            ([name, value]) =>\r\n              ({\r\n                name,\r\n                value,\r\n              }) as { name: string; value: string }\r\n          )\r\n        },\r\n        setAll(cookies) {\r\n          cookies.forEach((cookie) => {\r\n            setCookie(cookie.name, cookie.value)\r\n          })\r\n        },\r\n      },\r\n    }\r\n  )\r\n}\r\n",
      "type": "registry:lib"
    }
  ],
  "envVars": {
    "VITE_SUPABASE_URL": "",
    "VITE_SUPABASE_PUBLISHABLE_OR_ANON_KEY": ""
  },
  "docs": "You'll need to set the following environment variables in your project: `VITE_SUPABASE_URL` and `VITE_SUPABASE_PUBLISHABLE_OR_ANON_KEY`."
}