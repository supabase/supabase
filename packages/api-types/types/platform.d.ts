/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/platform/auth/{ref}/config': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets GoTrue config */
    get: operations['GoTrueConfigController_getGoTrueConfig']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Updates GoTrue config */
    patch: operations['GoTrueConfigController_updateGoTrueConfig']
    trace?: never
  }
  '/platform/auth/{ref}/config/hooks': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Updates GoTrue config hooks */
    patch: operations['GoTrueConfigController_updateGoTrueConfigHooks']
    trace?: never
  }
  '/platform/auth/{ref}/invite': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Sends an invite to the given email */
    post: operations['AuthInviteController_sendInvite']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/auth/{ref}/magiclink': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Sends a magic link to the given email */
    post: operations['MagicLinkController_sendMagicLink']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/auth/{ref}/otp': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Sends an OTP to the given phone number */
    post: operations['OtpController_sendOtp']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/auth/{ref}/recover': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Sends a recovery email to the given email */
    post: operations['RecoverController_sendRecover']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/auth/{ref}/templates/{template}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets GoTrue template */
    get: operations['TemplateController_getTemplate']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/auth/{ref}/users': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Creates user */
    post: operations['UsersController_createUser']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/auth/{ref}/users/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** Delete user with given ID */
    delete: operations['UsersController_deleteUserById']
    options?: never
    head?: never
    /** Updates user with given ID */
    patch: operations['UsersController_updateUserById']
    trace?: never
  }
  '/platform/auth/{ref}/users/{id}/factors': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** Delete all factors associated to a user */
    delete: operations['FactorsController_deleteFactors']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/auth/{ref}/validate/spam': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Validate spam based on the given email content */
    post: operations['ValidateController_validateSpam']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/cli/login': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Create CLI login session */
    post: operations['CliLoginController_createCliLoginSession']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/cli/login/{session_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Retrieve CLI login session */
    get: operations['CliLoginController_getCliLoginSession']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/database/{ref}/backups': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project backups */
    get: operations['BackupsController_getBackups']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/database/{ref}/backups/download': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Download project backup */
    post: operations['BackupsController_downloadBackup']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/database/{ref}/backups/downloadable-backups': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets backups that might be downloadable, but potentially not restorable. */
    get: operations['BackupsController_getDownloadableBackups']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/database/{ref}/backups/enable-physical-backups': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Enable usage of physical backups */
    post: operations['BackupsController_enablePhysicalBackup']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/database/{ref}/backups/pitr': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Restore project to a previous point in time */
    post: operations['BackupsController_restorePointInTimeBackup']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/database/{ref}/backups/restore': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Restore project backup */
    post: operations['BackupsController_restoreBackup']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/database/{ref}/backups/restore-physical': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Restore project with a physical backup */
    post: operations['BackupsController_restorePhysicalBackup']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/database/{ref}/clone': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List valid backups to clone from */
    get: operations['CloneController_getValidBackups']
    put?: never
    /** Clone the current project from a backup */
    post: operations['CloneController_cloneCurrentProject']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/database/{ref}/clone/status': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Retrieve the current status of an existing cloning process */
    get: operations['CloneController_cloneProjectStatus']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/database/{ref}/hook-enable': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Enables Database Webhooks on the project */
    post: operations['HooksController_enableHooks']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/database/{ref}/hook-logs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets hook logs with the given ID */
    get: operations['HooksController_getHookLogs']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/feedback/docs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Send feedback on docs */
    post: operations['SendFeedbackController_sendDocsFeedback']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/feedback/downgrade': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Send exit survey to HubSpot */
    post: operations['SendFeedbackController_sendExitSurvey']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/feedback/send': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Send feedback */
    post: operations['SendFeedbackController_sendFeedback']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/feedback/upgrade': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Send upgrade survey to survey_responses table */
    post: operations['SendFeedbackController_sendUpgradeSurvey']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/integrations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets user's integrations */
    get: operations['IntegrationsController_getUserInstallations']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/integrations/{slug}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets integration with the given organization slug */
    get: operations['IntegrationsController_getUserInstallationForOrg']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/integrations/github/authorization': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get GitHub authorization */
    get: operations['GitHubAuthorizationsController_getGitHubAuthorization']
    put?: never
    /** Create GitHub authorization */
    post: operations['GitHubAuthorizationsController_createGitHubAuthorization']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/integrations/github/branches/{connectionId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List GitHub connection branches */
    get: operations['GitHubBranchesController_listConnectionBranches']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/integrations/github/branches/{connectionId}/{branchName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get GitHub connection branch */
    get: operations['GitHubBranchesController_getConnectionBranch']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/integrations/github/connections': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List organization GitHub connections */
    get: operations['GitHubConnectionsController_listOrganizationGitHubConnections']
    put?: never
    /** Connects a GitHub project to a supabase project */
    post: operations['GitHubConnectionsController_createGitHubConnection']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/integrations/github/connections/{connection_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** Deletes github project connection */
    delete: operations['GitHubConnectionsController_deleteGitHubConnection']
    options?: never
    head?: never
    /** Updates a GitHub connection for a supabase project */
    patch: operations['GitHubConnectionsController_updateGitHubConnection']
    trace?: never
  }
  '/platform/integrations/github/repositories': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets GitHub repositories for user */
    get: operations['GitHubRepositoriesController_listRepositories']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/integrations/vercel': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create vercel integration
     * @description Exchanges a vercel code for an access token and saves the access token to the new integration record
     */
    post: operations['VercelIntegrationController_createVercelIntegration']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/integrations/vercel/{organization_integration_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** Removes Vercel organization integration with the given id */
    delete: operations['VercelIntegrationController_removeVercelIntegration']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/integrations/vercel/connections': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Connects a Vercel project to a supabase project */
    post: operations['VercelConnectionsController_createVercelConnection']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/integrations/vercel/connections/{connection_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** Deletes vercel project connection */
    delete: operations['VercelConnectionsController_deleteVercelConnection']
    options?: never
    head?: never
    /** Updates a Vercel connection for a supabase project */
    patch: operations['VercelConnectionsController_updateVercelConnection']
    trace?: never
  }
  '/platform/integrations/vercel/connections/{connection_id}/sync-envs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Syncs supabase project envs with given connection id */
    post: operations['VercelConnectionsController_syncVercelConnectionEnvironments']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/integrations/vercel/connections/{organization_integration_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets installed vercel project connections for the given organization integration */
    get: operations['VercelConnectionsController_getVercelConnections']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/integrations/vercel/projects/{organization_integration_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets vercel projects with the given organization integration id */
    get: operations['VercelProjectController_getVercelProjects']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/notifications': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get notifications */
    get: operations['NotificationsController_getNotificationsV2']
    put?: never
    post?: never
    /** Delete notifications */
    delete: operations['NotificationsController_deleteNotifications']
    options?: never
    head?: never
    /** Update notifications */
    patch: operations['NotificationsController_updateNotificationsV2']
    trace?: never
  }
  '/platform/notifications/archive-all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Archives all notifications */
    patch: operations['NotificationsController_archiveAllNotifications']
    trace?: never
  }
  '/platform/notifications/summary': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get an aggregated data of interest across all notifications for the user */
    get: operations['NotificationsController_getNotificationsSummary']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/oauth/authorizations/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** [Beta] Get oauth app authorization request */
    get: operations['OAuthAuthorizationsController_getAuthorizationRequest']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets user's organizations */
    get: operations['OrganizationsController_getOrganizations']
    put?: never
    /** Creates an organization */
    post: operations['OrganizationsController_createOrganizationWithTier']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets a specific organization that belongs to the authenticated user */
    get: operations['OrganizationSlugController_getOrganization']
    put?: never
    post?: never
    /** Deletes organization */
    delete: operations['OrganizationSlugController_deleteOrganization']
    options?: never
    head?: never
    /** Updates organization */
    patch: operations['OrganizationSlugController_updateOrganization']
    trace?: never
  }
  '/platform/organizations/{slug}/audit': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets an organization's audit logs */
    get: operations['OrgAuditLogsController_getAuditLogs']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/available-versions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Retrieves a list of available Postgres versions available to the organization */
    post: operations['OrganizationSlugController_getAvailableImageVersions']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/billing/credits/top-up': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Tops up the credit balance */
    post: operations['OrgCreditsController_createTopUp']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/billing/invoices': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets invoices for the given organization */
    get: operations['OrgInvoicesController_getInvoices']
    put?: never
    post?: never
    delete?: never
    options?: never
    /** Gets the total count of invoices for the given organization */
    head: operations['OrgInvoicesController_countInvoices']
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/billing/invoices/{invoiceId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets invoice with the given invoice ID */
    get: operations['OrgInvoicesController_getInvoice']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/billing/invoices/{invoiceId}/payment-link': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets the payment link to manually pay the given invoice */
    get: operations['OrgInvoicesController_getInvoicePaymentLink']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/billing/invoices/upcoming': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets the upcoming invoice */
    get: operations['OrgInvoicesController_getUpcomingInvoice']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/billing/plans': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets subscription Plans */
    get: operations['OrgPlansController_getAvailablePlans']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/billing/subscription': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets the current subscription */
    get: operations['SubscriptionController_getSubscription']
    /** Updates subscription */
    put: operations['SubscriptionController_updateSubscription']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/billing/subscription/preview': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Preview subscription changes */
    post: operations['SubscriptionController_previewSubscriptionChange']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/customer': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets the Billing customer */
    get: operations['CustomerController_getCustomer']
    /** Updates the billing customer */
    put: operations['updateCustomerV2']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/daily-stats': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets daily organization stats */
    get: operations['OrgDailyStatsController_getDailyStats']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/daily-stats/compute': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets daily organization stats for compute */
    get: operations['OrgDailyStatsController_getDailyStatsCompute']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/documents/soc2-type-2-report': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get SOC2 Type 2 report URL */
    get: operations['OrgDocumentsController_getSoc2Type2ReportUrl']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/documents/standard-security-questionnaire': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get standard security questionnaire URL */
    get: operations['OrgDocumentsController_getStandardSecurityQuestionnaireUrl']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/members': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets organization's members */
    get: operations['MembersController_getMembers']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/members/{gotrue_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** Removes organization member */
    delete: operations['MembersController_deleteMember']
    options?: never
    head?: never
    /** Assign organization member with new role */
    patch: operations['MembersController_assignMemberRoleV2']
    trace?: never
  }
  '/platform/organizations/{slug}/members/{gotrue_id}/roles/{role_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Update organization member role */
    put: operations['MembersController_UpdateMemberRole']
    post?: never
    /** Removes organization member role */
    delete: operations['MembersController_deleteMemberRole']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/members/invitations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets organization invitations */
    get: operations['InvitationsController_getAllInvitations']
    put?: never
    /** Creates organization invitation */
    post: operations['InvitationsController_createInvitation']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/members/invitations/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** Deletes organization invitation with given id */
    delete: operations['InvitationsController_deleteInvitation']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/members/invitations/{token}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets organization invitation by token */
    get: operations['InvitationsController_getInvitationByToken']
    put?: never
    /** Accepts organization invitation by token */
    post: operations['InvitationsController_acceptInvitationByToken']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/members/reached-free-project-limit': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets organization members who have reached their free project limit */
    get: operations['ReachedFreeProjectLimitController_getMembersWhoReachedFreeProjectLimit']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/oauth/apps': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** List published or authorized oauth apps */
    get: operations['OAuthAppsController_listOAuthApps']
    put?: never
    /** Create an oauth app */
    post: operations['OAuthAppsController_createOAuthApp']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/oauth/apps/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Update an oauth app */
    put: operations['OAuthAppsController_updateOAuthApp']
    post?: never
    /** Remove a published oauth app */
    delete: operations['OAuthAppsController_removeOAuthApp']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/oauth/apps/{id}/revoke': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Revoke an authorized oauth app */
    post: operations['OAuthAppsController_revokeAuthorizedOAuthApp']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/oauth/authorizations/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** [Beta] Approve oauth app authorization request */
    post: operations['OrganizationOAuthAuthorizationsController_approveAuthorizationRequest']
    /** [Beta] Decline oauth app authorization request */
    delete: operations['OrganizationOAuthAuthorizationsController_declineAuthorizationRequest']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/payments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets Stripe payment methods for the given organization */
    get: operations['getPaymentMethodsV2']
    put?: never
    post?: never
    /** Detach payment method with the given card ID */
    delete: operations['PaymentsController_detachPaymentMethod']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/payments/default': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Mark given payment method as default for organization */
    put: operations['PaymentsController_markPaymentMethodAsDefault']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/payments/setup-intent': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Sets up a payment method */
    post: operations['SetupIntentOrgController_setUpPaymentMethod']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/projects': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets all projects for the given organization */
    get: operations['OrganizationProjectsController_getOrganizationProjects']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/roles': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets the given organization's roles */
    get: operations['OrganizationRolesController_getAllRoles']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/tax-ids': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets the given organization's tax ID */
    get: operations['TaxIdsController_getTaxId']
    /** Creates or updates a tax ID for the given organization */
    put: operations['TaxIdsController_updateTaxId']
    post?: never
    /** Delete the tax ID with the given ID */
    delete: operations['TaxIdsController_deleteTaxId']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/transfer': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Transfers the organization to the given member */
    post: operations['TransferController_transferOrganization']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/{slug}/usage': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets usage stats */
    get: operations['OrgUsageController_getOrgUsage']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/organizations/fly/{fly_organization_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets organization linked to fly organization id */
    get: operations['OrganizationsController_getOrganizationByFlyOrganizationId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/pg-meta/{ref}/column-privileges': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Retrieve column privileges */
    get: operations['ColumnPrivilegesController_getColumnPrivileges']
    put?: never
    /** Grant column privileges */
    post: operations['ColumnPrivilegesController_grantColumnPrivileges']
    /** Revoke column privileges */
    delete: operations['ColumnPrivilegesController_revokeColumnPrivileges']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/pg-meta/{ref}/columns': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project pg.columns */
    get: operations['ColumnsController_getColumns']
    put?: never
    /** Creates project pg.column */
    post: operations['ColumnsController_createColumn']
    /** Deletes project pg.column with the given ID */
    delete: operations['ColumnsController_deleteColumn']
    options?: never
    head?: never
    /** Updates project pg.column with the given ID */
    patch: operations['ColumnsController_updateColumn']
    trace?: never
  }
  '/platform/pg-meta/{ref}/extensions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project pg.extensions */
    get: operations['ExtensionsController_getExtensions']
    put?: never
    /** Creates project pg.extension */
    post: operations['ExtensionsController_createExtension']
    /** Deletes project pg.extension with the given ID */
    delete: operations['ExtensionsController_deleteExtension']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/pg-meta/{ref}/foreign-tables': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Retrieve database foreign tables */
    get: operations['ForeignTablesController_getForeignTables']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/pg-meta/{ref}/functions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project pg.functions */
    get: operations['FunctionsController_getFunctions']
    put?: never
    /** Creates project pg.function */
    post: operations['FunctionsController_createFunction']
    /** Deletes project pg.function with the given ID */
    delete: operations['FunctionsController_deleteFunction']
    options?: never
    head?: never
    /** Updates project pg.function with the given ID */
    patch: operations['FunctionsController_updateFunction']
    trace?: never
  }
  '/platform/pg-meta/{ref}/materialized-views': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Retrieve database materialized views */
    get: operations['MaterializedViewsController_getMaterializedViews']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/pg-meta/{ref}/policies': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project pg.policies */
    get: operations['PoliciesController_getPolicies']
    put?: never
    /** Creates project pg.policy */
    post: operations['PoliciesController_createPolicy']
    /** Deletes project pg.policy with the given ID */
    delete: operations['PoliciesController_deletePolicy']
    options?: never
    head?: never
    /** Updates project pg.policy with the given ID */
    patch: operations['PoliciesController_updatePolicy']
    trace?: never
  }
  '/platform/pg-meta/{ref}/publications': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project pg.publications */
    get: operations['PublicationsController_getPublications']
    put?: never
    /** Gets project pg.publications */
    post: operations['PublicationsController_createPublication']
    /** Deletes project pg.publication with the given ID */
    delete: operations['PublicationsController_deletePublication']
    options?: never
    head?: never
    /** Updates project pg.publication with the given ID */
    patch: operations['PublicationsController_updatePublication']
    trace?: never
  }
  '/platform/pg-meta/{ref}/query': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Run sql query */
    post: operations['QueryController_runQuery']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/pg-meta/{ref}/query/format': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Format sql query */
    post: operations['QueryController_formatQuery']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/pg-meta/{ref}/query/validate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Validate sql query */
    post: operations['QueryController_validateQuery']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/pg-meta/{ref}/schemas': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project pg.schemas */
    get: operations['SchemasController_getSchemas']
    put?: never
    /** Creates project pg.schema */
    post: operations['SchemasController_createSchema']
    /** Deletes project pg.schema with the given ID */
    delete: operations['SchemasController_deleteSchema']
    options?: never
    head?: never
    /** Updates project pg.schema with the given ID */
    patch: operations['SchemasController_updateSchema']
    trace?: never
  }
  '/platform/pg-meta/{ref}/tables': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project pg.tables or pg.table with the given ID */
    get: operations['TablesController_getTables']
    put?: never
    /** Creates project pg.table */
    post: operations['TablesController_createTable']
    /** Deletes project pg.table with the given ID */
    delete: operations['TablesController_deleteTable']
    options?: never
    head?: never
    /** Updates project pg.table with the given ID */
    patch: operations['TablesController_updateTable']
    trace?: never
  }
  '/platform/pg-meta/{ref}/triggers': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project pg.triggers */
    get: operations['TriggersController_getTriggers']
    put?: never
    /** Creates project pg.trigger */
    post: operations['TriggersController_createTrigger']
    /** Deletes project pg.trigger with the given ID */
    delete: operations['TriggersController_deleteTrigger']
    options?: never
    head?: never
    /** Updates project pg.trigger with the given ID */
    patch: operations['TriggersController_updateTrigger']
    trace?: never
  }
  '/platform/pg-meta/{ref}/types': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project pg.types */
    get: operations['TypesController_getTypes']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/pg-meta/{ref}/views': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Retrieve database views */
    get: operations['ViewsController_getViews']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/profile': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets the user's profile */
    get: operations['ProfileController_getProfile']
    put?: never
    /** Creates user's profile */
    post: operations['ProfileController_createProfile']
    /** Deletes user's profile */
    delete: operations['ProfileController_deleteProfile']
    options?: never
    head?: never
    /** Updates user's profile */
    patch: operations['ProfileController_updateProfile']
    trace?: never
  }
  '/platform/profile/access-tokens': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets the user's access tokens */
    get: operations['AccessTokensController_getAccessTokens']
    put?: never
    /** Creates a new access token */
    post: operations['AccessTokensController_createAccessToken']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/profile/access-tokens/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets the access token with the given ID */
    get: operations['AccessTokensController_getAccessToken']
    put?: never
    post?: never
    /** Deletes the access token with the given ID */
    delete: operations['AccessTokensController_deleteAccessToken']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/profile/audit': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets a user's audit logs */
    get: operations['UserAuditLogsController_getAuditLogs']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/profile/audit-login': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Logged into account */
    post: operations['ProfileController_auditAccountLogin']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/profile/password-check': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Check password strength */
    post: operations['PasswordCheckController_checkPassword']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/profile/permissions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets all the user's permissions */
    get: operations['PermissionsController_getPermissions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/profile/search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Search profiles by username, email with the given keywords */
    post: operations['SearchProfileController_searchProfile']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets all projects that belong to the authenticated user
     * @description Only returns the minimal project info
     */
    get: operations['ProjectsController_getProjects']
    put?: never
    /** Creates a project */
    post: operations['ProjectsController_createProject']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects-resource-warnings': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets resource warnings for all projects accessible by the user
     * @description Only returns the minimal project info
     */
    get: operations['ProjectsResourceWarningsController_getProjectsResourceWarnings']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets a specific project that belongs to the authenticated user */
    get: operations['ProjectsRefController_getProject']
    put?: never
    post?: never
    /** Deletes the given project */
    delete: operations['ProjectsRefController_deleteProject']
    options?: never
    head?: never
    /** Updates the given project */
    patch: operations['ProjectsRefController_updateProject']
    trace?: never
  }
  '/platform/projects/{ref}/analytics/endpoints/functions.inv-stats': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets a project's function invocation statistics */
    get: operations['FunctionInvocationLogsController_getStatus']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/analytics/endpoints/functions.req-stats': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets a project's function request statistics */
    get: operations['FunctionRequestLogsController_getStatus']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/analytics/endpoints/functions.resource-usage': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets a project's function resource usage */
    get: operations['FunctionResourceLogsController_getStatus']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/analytics/endpoints/logs.all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project's logs */
    get: operations['LogsController_getApiPaths']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/analytics/endpoints/usage.api-counts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project's usage api counts */
    get: operations['UsageApiController_getApiCounts']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/analytics/endpoints/usage.api-requests-count': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project's usage api requests count */
    get: operations['UsageApiController_getApiRequestsCount']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/analytics/log-drains': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Lists all log drains */
    get: operations['LogDrainController_listLogDrains']
    put?: never
    /** Create a log drain */
    post: operations['LogDrainController_createLogDrain']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/analytics/log-drains/{token}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Update a log drain */
    put: operations['LogDrainController_updateLogDrain']
    post?: never
    /** Delete a log drain */
    delete: operations['LogDrainController_deleteLogDrain']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/analytics/warehouse/access-tokens': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Lists project's warehouse access tokens from logflare */
    get: operations['v1-list-all-warehouse-tokens']
    put?: never
    /** Create a warehouse access token */
    post: operations['v1-create-a-warehouse-token']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/analytics/warehouse/access-tokens/{token}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** Delete a warehouse access token */
    delete: operations['v1-delete-a-warehouse-token']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/analytics/warehouse/collections': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Lists project's telemetry collections from logflare */
    get: operations['v1-list-all-telemetry-collections']
    put?: never
    /** Create a telemetry collection */
    post: operations['v1-create-a-telemetry-collection']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/analytics/warehouse/collections/{token}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get a telemetry collection */
    get: operations['v1-get-a-telemetry-collection']
    put?: never
    post?: never
    /** Delete a telemetry collection */
    delete: operations['v1-delete-a-telemetry-collection']
    options?: never
    head?: never
    /** Update a telemetry collection */
    patch: operations['v1-update-a-telemetry-collection']
    trace?: never
  }
  '/platform/projects/{ref}/analytics/warehouse/collections/{token}/schema': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get a telemetry collection schema */
    get: operations['v1-get-a-telemetry-collection-schema']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/analytics/warehouse/endpoints': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Lists project's warehouse endpoints from logflare */
    get: operations['v1-list-all-warehouse-endpoints']
    put?: never
    /** Create a warehouse endpoint */
    post: operations['v1-create-a-warehouse-endpoint']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/analytics/warehouse/endpoints/{token}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Update a warehouse endpoint */
    put: operations['v1-update-a-warehouse-endpoint']
    post?: never
    /** Delete a warehouse endpoint */
    delete: operations['v1-delete-a-warehouse-endpoint']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/analytics/warehouse/query': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Lists project's warehouse queries from logflare */
    get: operations['v1-list-all-warehouse-queries']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/analytics/warehouse/query/parse': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Parses a warehouse query */
    get: operations['v1-parse-warehouse-query']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/analytics/warehouse/tenant': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project's warehouse tenant from logflare */
    get: operations['v1-provision-a-warehouse-tenant']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/api/graphql': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Queries project Graphql */
    post: operations['ProjectsApiController_projectGraphql']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/api/rest': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project OpenApi */
    get: operations['ProjectsApiController_projectOpenApi']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/billing/addons': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project addons */
    get: operations['ProjectAddonController_getProjectAddons']
    put?: never
    /** Updates project addon */
    post: operations['ProjectAddonController_updateAddon']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/billing/addons/{addon_variant}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** Removes project addon */
    delete: operations['ProjectAddonController_removeAddon']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/config/pgbouncer': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project's pgbouncer config */
    get: operations['PgbouncerConfigController_getPgbouncerConfig']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Updates project's pgbouncer config */
    patch: operations['PgbouncerConfigController_updatePgbouncerConfig']
    trace?: never
  }
  '/platform/projects/{ref}/config/pgbouncer/status': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project's pgbouncer status */
    get: operations['PgbouncerConfigController_getPgbouncerStatus']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/config/postgres': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project's Postgres config */
    get: operations['v1-get-postgres-config']
    /** Updates project's Postgres config */
    put: operations['v1-update-postgres-config']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/config/postgrest': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project's postgrest config */
    get: operations['PostgrestConfigController_getPostgRESTConfig']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Updates project's postgrest config */
    patch: operations['PostgrestConfigController_updatePostgRESTConfig']
    trace?: never
  }
  '/platform/projects/{ref}/config/realtime': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets realtime configuration */
    get: operations['RealtimeConfigController_getConfig']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Updates realtime configuration */
    patch: operations['RealtimeConfigController_updateConfig']
    trace?: never
  }
  '/platform/projects/{ref}/config/secrets': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Updates project's secrets config */
    patch: operations['SecretsConfigController_updateConfig']
    trace?: never
  }
  '/platform/projects/{ref}/config/storage': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project's storage config */
    get: operations['StorageConfigController_getConfig']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Updates project's storage config */
    patch: operations['StorageConfigController_updateConfig']
    trace?: never
  }
  '/platform/projects/{ref}/config/supavisor': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project's supavisor config */
    get: operations['v1-get-supavisor-config']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Updates project's supavisor config */
    patch: operations['v1-update-supavisor-config']
    trace?: never
  }
  '/platform/projects/{ref}/content': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project's content */
    get: operations['ContentController_getContent']
    /** Updates project's content */
    put: operations['ContentController_updateWholeContent']
    /** Creates project's content */
    post: operations['ContentController_createContent']
    /** Deletes project's contents */
    delete: operations['ContentController_deleteContents']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/content/count': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets the user's content counts */
    get: operations['ContentController_getContentCountV2']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/content/folders': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project's content root folder */
    get: operations['ContentFoldersController_getRootFolder']
    put?: never
    /** Creates project's content folder */
    post: operations['ContentFoldersController_createFolder']
    /** Deletes project's content folders */
    delete: operations['ContentFoldersController_DeleteFolder']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/content/folders/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project's content folder */
    get: operations['ContentFoldersController_getFolder']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Updates project's content folder */
    patch: operations['ContentFoldersController_updateFolder']
    trace?: never
  }
  '/platform/projects/{ref}/content/item/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project's content by the given id */
    get: operations['ContentController_getContentById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/daily-stats': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets daily project stats */
    get: operations['DailyStatsController_getDailyStats']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/databases': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets non-removed databases of a specified project */
    get: operations['DatabasesController_getDatabases']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/databases-statuses': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets statuses of databases within a project */
    get: operations['DatabasesStatusesController_getStatus']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/db-password': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Updates the database password */
    patch: operations['DbPasswordController_updatePassword']
    trace?: never
  }
  '/platform/projects/{ref}/disk': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get database disk attributes */
    get: operations['DiskController_getDisk']
    put?: never
    /** Modify database disk */
    post: operations['DiskController_modifyDisk']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/disk/custom-config': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets disk autoscale config */
    get: operations['DiskController_getDiskAutoscaleConfig']
    put?: never
    /** Updates disk autoscale config */
    post: operations['DiskController_updateDiskAutoscaleConfig']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/disk/util': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get disk utilization */
    get: operations['DiskController_getDiskUtilization']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/infra-monitoring': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project's usage metrics */
    get: operations['InfraMonitoringController_getUsageMetrics']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/live': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project health check */
    get: operations['HealthCheckController_projectHealthCheck']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/load-balancers': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets non-removed databases of a specified project */
    get: operations['LoadBalancersController_getLoadBalancers']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/pause': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Pauses the project */
    post: operations['PauseController_pauseProject']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/pause/status': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets the latest pause event for a project if a project is paused */
    get: operations['PauseController_getProject']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/resize': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Resize database disk */
    post: operations['ResizeController_resizeDatabase']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/restart': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Restarts project */
    post: operations['RestartController_restartProject']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/restart-services': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Restarts given services */
    post: operations['RestartServicesController_restartServices']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/restore': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Unpauses project */
    post: operations['UnpauseController_unpauseProject']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/restore/cancel': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Cancels a failed restoration */
    post: operations['UnpauseController_cancelProjectRestoration']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/restore/versions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Retrieves versions to which a project can be restored */
    get: operations['UnpauseController_getAvailableImageVersions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/run-lints': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Run project lints */
    get: operations['ProjectRunLintsController_runProjectLints']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/service-versions': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets service versions for a specific project */
    get: operations['ProjectServiceVersionsController_getServiceVersions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/settings': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project's settings */
    get: operations['SettingsController_getProjectSettings']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/settings/sensitivity': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** Updates the given project sensitivity */
    patch: operations['SensitivityController_updateProjectSensitivity']
    trace?: never
  }
  '/platform/projects/{ref}/status': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project's status */
    get: operations['ProjectStatusController_getStatus']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/transfer': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Transfers a project to a different organization. */
    post: operations['ProjectTransferController_transferProject']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/{ref}/transfer/preview': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Previews transferring a project to a different organizations, shows eligibility and impact. */
    post: operations['ProjectTransferController_previewTransfer']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/projects/fly/{fly_extension_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project linked to fly extension id */
    get: operations['ProjectsController_getProjectByFlyExtensionId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/props/project/{ref}/api': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets project's api info
     * @deprecated
     */
    get: operations['ApiController_getProjectApi']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/props/project/{ref}/jwt-secret-update-status': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets the last JWT secret update status */
    get: operations['JwtSecretUpdateStatusController_getJwtSecretUpdateStatus']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/props/project/{ref}/settings': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets project's settings
     * @deprecated
     */
    get: operations['PropsSettingsController_getProjectSettingsDeprecated']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/replication/{ref}/pipelines': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets replication pipelines */
    get: operations['ReplicationPipelinesController_getPipelines']
    put?: never
    /** Creates a pipeline */
    post: operations['ReplicationPipelinesController_createPipeline']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/replication/{ref}/pipelines/{pipeline_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** Deletes a pipeline */
    delete: operations['ReplicationPipelinesController_deletePipeline']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/replication/{ref}/pipelines/{pipeline_id}/start': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Starts a pipeline */
    post: operations['ReplicationPipelinesController_startPipeline']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/replication/{ref}/pipelines/{pipeline_id}/status': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets status of a pipeline */
    get: operations['ReplicationPipelinesController_getPipelineStatus']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/replication/{ref}/pipelines/{pipeline_id}/stop': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Stops a pipeline */
    post: operations['ReplicationPipelinesController_stopPipeline']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/replication/{ref}/sinks': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets replication sinks */
    get: operations['ReplicationSinksController_getSinks']
    put?: never
    /** Creates a sink */
    post: operations['ReplicationSinksController_createSink']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/replication/{ref}/sinks/{sink_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** Deletes a sink */
    delete: operations['ReplicationSinksController_deleteSink']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/replication/{ref}/sources': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Returns replication sources. */
    get: operations['ReplicationSourcesController_getSources']
    put?: never
    /** Creates a replication source. */
    post: operations['ReplicationSourcesController_createSource']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/replication/{ref}/sources/{source_id}/publications': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Returns source publications. */
    get: operations['ReplicationSourcesController_getPublications']
    put?: never
    /** Creates a publication. */
    post: operations['ReplicationSourcesController_createPublication']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/replication/{ref}/sources/{source_id}/publications/{publication_name}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** Deletes a publication. */
    delete: operations['ReplicationSourcesController_deletePublication']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/replication/{ref}/sources/{source_id}/tables': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Returns source tables. */
    get: operations['ReplicationSourcesController_getTables']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/reset-password': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Reset password for email */
    post: operations['ResetPasswordController_resetPassword']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/signup': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Sign up with email and password */
    post: operations['SignUpController_signUp']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/status': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get infrastructure status */
    get: operations['StatusController_getStatus']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/storage/{ref}/archive': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project storage archive */
    get: operations['StorageArchiveController_getArchive']
    put?: never
    /** Creates project storage archive */
    post: operations['StorageArchiveController_createArchive']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/storage/{ref}/buckets': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets list of buckets */
    get: operations['StorageBucketsController_getBuckets']
    put?: never
    /** Create bucket */
    post: operations['StorageBucketsController_createBucket']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/storage/{ref}/buckets/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets bucket */
    get: operations['StorageBucketIdController_getBucket']
    put?: never
    post?: never
    /** Deletes bucket */
    delete: operations['StorageBucketIdController_deleteBucket']
    options?: never
    head?: never
    /** Updates bucket */
    patch: operations['StorageBucketIdController_updateBucket']
    trace?: never
  }
  '/platform/storage/{ref}/buckets/{id}/empty': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Removes all objects inside a single bucket. */
    post: operations['StorageBucketIdController_emptyBucket']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/storage/{ref}/buckets/{id}/objects': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** Deletes objects */
    delete: operations['StorageObjectsController_deleteObjects']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/storage/{ref}/buckets/{id}/objects/copy': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Copys object */
    post: operations['StorageObjectsController_copyObject']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/storage/{ref}/buckets/{id}/objects/download': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Downloads a file from a private bucket */
    post: operations['StorageObjectsController_download']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/storage/{ref}/buckets/{id}/objects/list': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Gets list of objects with the given bucket */
    post: operations['StorageObjectsController_getObjects']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/storage/{ref}/buckets/{id}/objects/move': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Move object */
    post: operations['StorageObjectsController_moveObject']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/storage/{ref}/buckets/{id}/objects/public-url': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Creates URL for an asset in a public bucket */
    post: operations['StorageObjectsController_createPublicUrl']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/storage/{ref}/buckets/{id}/objects/sign': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Creates a signed URL */
    post: operations['StorageObjectsController_createSignedUrl']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/storage/{ref}/buckets/{id}/objects/sign-multi': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Gets multiple signed URLs */
    post: operations['StorageObjectsController_createSignedUrls']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/storage/{ref}/credentials': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets project storage credentials */
    get: operations['StorageS3CredentialsController_getAllCredentials']
    put?: never
    /** Creates project storage credential */
    post: operations['StorageS3CredentialsController_createCredential']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/storage/{ref}/credentials/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** Deletes project storage credential */
    delete: operations['StorageS3CredentialsController_deleteCredential']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/stripe/invoices/overdue': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets information about overdue invoices that relate to the authenticated user */
    get: operations['InvoicesController_getOverdueInvoices']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/stripe/setup-intent': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Initiated payment method setup */
    post: operations['SetupIntentController_setUpPaymentMethod']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/telemetry/event': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Sends analytics server event */
    post: operations['TelemetryEventController_sendServerEventV2']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/telemetry/feature-flags': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Call feature flags */
    get: operations['TelemetryFeatureFlagsController_callFeatureFlag']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/telemetry/feature-flags/track': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Track feature flag called */
    post: operations['TelemetryFeatureFlagsController_trackFeatureFlag']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/telemetry/groups/identify': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Send analytics group identify event */
    post: operations['TelemetryGroupsController_groupIdentify']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/telemetry/groups/reset': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Send analytics group reset event */
    post: operations['TelemetryGroupsController_groupReset']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/telemetry/identify': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Send analytics identify event */
    post: operations['TelemetryIdentifyController_identifyV2']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/telemetry/page': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Send server page event */
    post: operations['TelemetryPageController_sendServerPageV2']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/telemetry/page-leave': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Send analytics page leave event */
    post: operations['TelemetryPageLeaveController_trackPageLeave']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/telemetry/reset': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Reset analytics */
    post: operations['TelemetryResetController_reset']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/tos/fly': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Redirects to Fly sso flow */
    get: operations['TermsOfServiceController_flyTosAccepted']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/vercel/projects': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets the list of Vercel projects */
    get: operations['VercelProjectsController_getVercelProjects']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/vercel/projects/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets the Vercel project with the given ID */
    get: operations['VercelProjectsController_getVercelProject']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/vercel/projects/envs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets the environment variables for the given project ID on behalf of the given team ID */
    get: operations['VercelEnvironmentVariablesController_getEnvironmentVariables']
    put?: never
    /** Creates the environment variable for the given project ID on behalf of the given team ID */
    post: operations['VercelEnvironmentVariablesController_createEnvironmentVariable']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/vercel/redirect/{installation_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets the Vercel redirect url */
    get: operations['VercelRedirectController_getRedirectUrl']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/vercel/token': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Gets the Vercel access token for the given code */
    get: operations['VercelAccessTokenController_getAccessToken']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/platform/workflow-runs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get a list of workflow runs */
    get: operations['WorkflowRunController_listWorkflowRuns']
    put?: never
    post?: never
    delete?: never
    options?: never
    /** Count the number of workflow runs for the given branch */
    head: operations['WorkflowRunController_countWorkflowRuns']
    patch?: never
    trace?: never
  }
  '/platform/workflow-runs/{workflow_run_id}/logs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get the logs of a workflow run */
    get: operations['WorkflowRunController_getWorkflowRunLogs']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    AccessControlPermission: {
      actions: string[] | null
      condition: Record<string, never>
      organization_id: number | null
      organization_slug: string
      project_ids: number[] | null
      project_refs: string[] | null
      resources: string[] | null
      restrictive: boolean | null
    }
    AccessToken: {
      created_at: string
      id: number
      name: string
      /** @enum {string} */
      scope?: 'V0'
      token_alias: string
    }
    /** @enum {string} */
    AddonVariantId:
      | 'ci_micro'
      | 'ci_small'
      | 'ci_medium'
      | 'ci_large'
      | 'ci_xlarge'
      | 'ci_2xlarge'
      | 'ci_4xlarge'
      | 'ci_8xlarge'
      | 'ci_12xlarge'
      | 'ci_16xlarge'
      | 'cd_default'
      | 'pitr_7'
      | 'pitr_14'
      | 'pitr_28'
      | 'ipv4_default'
      | 'auth_mfa_phone_default'
      | 'auth_mfa_web_authn_default'
      | 'log_drain_default'
    AmiSearchOptions: {
      search_tags?: Record<string, never>
    }
    AnalyticsResponse: {
      error?:
        | {
            code?: number
            errors?: {
              domain?: string
              location?: string
              locationType?: string
              message?: string
              reason?: string
            }[]
            message?: string
            status?: string
          }
        | string
      result?: Record<string, never>[]
    }
    ApiResponse: {
      autoApiService: components['schemas']['AutoApiService']
    }
    ApproveAuthorizationResponse: {
      url: string
    }
    AssignMemberRoleBodyV2: {
      role_id: number
      role_scoped_projects?: string[]
    }
    AuditLogsResponse: {
      result: Record<string, never>[]
      retention_period: number
    }
    AutoApiService: {
      app: {
        id?: number
        name?: string
      }
      app_config: Record<string, never>
      defaultApiKey: string
      endpoint: string
      id: number
      name: string
      project: {
        ref?: string
      }
      protocol: string
      restUrl: string
      service_api_keys: components['schemas']['ServiceApiKey'][]
      serviceApiKey: string
    }
    AvailableAddonResponse: {
      name: string
      type: components['schemas']['ProjectAddonType']
      variants: components['schemas']['ProjectAddonVariantResponse'][]
    }
    Backup: {
      id: number
      inserted_at: string
      isPhysicalBackup: boolean
      project_id: number
      status: Record<string, never>
    }
    BackupId: {
      id: number
    }
    BackupsResponse: {
      backups: components['schemas']['Backup'][]
      physicalBackupData: {
        earliestPhysicalBackupDateUnix?: number
        latestPhysicalBackupDateUnix?: number
      }
      pitr_enabled: boolean
      region: string
      tierKey: string
      walg_enabled: boolean
    }
    BillingCustomerUpdateBody: {
      additional_emails?: string[]
      address?: components['schemas']['CustomerBillingAddress']
    }
    /** @enum {string} */
    BillingPlanChangeType: 'upgrade' | 'downgrade' | 'none'
    /** @enum {string} */
    BillingPlanEffectiveAt: 'now' | 'end_of_billing_period' | 'none'
    /** @enum {string} */
    BillingPlanId: 'free' | 'pro' | 'team' | 'enterprise'
    BillingProjectAddonResponse: {
      addons: components['schemas']['SelectedAddonResponse'][]
      name: string
      ref: string
    }
    BillingSubscriptionAddon: {
      name: string
      price: number
      supabase_prod_id: string
    }
    BillingSubscriptionPlan: {
      id: components['schemas']['BillingPlanId']
      name: string
    }
    Buffer: Record<string, never>
    BulkDeleteUserContentResponse: {
      id: string
    }
    CloneBackupsResponse: {
      backups: components['schemas']['Backup'][]
      physicalBackupData: {
        earliestPhysicalBackupDateUnix?: number
        latestPhysicalBackupDateUnix?: number
      }
      pitr_enabled: boolean
      region: string
      target_compute_size: string
      target_volume_size_gb: number
      tierKey: string
      walg_enabled: boolean
    }
    CloneProjectDto: {
      /** @default 0 */
      cloneBackupId?: number
      newDbPass: string
      newProjectName: string
      /** @default 0 */
      recoveryTimeTarget?: number
    }
    ColumnPrivilege: {
      grantee: string
      grantor: string
      is_grantable: boolean
      /** @enum {string} */
      privilege_type: 'ALL' | 'SELECT' | 'INSERT' | 'UPDATE' | 'REFERENCES'
    }
    CopyObjectBody: {
      from: string
      to: string
    }
    CopyObjectResponse: {
      path: string
    }
    CreateAccessTokenBody: {
      name: string
      /** @enum {string} */
      scope?: 'V0'
    }
    CreateAccessTokenResponse: {
      created_at: string
      id: number
      name: string
      /** @enum {string} */
      scope?: 'V0'
      token: string
      token_alias: string
    }
    CreateBackendParams: {
      config: Record<string, never>
      description?: string
      name: string
      /** @enum {string} */
      type: 'postgres' | 'bigquery' | 'webhook' | 'datadog' | 'elastic' | 'loki'
    }
    CreateCliLoginSessionBody: {
      public_key: string
      session_id: string
      token_name?: string
    }
    CreateColumnBody: {
      check?: string
      comment?: string
      defaultValue?: Record<string, never>
      /** @enum {string} */
      defaultValueFormat?: 'expression' | 'literal'
      /** @enum {string} */
      identityGeneration?: 'BY DEFAULT' | 'ALWAYS'
      isIdentity?: boolean
      isNullable?: boolean
      isPrimaryKey?: boolean
      isUnique?: boolean
      name: string
      tableId: number
      type: string
    }
    CreateContentBodyDto: {
      content?: {
        [key: string]: unknown
      }
      description?: string
      /** Format: uuid */
      folder_id?: (null | (string | null)) | null
      id?: string
      name: string
      owner_id?: number
      /** @enum {string} */
      type: 'sql' | 'report' | 'log_sql'
      /** @enum {string} */
      visibility: 'user' | 'project' | 'org' | 'public'
    }
    CreateContentFolderBodyDto: {
      name: string
      /** Format: uuid */
      parent_id?: string
    }
    CreateExtensionBody: {
      cascade: boolean
      name: string
      schema: string
      version: string
    }
    CreateFunctionBody: {
      args: string[]
      /** @enum {string} */
      behavior: 'VOLATILE' | 'STABLE' | 'IMMUTABLE'
      config_params?: Record<string, never>
      definition: string
      language: string
      name: string
      return_type: string
      schema: string
      security_definer: boolean
    }
    CreateGitHubAuthorizationBody: {
      code: string
    }
    CreateGitHubConnectionsBody: {
      installation_id: number
      project_ref: string
      repository_id: number
    }
    CreateInvitationBody: {
      email: string
      role_id: number
      role_scoped_projects?: string[]
    }
    CreateOAuthAppBody: {
      icon?: string
      name: string
      redirect_uris: string[]
      scopes?: (
        | 'analytics:read'
        | 'analytics:write'
        | 'auth:read'
        | 'auth:write'
        | 'database:read'
        | 'database:write'
        | 'domains:read'
        | 'domains:write'
        | 'edge_functions:read'
        | 'edge_functions:write'
        | 'environment:read'
        | 'environment:write'
        | 'organizations:read'
        | 'organizations:write'
        | 'projects:read'
        | 'projects:write'
        | 'rest:read'
        | 'rest:write'
        | 'secrets:read'
        | 'secrets:write'
        | 'storage:read'
        | 'storage:write'
      )[]
      website: string
    }
    CreateOAuthAppResponse: {
      client_id: string
      client_secret: string
      id: string
    }
    CreateOrganizationBody: {
      kind?: string
      name: string
      payment_method?: string
      size?: string
      /** @enum {string} */
      tier: 'tier_payg' | 'tier_pro' | 'tier_free' | 'tier_team' | 'tier_enterprise'
    }
    CreatePipelineResponse: {
      id: number
    }
    CreatePolicyBody: {
      /** @enum {string} */
      action?: 'PERMISSIVE' | 'RESTRICTIVE'
      check?: string
      /** @enum {string} */
      command?: 'SELECT' | 'INSERT' | 'UPDATE' | 'DELETE' | 'ALL'
      definition?: string
      name: string
      roles?: string[]
      schema?: string
      table: string
    }
    CreateProjectBody: {
      auth_site_url?: string
      cloud_provider: string
      custom_supabase_internal_requests?: components['schemas']['CustomSupabaseInternalRequests']
      data_api_exposed_schemas?: string[]
      data_api_use_api_schema?: boolean
      db_pass: string
      db_pricing_tier_id?: string
      /**
       * @description Provider region description
       * @example Southeast Asia (Singapore)
       */
      db_region: string
      db_sql?: string
      desired_instance_size?: components['schemas']['DesiredInstanceSize']
      name: string
      /** @deprecated */
      org_id?: number
      organization_slug?: string
      postgres_engine?: components['schemas']['PostgresEngine']
      release_channel?: components['schemas']['ReleaseChannel']
    }
    CreateProjectResponse: {
      anon_key: string
      cloud_provider: string
      disk_volume_size_gb?: number
      endpoint: string
      id: number
      infra_compute_size?: components['schemas']['DbInstanceSize']
      inserted_at: string | null
      is_branch_enabled: boolean
      is_physical_backups_enabled: boolean | null
      name: string
      organization_id: number
      organization_slug: string
      preview_branch_refs: string[]
      ref: string
      region: string
      service_key: string
      status: string
      subscription_id: string | null
    }
    CreatePublicationBody: {
      name: string
      owner?: string
      publish_delete?: boolean
      publish_insert?: boolean
      publish_truncate?: boolean
      publish_update?: boolean
      tables?: string[] | null
    }
    CreateReplicationPipelineBody: {
      /** @description Pipeline config */
      config: {
        config: {
          max_fill_secs: number
          max_size: number
        }
      }
      /** @description Publication name */
      publication_name: string
      /** @description Sink id */
      sink_id: number
      /** @description Source id */
      source_id: number
    }
    CreateReplicationPublicationBody: {
      /** @description Publication name */
      name: string
      /** @description Publication tables */
      tables: {
        name: string
        schema: string
      }[]
    }
    CreateReplicationSinkBody: {
      /** @description BigQuery dataset id */
      dataset_id: string
      /** @description BigQuery project id */
      project_id: string
      /** @description BigQuery service account key */
      service_account_key: string
      /** @description Sink name */
      sink_name: string
    }
    CreateSchemaBody: {
      name: string
      owner: string
    }
    CreateSinkResponse: {
      id: number
    }
    CreateSourceResponse: {
      id: number
    }
    CreateStorageBucketBody: {
      allowed_mime_types: string[]
      file_size_limit: number
      id: string
      public: boolean
    }
    CreateStorageCredentialBody: {
      description: string
    }
    CreateStorageCredentialResponse: {
      access_key: string
      description: string
      id: string
      secret_key: string
    }
    CreateTableBody: {
      comment?: string
      name: string
      schema?: string
    }
    CreateTaxIdBody: {
      country?: string
      type: string
      value: string
    }
    CreateTriggerBody: {
      /** @enum {string} */
      activation: 'AFTER' | 'BEFORE'
      /** @enum {string} */
      enabled_mode: 'ORIGIN' | 'REPLICA' | 'ALWAYS' | 'DISABLED'
      events: ('INSERT' | 'UPDATE' | 'DELETE')[]
      function_args: string[]
      function_name: string
      function_schema: string
      name: string
      /** @enum {string} */
      orientation: 'ROW' | 'STATEMENT'
      schema: string
      table: string
      table_id?: number
    }
    CreateUserBody: {
      email: string
      email_confirm: boolean
      password: string
    }
    CreateUserContentFolderResponse: {
      id: string
      name: string
      owner_id: number
      parent_id?: string | null
      project_id: number
    }
    CreateUserReponse: {
      aud?: string
      banned_until?: string
      confirmation_sent_at?: string
      confirmation_token?: string
      confirmed_at?: string
      created_at?: string
      deleted_at?: string
      email?: string
      email_change?: string
      email_change_confirm_status?: number
      email_change_sent_at?: string
      email_change_token_current?: string
      email_change_token_new?: string
      email_confirmed_at?: string
      encrypted_password?: string
      id?: string
      instance_id?: string
      invited_at?: string
      is_anonymous?: boolean
      is_sso_user?: boolean
      is_super_admin?: boolean
      last_sign_in_at?: string
      phone?: string
      phone_change?: string
      phone_change_sent_at?: string
      phone_change_token?: string
      phone_confirmed_at?: string
      raw_app_meta_data?: Record<string, never>
      raw_user_meta_data?: Record<string, never>
      reauthentication_sent_at?: string
      reauthentication_token?: string
      recovery_sent_at?: string
      recovery_token?: string
      role?: string
      updated_at?: string
    }
    CreateVercelConnectionResponse: {
      env_sync_error?: components['schemas']['SyncVercelEnvError']
      id: string
    }
    CreateVercelConnectionsBody: {
      connection: components['schemas']['IntegrationConnectionVercel']
      organization_integration_id: string
    }
    CreateVercelEnvironmentVariableBody: {
      key: string
      target: string[]
      type: string
      value: string
    }
    CreateVercelIntegrationBody: {
      code: string
      configuration_id: string
      metadata: Record<string, never>
      organization_slug: string
      source: string
      teamId?: string
    }
    CreditsTopUpRequestDto: {
      amount: number
      hcaptcha_token?: string
      payment_method_id: string
    }
    CreditsTopUpResponseDto: {
      payment_intent_secret?: string
      /** @enum {string} */
      status:
        | 'canceled'
        | 'processing'
        | 'requires_action'
        | 'requires_capture'
        | 'requires_confirmation'
        | 'requires_payment_method'
        | 'succeeded'
    }
    CustomerBillingAddress: {
      city?: string
      country: string
      line1: string
      line2?: string
      postal_code?: string
      state?: string
    }
    CustomerResponse: {
      additional_emails: string[] | null
      address: components['schemas']['CustomerBillingAddress'] | null
      balance: number
      billing_via_partner: boolean
      email: string
    }
    CustomSupabaseInternalRequests: {
      ami: components['schemas']['AmiSearchOptions']
    }
    /** @enum {string} */
    database_status:
      | 'ACTIVE_HEALTHY'
      | 'ACTIVE_UNHEALTHY'
      | 'COMING_UP'
      | 'GOING_DOWN'
      | 'INIT_FAILED'
      | 'REMOVED'
      | 'RESTORING'
      | 'UNKNOWN'
      | 'INIT_READ_REPLICA'
      | 'INIT_READ_REPLICA_FAILED'
      | 'RESTARTING'
      | 'RESIZING'
    /** @enum {string} */
    database_type: 'PRIMARY' | 'READ_REPLICA'
    DatabaseDetailResponse: {
      /** @enum {string} */
      cloud_provider: 'AWS' | 'FLY'
      connectionString: string
      db_host: string
      db_name: string
      db_port: number
      db_user: string
      identifier: string
      inserted_at: string
      region: string
      restUrl: string
      size: string
      /** @enum {string} */
      status:
        | 'ACTIVE_HEALTHY'
        | 'ACTIVE_UNHEALTHY'
        | 'COMING_UP'
        | 'GOING_DOWN'
        | 'INIT_FAILED'
        | 'REMOVED'
        | 'RESTORING'
        | 'UNKNOWN'
        | 'INIT_READ_REPLICA'
        | 'INIT_READ_REPLICA_FAILED'
        | 'RESTARTING'
        | 'RESIZING'
    }
    DatabaseStatusResponse: {
      identifier: string
      replicaInitializationStatus?: Record<string, never>
      /** @enum {string} */
      status:
        | 'ACTIVE_HEALTHY'
        | 'ACTIVE_UNHEALTHY'
        | 'COMING_UP'
        | 'GOING_DOWN'
        | 'INIT_FAILED'
        | 'REMOVED'
        | 'RESTORING'
        | 'UNKNOWN'
        | 'INIT_READ_REPLICA'
        | 'INIT_READ_REPLICA_FAILED'
        | 'RESTARTING'
        | 'RESIZING'
    }
    /** @enum {string} */
    DbInstanceSize:
      | 'nano'
      | 'micro'
      | 'small'
      | 'medium'
      | 'large'
      | 'xlarge'
      | '2xlarge'
      | '4xlarge'
      | '8xlarge'
      | '12xlarge'
      | '16xlarge'
    DeclineAuthorizationResponse: {
      id: string
    }
    DeleteOAuthAppResponse: {
      client_id: string
      client_secret_alias: string
      created_at: string
      icon?: string
      id: string
      name: string
      redirect_uris: string[]
      website: string
    }
    DeleteObjectsBody: {
      paths: string[]
    }
    DeleteVercelConnectionResponse: {
      id: string
    }
    /** @enum {string} */
    DesiredInstanceSize:
      | 'micro'
      | 'small'
      | 'medium'
      | 'large'
      | 'xlarge'
      | '2xlarge'
      | '4xlarge'
      | '8xlarge'
      | '12xlarge'
      | '16xlarge'
    DetachPaymentMethodBody: {
      card_id: string
    }
    DiskAutoscaleConfig: {
      /** @description Growth percentage for disk autoscaling */
      growth_percent?: number | null
      /** @description Maximum limit the disk size will grow to in GB */
      max_size_gb?: number | null
      /** @description Minimum increment size for disk autoscaling in GB */
      min_increment_gb?: number | null
    }
    DiskRequestAttributesGP3: {
      iops: number
      size_gb: number
      throughput_mbps: number
      /** @enum {string} */
      type: 'gp3'
    }
    DiskRequestAttributesIO2: {
      iops: number
      size_gb: number
      /** @enum {string} */
      type: 'io2'
    }
    DiskRequestBody: {
      attributes:
        | components['schemas']['DiskRequestAttributesGP3']
        | components['schemas']['DiskRequestAttributesIO2']
    }
    DiskResponse: {
      attributes:
        | components['schemas']['DiskResponseAttributesGP3']
        | components['schemas']['DiskResponseAttributesIO2']
      last_modified_at?: string
      requested_modification?:
        | components['schemas']['DiskResponseAttributesGP3']
        | components['schemas']['DiskResponseAttributesIO2']
    }
    DiskResponseAttributesGP3: {
      iops: number
      size_gb: number
      throughput_mbps: number
      /** @enum {string} */
      type: 'gp3'
    }
    DiskResponseAttributesIO2: {
      iops: number
      size_gb: number
      /** @enum {string} */
      type: 'io2'
    }
    DiskUtilMetrics: {
      fs_avail_bytes: number
      fs_size_bytes: number
      fs_used_bytes: number
    }
    DiskUtilMetricsResponse: {
      metrics: components['schemas']['DiskUtilMetrics']
      timestamp: string
    }
    DownloadableBackupsResponse: {
      backups: components['schemas']['Backup'][]
      status: Record<string, never>
    }
    DownloadBackupBody: {
      data: Record<string, never>
      id: number
      inserted_at: string
      project_id: number
      s3_bucket: string
      s3_path: string
      status: string
    }
    DownloadBackupResponse: {
      fileUrl: string
    }
    DownloadObjectBody: {
      options?: components['schemas']['DownloadObjectOptions']
      path: string
    }
    DownloadObjectOptions: {
      download?: boolean
      downloadName?: string
      transform?: components['schemas']['StorageObjectTransformOptions']
    }
    FormatQueryBody: {
      query: string
    }
    GetArchiveResponse: {
      archive_empty: boolean
      file_url: string
      fileUrl: string
    }
    GetContentCountResponse: {
      count: number
    }
    GetContentCountV2Response: {
      favorites: number
      private: number
      shared: number
    }
    GetOAuthAuthorizationResponse: {
      approved_at?: string
      approved_organization_slug?: string
      domain: string
      expires_at: string
      icon?: string
      name: string
      scopes?: (
        | 'analytics:read'
        | 'analytics:write'
        | 'auth:read'
        | 'auth:write'
        | 'database:read'
        | 'database:write'
        | 'domains:read'
        | 'domains:write'
        | 'edge_functions:read'
        | 'edge_functions:write'
        | 'environment:read'
        | 'environment:write'
        | 'organizations:read'
        | 'organizations:write'
        | 'projects:read'
        | 'projects:write'
        | 'rest:read'
        | 'rest:write'
        | 'secrets:read'
        | 'secrets:write'
        | 'storage:read'
        | 'storage:write'
      )[]
      website: string
    }
    GetObjectsBody: {
      options: components['schemas']['StorageObjectSearchOptions']
      path: string
    }
    GetOrganizationByFlyOrganizationIdResponse: {
      slug: string
    }
    GetOrganizationIntegrationResponse: {
      added_by: {
        primary_email?: string
        username?: string
      }
      connections: components['schemas']['ProjectIntegrationConnection'][]
      id: string
      inserted_at: string
      integration: {
        name?: string
      }
      metadata: Record<string, never>
      organization: {
        slug?: string
      }
      updated_at: string
    }
    GetProjectByFlyExtensionIdResponse: {
      ref: string
    }
    GetPublicUrlBody: {
      options?: components['schemas']['PublicUrlOptions']
      path: string
    }
    GetSignedUrlBody: {
      expiresIn: number
      options?: components['schemas']['SignedUrlOptions']
      path: string
    }
    GetSignedUrlsBody: {
      expiresIn: number
      options?: components['schemas']['SignedUrlsOptions']
      path: string[]
    }
    GetStorageCredential: {
      created_at: string
      description: string
      id: string
    }
    GetStorageCredentialsResponse: {
      data: components['schemas']['GetStorageCredential'][]
    }
    GetSubscriptionResponse: {
      addons: components['schemas']['BillingSubscriptionAddon'][]
      billing_cycle_anchor: number
      /** @enum {string} */
      billing_partner: 'fly' | 'aws' | 'vercel_marketplace'
      billing_via_partner: boolean
      current_period_end: number
      current_period_start: number
      customer_balance: number
      nano_enabled: boolean
      next_invoice_at: number
      payment_method_type: string
      plan: components['schemas']['BillingSubscriptionPlan']
      project_addons: components['schemas']['BillingProjectAddonResponse'][]
      scheduled_plan_change: components['schemas']['ScheduledPlanChange'] | null
      usage_billing_enabled: boolean
    }
    GetUserContentByIdResponse: {
      content: Record<string, never>
      description?: string
      favorite: boolean | null
      folder_id?: string | null
      id: string
      inserted_at: string
      last_updated_by?: number
      name: string
      owner_id: number
      project_id: number
      /** @enum {string} */
      type: 'sql' | 'report' | 'log_sql'
      updated_at: string
      /** @enum {string} */
      visibility: 'user' | 'project' | 'org' | 'public'
    }
    GetUserContentFolderResponse: {
      cursor?: string
      data: {
        contents?: components['schemas']['UserContentObjectMeta'][]
        folders?: components['schemas']['UserContentFolder'][]
      }
    }
    GetUserContentObject: {
      content: Record<string, never>
      description?: string
      favorite?: boolean | null
      folder_id?: string | null
      id: string
      inserted_at: string
      last_updated_by?: number
      name: string
      owner: {
        id?: number
        username?: string
      }
      owner_id: number
      project_id: number
      /** @enum {string} */
      type: 'sql' | 'report' | 'log_sql'
      updated_at: string
      updated_by: {
        id?: number
        username?: string
      }
      /** @enum {string} */
      visibility: 'user' | 'project' | 'org' | 'public'
    }
    GetUserContentResponse: {
      cursor?: string
      data: components['schemas']['GetUserContentObject'][]
    }
    GetUserOrganizationIntegrationResponse: {
      added_by: {
        primary_email?: string
        username?: string
      }
      id: string
      inserted_at: string
      integration: {
        name?: string
      }
      metadata: Record<string, never>
      organization: {
        slug?: string
      }
      updated_at: string
    }
    GetVercelConnections: {
      foreign_project_id: string
      id: string
      inserted_at: string
      metadata: Record<string, never>
      organization_integration_id: string
      supabase_project_ref: string
      updated_at: string
    }
    GetVercelProjectsResponse: {
      pagination: {
        count?: number
        next?: number | null
        prev?: number | null
      }
      projects: components['schemas']['IntegrationVercelProject'][]
    }
    GitHubAuthorization: {
      id: number
      sender_id: number
      user_id: number
    }
    GoTrueConfigResponse: {
      API_MAX_REQUEST_DURATION: number | null
      DB_MAX_POOL_SIZE: number | null
      DISABLE_SIGNUP: boolean
      EXTERNAL_ANONYMOUS_USERS_ENABLED: boolean
      EXTERNAL_APPLE_ADDITIONAL_CLIENT_IDS: string
      EXTERNAL_APPLE_CLIENT_ID: string
      EXTERNAL_APPLE_ENABLED: boolean
      EXTERNAL_APPLE_SECRET: string
      EXTERNAL_AZURE_CLIENT_ID: string
      EXTERNAL_AZURE_ENABLED: boolean
      EXTERNAL_AZURE_SECRET: string
      EXTERNAL_AZURE_URL: string
      EXTERNAL_BITBUCKET_CLIENT_ID: string
      EXTERNAL_BITBUCKET_ENABLED: boolean
      EXTERNAL_BITBUCKET_SECRET: string
      EXTERNAL_DISCORD_CLIENT_ID: string
      EXTERNAL_DISCORD_ENABLED: boolean
      EXTERNAL_DISCORD_SECRET: string
      EXTERNAL_EMAIL_ENABLED: boolean
      EXTERNAL_FACEBOOK_CLIENT_ID: string
      EXTERNAL_FACEBOOK_ENABLED: boolean
      EXTERNAL_FACEBOOK_SECRET: string
      EXTERNAL_FIGMA_CLIENT_ID: string
      EXTERNAL_FIGMA_ENABLED: boolean
      EXTERNAL_FIGMA_SECRET: string
      EXTERNAL_GITHUB_CLIENT_ID: string
      EXTERNAL_GITHUB_ENABLED: boolean
      EXTERNAL_GITHUB_SECRET: string
      EXTERNAL_GITLAB_CLIENT_ID: string
      EXTERNAL_GITLAB_ENABLED: boolean
      EXTERNAL_GITLAB_SECRET: string
      EXTERNAL_GITLAB_URL: string
      EXTERNAL_GOOGLE_ADDITIONAL_CLIENT_IDS: string
      EXTERNAL_GOOGLE_CLIENT_ID: string
      EXTERNAL_GOOGLE_ENABLED: boolean
      EXTERNAL_GOOGLE_SECRET: string
      EXTERNAL_GOOGLE_SKIP_NONCE_CHECK: boolean
      EXTERNAL_KAKAO_CLIENT_ID: string
      EXTERNAL_KAKAO_ENABLED: boolean
      EXTERNAL_KAKAO_SECRET: string
      EXTERNAL_KEYCLOAK_CLIENT_ID: string
      EXTERNAL_KEYCLOAK_ENABLED: boolean
      EXTERNAL_KEYCLOAK_SECRET: string
      EXTERNAL_KEYCLOAK_URL: string
      EXTERNAL_LINKEDIN_OIDC_CLIENT_ID: string
      EXTERNAL_LINKEDIN_OIDC_ENABLED: boolean
      EXTERNAL_LINKEDIN_OIDC_SECRET: string
      EXTERNAL_NOTION_CLIENT_ID: string
      EXTERNAL_NOTION_ENABLED: boolean
      EXTERNAL_NOTION_SECRET: string
      EXTERNAL_PHONE_ENABLED: boolean
      EXTERNAL_SLACK_CLIENT_ID: string
      EXTERNAL_SLACK_ENABLED: boolean
      EXTERNAL_SLACK_OIDC_CLIENT_ID: string
      EXTERNAL_SLACK_OIDC_ENABLED: boolean
      EXTERNAL_SLACK_OIDC_SECRET: string
      EXTERNAL_SLACK_SECRET: string
      EXTERNAL_SPOTIFY_CLIENT_ID: string
      EXTERNAL_SPOTIFY_ENABLED: boolean
      EXTERNAL_SPOTIFY_SECRET: string
      EXTERNAL_TWITCH_CLIENT_ID: string
      EXTERNAL_TWITCH_ENABLED: boolean
      EXTERNAL_TWITCH_SECRET: string
      EXTERNAL_TWITTER_CLIENT_ID: string
      EXTERNAL_TWITTER_ENABLED: boolean
      EXTERNAL_TWITTER_SECRET: string
      EXTERNAL_WORKOS_CLIENT_ID: string
      EXTERNAL_WORKOS_ENABLED: boolean
      EXTERNAL_WORKOS_SECRET: string
      EXTERNAL_WORKOS_URL: string
      EXTERNAL_ZOOM_CLIENT_ID: string
      EXTERNAL_ZOOM_ENABLED: boolean
      EXTERNAL_ZOOM_SECRET: string
      HOOK_CUSTOM_ACCESS_TOKEN_ENABLED: boolean
      HOOK_CUSTOM_ACCESS_TOKEN_SECRETS: string
      HOOK_CUSTOM_ACCESS_TOKEN_URI: string
      HOOK_MFA_VERIFICATION_ATTEMPT_ENABLED: boolean
      HOOK_MFA_VERIFICATION_ATTEMPT_SECRETS: string
      HOOK_MFA_VERIFICATION_ATTEMPT_URI: string
      HOOK_PASSWORD_VERIFICATION_ATTEMPT_ENABLED: boolean
      HOOK_PASSWORD_VERIFICATION_ATTEMPT_SECRETS: string
      HOOK_PASSWORD_VERIFICATION_ATTEMPT_URI: string
      HOOK_SEND_EMAIL_ENABLED: boolean
      HOOK_SEND_EMAIL_SECRETS: string
      HOOK_SEND_EMAIL_URI: string
      HOOK_SEND_SMS_ENABLED: boolean
      HOOK_SEND_SMS_SECRETS: string
      HOOK_SEND_SMS_URI: string
      JWT_EXP: number
      MAILER_ALLOW_UNVERIFIED_EMAIL_SIGN_INS: boolean
      MAILER_AUTOCONFIRM: boolean
      MAILER_OTP_EXP: number
      MAILER_OTP_LENGTH: number
      MAILER_SECURE_EMAIL_CHANGE_ENABLED: boolean
      MAILER_SUBJECTS_CONFIRMATION: string
      MAILER_SUBJECTS_EMAIL_CHANGE: string
      MAILER_SUBJECTS_INVITE: string
      MAILER_SUBJECTS_MAGIC_LINK: string
      MAILER_SUBJECTS_REAUTHENTICATION: string
      MAILER_SUBJECTS_RECOVERY: string
      MAILER_TEMPLATES_CONFIRMATION_CONTENT: string
      MAILER_TEMPLATES_EMAIL_CHANGE_CONTENT: string
      MAILER_TEMPLATES_INVITE_CONTENT: string
      MAILER_TEMPLATES_MAGIC_LINK_CONTENT: string
      MAILER_TEMPLATES_REAUTHENTICATION_CONTENT: string
      MAILER_TEMPLATES_RECOVERY_CONTENT: string
      MFA_MAX_ENROLLED_FACTORS: number
      MFA_PHONE_ENROLL_ENABLED: boolean
      MFA_PHONE_MAX_FREQUENCY: number
      MFA_PHONE_OTP_LENGTH: number
      MFA_PHONE_TEMPLATE: string
      MFA_PHONE_VERIFY_ENABLED: boolean
      MFA_TOTP_ENROLL_ENABLED: boolean
      MFA_TOTP_VERIFY_ENABLED: boolean
      MFA_WEB_AUTHN_ENROLL_ENABLED: boolean
      MFA_WEB_AUTHN_VERIFY_ENABLED: boolean
      PASSWORD_HIBP_ENABLED: boolean
      PASSWORD_MIN_LENGTH: number
      PASSWORD_REQUIRED_CHARACTERS: string
      RATE_LIMIT_ANONYMOUS_USERS: number
      RATE_LIMIT_EMAIL_SENT: number
      RATE_LIMIT_OTP: number
      RATE_LIMIT_SMS_SENT: number
      RATE_LIMIT_TOKEN_REFRESH: number
      RATE_LIMIT_VERIFY: number
      REFRESH_TOKEN_ROTATION_ENABLED: boolean
      SAML_ALLOW_ENCRYPTED_ASSERTIONS: boolean
      SAML_ENABLED: boolean
      SAML_EXTERNAL_URL: string
      SECURITY_CAPTCHA_ENABLED: boolean
      SECURITY_CAPTCHA_PROVIDER: string
      SECURITY_CAPTCHA_SECRET: string
      SECURITY_MANUAL_LINKING_ENABLED: boolean
      SECURITY_REFRESH_TOKEN_REUSE_INTERVAL: number
      SECURITY_UPDATE_PASSWORD_REQUIRE_REAUTHENTICATION: boolean
      SESSIONS_INACTIVITY_TIMEOUT: number
      SESSIONS_SINGLE_PER_USER: boolean
      SESSIONS_TAGS: string
      SESSIONS_TIMEBOX: number
      SITE_URL: string
      SMS_AUTOCONFIRM: boolean
      SMS_MAX_FREQUENCY: number
      SMS_MESSAGEBIRD_ACCESS_KEY: string
      SMS_MESSAGEBIRD_ORIGINATOR: string
      SMS_OTP_EXP: number
      SMS_OTP_LENGTH: number
      SMS_PROVIDER: string
      SMS_TEMPLATE: string
      SMS_TEST_OTP: string
      SMS_TEST_OTP_VALID_UNTIL: string
      SMS_TEXTLOCAL_API_KEY: string
      SMS_TEXTLOCAL_SENDER: string
      SMS_TWILIO_ACCOUNT_SID: string
      SMS_TWILIO_AUTH_TOKEN: string
      SMS_TWILIO_CONTENT_SID: string
      SMS_TWILIO_MESSAGE_SERVICE_SID: string
      SMS_TWILIO_VERIFY_ACCOUNT_SID: string
      SMS_TWILIO_VERIFY_AUTH_TOKEN: string
      SMS_TWILIO_VERIFY_MESSAGE_SERVICE_SID: string
      SMS_VONAGE_API_KEY: string
      SMS_VONAGE_API_SECRET: string
      SMS_VONAGE_FROM: string
      SMTP_ADMIN_EMAIL: string
      SMTP_HOST: string
      SMTP_MAX_FREQUENCY: number
      SMTP_PASS: string
      SMTP_PORT: string
      SMTP_SENDER_NAME: string
      SMTP_USER: string
      URI_ALLOW_LIST: string
    }
    GrantColumnPrivilegesBody: {
      column_id: string
      grantee: string
      is_grantable?: boolean
      /** @enum {string} */
      privilege_type: 'ALL' | 'SELECT' | 'INSERT' | 'UPDATE' | 'REFERENCES'
    }
    HCaptchaBody: {
      hcaptchaToken: string
    }
    IntegrationConnectionVercel: {
      foreign_project_id: string
      metadata: Record<string, never>
      supabase_project_ref: string
    }
    IntegrationVercelProject: {
      framework?: string | null
      id: string
      link?: components['schemas']['VercelProjectLink']
      name: string
    }
    Invitation: {
      id: number
      invited_at: string
      invited_email: string
      role_id: number
    }
    InvitationByTokenResponse: {
      authorized_user: boolean
      email_match: boolean
      expired_token: boolean
      invite_id?: number
      organization_name: string
      sso_mismatch: boolean
      token_does_not_exist: boolean
    }
    InvitationResponse: {
      invitations: components['schemas']['Invitation'][]
    }
    Invoice: {
      amount_due: number
      id: string
      invoice_pdf: string
      number: string
      payment_attempted: boolean
      period_end: number
      status: string
      subscription: string | null
      subtotal: number
    }
    InvoicePaymentLinkResponse: {
      redirectUrl: string
    }
    JwtSecretUpdateStatus: {
      jwtSecretUpdateStatus: {
        change_tracking_id?: string
        /** @enum {number} */
        error?: 0 | 1 | 2 | 3 | 4 | 5
        /** @enum {number} */
        progress?: 0 | 1 | 2 | 3 | 4 | 5
        /** @enum {number} */
        status?: 0 | 1 | 2
      }
    }
    LFAccessToken: {
      description: string | null
      id: number
      inserted_at: string
      scopes: string
      token: string
    }
    LFBackend: {
      config: Record<string, never>
      description?: string
      id: number
      metadata: {
        project_ref?: string
        type?: string
      }
      name: string
      token: string
      /** @enum {string} */
      type: 'postgres' | 'bigquery' | 'webhook' | 'datadog' | 'elastic' | 'loki'
      user_id: number
    }
    LFEndpoint: {
      cache_duration_seconds: number
      description: string
      enable_auth: number
      id: number
      language: Record<string, never>
      max_limit: number
      name: string
      proactive_requerying_seconds: number
      query: string
      sandboxable: boolean | null
      token: string
    }
    LFSource: {
      bigquery_table_ttl: number
      custom_event_message_keys: string | null
      favourite: boolean
      id: number
      lock_schema: boolean
      name: string
      public_token: string | null
      retention_days: number
      slack_hook_url: string | null
      token: string
      webhook_notification_url: string | null
    }
    LFUser: {
      bigquery_dataset_id: string | null
      bigquery_dataset_location: string | null
      bigquery_project_id: string | null
      company: string | null
      email: string | null
      email_me_product: string | null
      metadata: {
        project_ref?: string
      }
      phone: string | null
      token: string
    }
    ListGitHubConnectionsConnection: {
      branch_limit: number
      id: number
      inserted_at: string
      installation_id: number
      project: components['schemas']['ListGitHubConnectionsProject']
      repository: components['schemas']['ListGitHubConnectionsRepository']
      supabase_changes_only: boolean
      updated_at: string
      user: components['schemas']['ListGitHubConnectionsUser'] | null
      workdir: string
    }
    ListGitHubConnectionsProject: {
      id: number
      name: string
      ref: string
    }
    ListGitHubConnectionsRepository: {
      id: number
      name: string
    }
    ListGitHubConnectionsResponse: {
      connections: components['schemas']['ListGitHubConnectionsConnection'][]
    }
    ListGitHubConnectionsUser: {
      id: number
      primary_email: string | null
      username: string
    }
    LoadBalancerDatabase: {
      identifier: string
      status: string
      /** @enum {string} */
      type: 'PRIMARY' | 'READ_REPLICA'
    }
    LoadBalancerDetailResponse: {
      databases: components['schemas']['LoadBalancerDatabase'][]
      endpoint: string
    }
    MarkDefaultPaymentMethodBody: {
      payment_method_id: string
    }
    MarkSensitiveBody: {
      is_sensitive: boolean
    }
    Member: {
      gotrue_id: string
      is_sso_user: boolean | null
      metadata: Record<string, never> | null
      mfa_enabled: boolean
      primary_email: string | null
      role_ids: number[]
      username: string
    }
    MemberExceedingFreeProjectLimit: {
      limit: number
      name: string
    }
    MemberWithFreeProjectLimit: {
      free_project_limit: number
      primary_email: string
      username: string
    }
    MoveObjectBody: {
      from: string
      to: string
    }
    NotificationAction: {
      action_type?: string
      label: string
      url?: string
    }
    NotificationData: {
      actions?: components['schemas']['NotificationAction'][]
      message?: string
      org_slug?: string
      project_ref?: string
      title: string
    }
    NotificationResponseV1: {
      data: Record<string, never>
      id: string
      inserted_at: string
      meta: Record<string, never>
      notification_name: string
      notification_status: string
      project_id: number
    }
    NotificationResponseV2: {
      data: components['schemas']['NotificationData']
      id: string
      inserted_at: string
      meta: Record<string, never>
      name: string
      /** @enum {string} */
      priority: 'Critical' | 'Warning' | 'Info'
      /** @enum {string} */
      status: 'new' | 'seen' | 'archived'
    }
    NotificationsSummary: {
      has_critical: boolean
      has_warning: boolean
      unread_count: number
    }
    OAuthAppResponse: {
      authorized_at?: string
      client_id?: string
      client_secret_alias?: string
      created_at?: string
      icon?: string
      id: string
      name: string
      redirect_uris?: string[]
      scopes?: (
        | 'analytics:read'
        | 'analytics:write'
        | 'auth:read'
        | 'auth:write'
        | 'database:read'
        | 'database:write'
        | 'domains:read'
        | 'domains:write'
        | 'edge_functions:read'
        | 'edge_functions:write'
        | 'environment:read'
        | 'environment:write'
        | 'organizations:read'
        | 'organizations:write'
        | 'projects:read'
        | 'projects:write'
        | 'rest:read'
        | 'rest:write'
        | 'secrets:read'
        | 'secrets:write'
        | 'storage:read'
        | 'storage:write'
      )[]
      website: string
    }
    OrganizationProjectsResponse: {
      projects: components['schemas']['ProjectWithDatabases'][]
    }
    OrganizationResponse: {
      billing_email: string | null
      id: number
      is_owner: boolean
      name: string
      opt_in_tags: string[]
      restriction_data: Record<string, never>
      /** @enum {string|null} */
      restriction_status: 'grace_period' | 'grace_period_over' | 'restricted' | null
      slug: string
      stripe_customer_id: string | null
      subscription_id: string | null
    }
    OrganizationRoleResponse: {
      org_scoped_roles: components['schemas']['OrganizationRoleV2'][]
      project_scoped_roles: components['schemas']['OrganizationRoleV2'][]
    }
    OrganizationRoleV2: {
      base_role_id: number
      description: string | null
      id: number
      name: string
      project_ids: number[] | null
    }
    OrganizationSlugAvailableVersionsBodyDto: {
      provider: string
      region: string
    }
    OrganizationSlugAvailableVersionsResponse: {
      available_versions: components['schemas']['ProjectCreationVersionInfo'][]
    }
    OrganizationSlugProject: {
      cloud_provider: string
      disk_volume_size_gb?: number
      engine?: string
      id: number
      /** @enum {string} */
      infra_compute_size?:
        | 'nano'
        | 'micro'
        | 'small'
        | 'medium'
        | 'large'
        | 'xlarge'
        | '2xlarge'
        | '4xlarge'
        | '8xlarge'
        | '12xlarge'
        | '16xlarge'
      inserted_at: string | null
      is_branch_enabled: boolean
      is_physical_backups_enabled: boolean | null
      name: string
      organization_id: number
      organization_slug: string
      preview_branch_refs: string[]
      ref: string
      region: string
      status: string
      subscription_id: string | null
    }
    OrganizationSlugResponse: {
      billing_email: string | null
      billing_metadata: Record<string, never> | null
      has_oriole_project: boolean
      id: number
      name: string
      opt_in_tags: string[]
      projects: components['schemas']['OrganizationSlugProject'][]
      restriction_data: Record<string, never> | null
      /** @enum {string|null} */
      restriction_status: 'grace_period' | 'grace_period_over' | 'restricted' | null
      slug: string
    }
    OrgDocumentUrlResponse: {
      fileUrl: string
    }
    OrgMetricUsage: {
      available_in_plan: boolean
      capped: boolean
      cost: number
      /** @enum {string} */
      metric:
        | 'EGRESS'
        | 'DATABASE_SIZE'
        | 'STORAGE_SIZE'
        | 'MONTHLY_ACTIVE_USERS'
        | 'MONTHLY_ACTIVE_SSO_USERS'
        | 'FUNCTION_INVOCATIONS'
        | 'STORAGE_IMAGES_TRANSFORMED'
        | 'REALTIME_MESSAGE_COUNT'
        | 'REALTIME_PEAK_CONNECTIONS'
        | 'DISK_SIZE_GB_HOURS_GP3'
        | 'DISK_SIZE_GB_HOURS_IO2'
        | 'AUTH_MFA_PHONE'
        | 'AUTH_MFA_WEB_AUTHN'
        | 'LOG_DRAIN_EVENTS'
        | 'MONTHLY_ACTIVE_THIRD_PARTY_USERS'
        | 'DISK_THROUGHPUT_GP3'
        | 'DISK_IOPS_GP3'
        | 'DISK_IOPS_IO2'
        | 'COMPUTE_HOURS_BRANCH'
        | 'COMPUTE_HOURS_XS'
        | 'COMPUTE_HOURS_SM'
        | 'COMPUTE_HOURS_MD'
        | 'COMPUTE_HOURS_L'
        | 'COMPUTE_HOURS_XL'
        | 'COMPUTE_HOURS_2XL'
        | 'COMPUTE_HOURS_4XL'
        | 'COMPUTE_HOURS_8XL'
        | 'COMPUTE_HOURS_12XL'
        | 'COMPUTE_HOURS_16XL'
        | 'CUSTOM_DOMAIN'
        | 'PITR_7'
        | 'PITR_14'
        | 'PITR_28'
        | 'IPV4'
        | 'LOG_DRAIN'
      pricing_free_units?: number
      pricing_package_price?: number
      pricing_package_size?: number
      pricing_per_unit_price?: number
      /** @enum {string} */
      pricing_strategy: 'UNIT' | 'PACKAGE' | 'TIERED' | 'NONE'
      project_allocations: components['schemas']['ProjectAllocation'][]
      unit_price_desc: string
      unlimited: boolean
      usage: number
      usage_original: number
    }
    OrgUsageResponse: {
      usage_billing_enabled: boolean
      usages: components['schemas']['OrgMetricUsage'][]
    }
    OverdueInvoiceCount: {
      organization_id: number
      overdue_invoice_count: number
    }
    PasswordCheckBody: {
      password: string
    }
    PasswordCheckResponse: {
      result: {
        feedback?: {
          suggestions?: string[]
          warning?: string
        }
        score?: number
      }
    }
    PauseStatusResponse: {
      can_restore: boolean
      latest_downloadable_backup_id: number | null
      max_days_till_restore_disabled: number
      remaining_days_till_restore_disabled: number | null
    }
    Payment: {
      card?: components['schemas']['PaymentMethodCard']
      created: number
      id: string
      is_default: boolean
      type: string
    }
    PaymentMethodCard: {
      brand: string
      exp_month: number
      exp_year: number
      last4: string
    }
    PaymentsResponse: {
      data: components['schemas']['Payment'][]
      defaultPaymentMethodId: string | null
    }
    PgbouncerConfigResponse: {
      connectionString: string
      db_dns_name: string
      db_host: string
      db_name: string
      db_port: number
      db_user: string
      default_pool_size?: number
      ignore_startup_parameters?: string
      inserted_at: string
      max_client_conn?: number
      pgbouncer_enabled: boolean
      /** @enum {string} */
      pgbouncer_status: 'COMING_DOWN' | 'COMING_UP' | 'DISABLED' | 'ENABLED' | 'RELOADING'
      /** @enum {string} */
      pool_mode?: 'transaction' | 'session' | 'statement'
      ssl_enforced: boolean
      supavisor_enabled: boolean
    }
    PgbouncerStatusResponse: {
      active: boolean
    }
    PlanResponse: {
      change_type: components['schemas']['BillingPlanChangeType']
      effective_at: components['schemas']['BillingPlanEffectiveAt']
      id: components['schemas']['BillingPlanId']
      is_current: boolean
      name: string
      price: number
    }
    PlansResponse: {
      plans: components['schemas']['PlanResponse'][]
    }
    PointInTimeRestoreBody: {
      recovery_time_target_unix: number
    }
    PostgresColumn: {
      check: string | null
      comment: string | null
      data_type: string
      default_value: Record<string, never>
      enums: string[]
      format: string
      id: string
      identity_generation: Record<string, never>
      is_generated: boolean
      is_identity: boolean
      is_nullable: boolean
      is_unique: boolean
      is_updatable: boolean
      name: string
      ordinal_position: number
      schema: string
      table: string
      table_id: number
    }
    PostgresColumnPrivileges: {
      column_id: string
      column_name: string
      privileges: components['schemas']['ColumnPrivilege'][]
      relation_name: string
      relation_schema: string
    }
    PostgresConfigResponse: {
      effective_cache_size?: string
      logical_decoding_work_mem?: string
      maintenance_work_mem?: string
      max_connections?: number
      max_locks_per_transaction?: number
      max_parallel_maintenance_workers?: number
      max_parallel_workers?: number
      max_parallel_workers_per_gather?: number
      max_replication_slots?: number
      max_slot_wal_keep_size?: string
      max_standby_archive_delay?: string
      max_standby_streaming_delay?: string
      max_wal_senders?: number
      max_wal_size?: string
      max_worker_processes?: number
      /** @enum {string} */
      session_replication_role?: 'origin' | 'replica' | 'local'
      shared_buffers?: string
      statement_timeout?: string
      track_activity_query_size?: string
      track_commit_timestamp?: boolean
      wal_keep_size?: string
      wal_sender_timeout?: string
      work_mem?: string
    }
    /**
     * @description Postgres engine version. If not provided, the latest version will be used.
     * @enum {string}
     */
    PostgresEngine: '15' | '17-oriole'
    PostgresExtension: {
      comment: string | null
      default_version: string
      installed_version: string | null
      name: string
      schema: string | null
    }
    PostgresForeignTable: {
      columns?: components['schemas']['PostgresColumn'][]
      comment: string | null
      id: number
      name: string
      schema: string
    }
    PostgresFunction: {
      argument_types: string
      /** @enum {string} */
      behavior: 'VOLATILE' | 'STABLE' | 'IMMUTABLE'
      complete_statement: string
      config_params: Record<string, never> | null
      definition: string
      id: number
      identity_argument_types: string
      language: string
      name: string
      return_type: string
      schema: string
      security_definer: boolean
    }
    PostgresMaterializedView: {
      columns?: components['schemas']['PostgresColumn'][]
      comment: string | null
      id: number
      is_populated: boolean
      name: string
      schema: string
    }
    PostgresPolicy: {
      /** @enum {string} */
      action: 'PERMISSIVE' | 'RESTRICTIVE'
      check: string | null
      /** @enum {string} */
      command: 'SELECT' | 'INSERT' | 'UPDATE' | 'DELETE' | 'ALL'
      definition: string | null
      id: number
      name: string
      roles: string[]
      schema: string
      table: string
      table_id: number
    }
    PostgresPublication: {
      id: number
      name: string
      owner: string
      publish_delete: boolean
      publish_insert: boolean
      publish_truncate: boolean
      publish_update: boolean
      tables: components['schemas']['Table'][] | null
    }
    PostgresSchema: {
      id: number
      name: string
      owner: string
    }
    PostgresTable: {
      bytes: number
      columns?: components['schemas']['PostgresColumn'][]
      comment: string | null
      dead_rows_estimate: number
      id: number
      live_rows_estimate: number
      name: string
      primary_keys: components['schemas']['PrimaryKey'][]
      relationships: components['schemas']['Relationship'][]
      /** @enum {string} */
      replica_identity: 'DEFAULT' | 'INDEX' | 'FULL' | 'NOTHING'
      rls_enabled: boolean
      rls_forced: boolean
      schema: string
      size: string
    }
    PostgrestConfigResponse: {
      db_anon_role: string
      db_extra_search_path: string
      db_schema: string
      jwt_secret: string
      max_rows: number
      role_claim_key: string
    }
    PostgresTrigger: {
      /** @enum {string} */
      activation: 'AFTER' | 'BEFORE'
      condition: string | null
      /** @enum {string} */
      enabled_mode: 'ORIGIN' | 'REPLICA' | 'ALWAYS' | 'DISABLED'
      events: string[]
      function_args: string[]
      function_name: string
      function_schema: string
      id: number
      name: string
      /** @enum {string} */
      orientation: 'ROW' | 'STATEMENT'
      schema: string
      table: string
      table_id: number
    }
    PostgresType: {
      comment: string | null
      enums: string[]
      format: string
      id: number
      name: string
      schema: string
    }
    PostgresView: {
      columns?: components['schemas']['PostgresColumn'][]
      comment: string | null
      id: number
      is_updatable: boolean
      name: string
      schema: string
    }
    PreviewProjectTransferResponse: {
      errors: components['schemas']['PreviewTransferInfo'][]
      has_access_to_target_organization: boolean
      has_permissions_on_source_organization: boolean
      members_exceeding_free_project_limit: components['schemas']['MemberExceedingFreeProjectLimit'][]
      source_project_eligible: boolean
      source_subscription_plan: components['schemas']['BillingPlanId']
      target_organization_eligible: boolean | null
      target_organization_has_free_project_slots: boolean | null
      target_subscription_plan: components['schemas']['BillingPlanId']
      valid: boolean
      warnings: components['schemas']['PreviewTransferInfo'][]
    }
    PreviewTransferInfo: {
      key: string
      message: string
    }
    PrimaryKey: {
      name: string
      schema: string
      table_id: number
      table_name: string
    }
    Profile: {
      first_name: string
      gotrue_id: string
      id: number
      last_name: string
      username: string
    }
    ProfileResponse: {
      auth0_id: string
      disabled_features: (
        | 'organizations:create'
        | 'organizations:delete'
        | 'organization_members:create'
        | 'organization_members:delete'
        | 'projects:create'
        | 'projects:transfer'
        | 'project_auth:all'
        | 'project_storage:all'
        | 'project_edge_function:all'
        | 'profile:update'
        | 'billing:account_data'
        | 'billing:credits'
        | 'billing:invoices'
        | 'billing:payment_methods'
        | 'realtime:all'
      )[]
      first_name: string
      free_project_limit: number
      gotrue_id: string
      id: number
      is_alpha_user: boolean
      last_name: string
      mobile: string
      primary_email: string
      username: string
    }
    /** @enum {string} */
    project_status:
      | 'INACTIVE'
      | 'ACTIVE_HEALTHY'
      | 'ACTIVE_UNHEALTHY'
      | 'COMING_UP'
      | 'UNKNOWN'
      | 'GOING_DOWN'
      | 'INIT_FAILED'
      | 'REMOVED'
      | 'RESTORING'
      | 'UPGRADING'
      | 'PAUSING'
      | 'RESTORE_FAILED'
      | 'RESTARTING'
      | 'PAUSE_FAILED'
      | 'RESIZING'
    /** @enum {string} */
    ProjectAddonPricingInterval: 'monthly' | 'hourly'
    ProjectAddonsResponse: {
      available_addons: components['schemas']['AvailableAddonResponse'][]
      ref: string
      selected_addons: components['schemas']['SelectedAddonResponse'][]
    }
    /** @enum {string} */
    ProjectAddonType:
      | 'custom_domain'
      | 'compute_instance'
      | 'pitr'
      | 'ipv4'
      | 'auth_mfa_phone'
      | 'auth_mfa_web_authn'
      | 'log_drain'
    /** @enum {string} */
    ProjectAddonVariantPricingType: 'fixed' | 'usage'
    ProjectAddonVariantResponse: {
      identifier: components['schemas']['AddonVariantId']
      meta?: Record<string, never>
      name: string
      price: number
      price_description: string
      price_interval: components['schemas']['ProjectAddonPricingInterval']
      price_type: components['schemas']['ProjectAddonVariantPricingType']
    }
    ProjectAllocation: {
      hours?: number
      name: string
      ref: string
      usage: number
    }
    ProjectAppConfigResponse: {
      db_schema: string
      endpoint: string
    }
    ProjectClonedResponse: {
      source_project_ref: string
      target_disk_size_gb: number
      target_instance_size: string
      target_project_ref: string
    }
    ProjectClonedStatusResponse: {
      cloned_from: Record<string, never>
      clones: components['schemas']['TargetCloneStatus'][]
      id: number
      ref: string
    }
    ProjectCreationVersionInfo: {
      postgres_engine: components['schemas']['PostgresEngine']
      release_channel: components['schemas']['ReleaseChannel']
      version: string
    }
    ProjectDatabase: {
      cloud_provider: string
      disk_last_modified_at?: string
      disk_throughput_mbps?: number
      /** @enum {string} */
      disk_type?: 'gp3' | 'io2'
      disk_volume_size_gb?: number
      identifier: string
      infra_compute_size?: components['schemas']['DbInstanceSize']
      region: string
      status: components['schemas']['database_status']
      type: components['schemas']['database_type']
    }
    ProjectDetailResponse: {
      cloud_provider: string
      connectionString: string
      db_host: string
      dbVersion?: string
      id: number
      infra_compute_size?: components['schemas']['DbInstanceSize']
      inserted_at: string
      is_branch_enabled: boolean
      is_physical_backups_enabled: boolean
      lastDatabaseResizeAt?: string
      maxDatabasePreprovisionGb?: number
      name: string
      organization_id: number
      parent_project_ref?: string
      ref: string
      region: string
      restUrl: string
      /** @enum {string} */
      status:
        | 'INACTIVE'
        | 'ACTIVE_HEALTHY'
        | 'ACTIVE_UNHEALTHY'
        | 'COMING_UP'
        | 'UNKNOWN'
        | 'GOING_DOWN'
        | 'INIT_FAILED'
        | 'REMOVED'
        | 'RESTORING'
        | 'UPGRADING'
        | 'PAUSING'
        | 'RESTORE_FAILED'
        | 'RESTARTING'
        | 'PAUSE_FAILED'
        | 'RESIZING'
      subscription_id: string
      volumeSizeGb?: number
    }
    ProjectInfo: {
      cloud_provider: string
      disk_volume_size_gb?: number
      id: number
      infra_compute_size?: components['schemas']['DbInstanceSize']
      inserted_at: string | null
      is_branch_enabled: boolean
      is_physical_backups_enabled: boolean | null
      name: string
      organization_id: number
      organization_slug: string
      preview_branch_refs: string[]
      ref: string
      region: string
      status: string
      subscription_id: string | null
    }
    ProjectIntegrationConnection: {
      added_by: {
        primary_email?: string
        username?: string
      }
      id: string
      inserted_at: string
      organization_integration_id: string
      supabase_project_ref: string
      updated_at: string
    }
    ProjectLintMetadata: {
      entity?: string
      fkey_columns?: number[]
      fkey_name?: string
      name?: string
      schema?: string
      /** @enum {string} */
      type?: 'table' | 'view' | 'auth' | 'function' | 'extension'
    }
    ProjectLintResponse: {
      cache_key: string
      categories: ('PERFORMANCE' | 'SECURITY')[]
      description: string
      detail: string
      facing: string
      /** @enum {string} */
      level: 'ERROR' | 'WARN' | 'INFO'
      metadata: components['schemas']['ProjectLintMetadata'] | null
      /** @enum {string} */
      name:
        | 'unindexed_foreign_keys'
        | 'auth_users_exposed'
        | 'auth_rls_initplan'
        | 'no_primary_key'
        | 'unused_index'
        | 'multiple_permissive_policies'
        | 'policy_exists_rls_disabled'
        | 'rls_enabled_no_policy'
        | 'duplicate_index'
        | 'security_definer_view'
        | 'function_search_path_mutable'
        | 'rls_disabled_in_public'
        | 'extension_in_public'
        | 'rls_references_user_metadata'
        | 'materialized_view_in_api'
        | 'foreign_table_in_api'
        | 'unsupported_reg_types'
        | 'auth_otp_long_expiry'
        | 'auth_otp_short_length'
        | 'ssl_not_enforced'
        | 'network_restrictions_not_set'
        | 'password_requirements_min_length'
        | 'pitr_not_enabled'
      remediation: Record<string, never>
      title: string
    }
    ProjectRefResponse: {
      id: number
      name: string
      ref: string
    }
    ProjectResourceWarningsResponse: {
      /** @enum {string|null} */
      auth_email_offender: 'critical' | 'warning' | null
      /** @enum {string|null} */
      auth_rate_limit_exhaustion: 'critical' | 'warning' | null
      /** @enum {string|null} */
      auth_restricted_email_sending: 'critical' | 'warning' | null
      /** @enum {string|null} */
      cpu_exhaustion: 'critical' | 'warning' | null
      /** @enum {string|null} */
      disk_io_exhaustion: 'critical' | 'warning' | null
      /** @enum {string|null} */
      disk_space_exhaustion: 'critical' | 'warning' | null
      is_readonly_mode_enabled: boolean
      /** @enum {string|null} */
      memory_and_swap_exhaustion: 'critical' | 'warning' | null
      /** @enum {string|null} */
      need_pitr: 'critical' | 'warning' | null
      project: string
    }
    ProjectResponse: {
      cloud_provider: string
      db_dns_name: string
      db_host: string
      db_name: string
      db_port: string
      db_user: string
      id: number
      inserted_at: string
      jwt_secret: string
      name: string
      ref: string
      region: string
      services?: components['schemas']['ServiceResponse'][]
      ssl_enforced: boolean
      status: string
    }
    ProjectSensitivityResponse: {
      is_sensitive: boolean
    }
    ProjectServiceApiKeyResponse: {
      api_key: string
      name: string
      tags: string
    }
    ProjectSettingsResponse: {
      app_config?: components['schemas']['ProjectAppConfigResponse']
      cloud_provider: string
      db_dns_name: string
      db_host: string
      db_ip_addr_config: string
      db_name: string
      db_port: number
      db_user: string
      inserted_at: string
      is_sensitive?: boolean
      jwt_secret?: string
      name: string
      ref: string
      region: string
      service_api_keys?: components['schemas']['ProjectServiceApiKeyResponse'][]
      ssl_enforced: boolean
      status: string
    }
    ProjectUnpauseVersionInfo: {
      /** @enum {string} */
      postgres_engine: '13' | '14' | '15' | '17' | '17-oriole'
      /** @enum {string} */
      release_channel: 'internal' | 'alpha' | 'beta' | 'ga' | 'withdrawn' | 'preview'
      version: string
    }
    ProjectWithDatabases: {
      databases: components['schemas']['ProjectDatabase'][]
      is_branch: boolean
      name: string
      ref: string
      region: string
      status: components['schemas']['project_status']
    }
    PublicUrlOptions: {
      download?: boolean
      downloadName?: string
      transform?: components['schemas']['StorageObjectTransformOptions']
    }
    PublicUrlResponse: {
      publicUrl: string
    }
    PutOAuthAppResponse: {
      client_id: string
      client_secret_alias: string
      created_at: string
      icon?: string
      id: string
      name: string
      redirect_uris: string[]
      website: string
    }
    RealtimeConfigResponseDto: {
      /** @description Sets connection pool size for Realtime Authorization */
      connection_pool: number | null
      /** @description Sets maximum number of bytes per second rate per channel limit */
      max_bytes_per_second: number | null
      /** @description Sets maximum number of channels per client rate limit */
      max_channels_per_client: number | null
      /** @description Sets maximum number of concurrent users rate limit */
      max_concurrent_users: number | null
      /** @description Sets maximum number of events per second rate per channel limit */
      max_events_per_second: number | null
      /** @description Sets maximum number of joins per second rate limit */
      max_joins_per_second: number | null
      /** @description Whether to only allow private channels */
      private_only: boolean | null
    }
    Relationship: {
      constraint_name: string
      id: number
      source_column_name: string
      source_schema: string
      source_table_name: string
      target_column_name: string
      target_table_name: string
      target_table_schema: string
    }
    /**
     * @description Release channel. If not provided, GA will be used.
     * @enum {string}
     */
    ReleaseChannel: 'internal' | 'alpha' | 'beta' | 'ga' | 'withdrawn' | 'preview'
    ReplicationPipelinesResponse: {
      pipelines: {
        config: {
          config: {
            max_fill_secs: number
            max_size: number
          }
        }
        id: number
        publication_name: string
        replicator_id: number
        sink_id: number
        sink_name: string
        source_id: number
        source_name: string
        tenant_id: string
      }[]
    }
    ReplicationPipelinesStatusResponse: {
      pipeline_id: number
      status: string
    }
    ReplicationPublicationsResponse: {
      publications: {
        name: string
        tables: {
          name: string
          schema: string
        }[]
      }[]
    }
    ReplicationSinksResponse: {
      sinks: {
        config: {
          big_query: {
            dataset_id: string
            project_id: string
            service_account_key: string
          }
        }
        id: number
        name: string
        tenant_id: string
      }[]
    }
    ReplicationSourcesResponse: {
      sources: {
        config: {
          postgres: {
            host: string
            name: string
            port: number
            slot_name: string
            username: string
          }
        }
        id: number
        name: string
        tenant_id: string
      }[]
    }
    ReplicationTablesResponse: {
      tables: {
        name: string
        schema: string
      }[]
    }
    ResetPasswordBody: {
      email: string
      redirectTo?: string
    }
    ResizeBody: {
      volume_size_gb: number
    }
    RestartProjectBodyDto: {
      database_identifier?: string
    }
    RestartServiceRequest: {
      database_identifier?: string
      region: string
      services: (
        | 'adminapi'
        | 'api-gateway'
        | 'envoy'
        | 'functions'
        | 'gotrue'
        | 'kong'
        | 'pgbouncer'
        | 'pgsodium'
        | 'postgresql'
        | 'postgrest'
        | 'realtime'
        | 'storage'
        | 'walg'
        | 'autoshutdown'
      )[]
      source_notification_id?: string
    }
    RestartServicesBody: {
      restartRequest: components['schemas']['RestartServiceRequest']
    }
    RestoreCancellation: Record<string, never>
    RestoreLogicalBackupBody: {
      id: number
    }
    RestorePhysicalBackupBody: {
      id: number
      recovery_time_target: string
    }
    RevokeAuthorizedOAuthAppResponse: {
      authorized_at?: string
      icon?: string
      id: string
      name: string
      website: string
    }
    RevokeColumnPrivilegesBody: {
      column_id: string
      grantee: string
      /** @enum {string} */
      privilege_type: 'ALL' | 'SELECT' | 'INSERT' | 'UPDATE' | 'REFERENCES'
    }
    RunQueryBody: {
      query: string
    }
    ScheduledPlanChange: {
      /** Format: date-time */
      at: string
      target_plan: components['schemas']['BillingPlanId']
      usage_billing_enabled: boolean
    }
    SearchProfileBody: {
      keywords: string
    }
    SelectedAddonResponse: {
      type: components['schemas']['ProjectAddonType']
      variant: components['schemas']['ProjectAddonVariantResponse']
    }
    SendDocsFeedbackBody: {
      feedback?: string
      isHelpful: boolean
      page: string
      team?: string
      title: string
    }
    SendExitSurveyBody: {
      additionalFeedback?: string
      exitAction?: string
      orgSlug?: string
      projectRef?: string
      reasons: string
    }
    SendFeedbackBody: {
      additionalRedirectUrls?: string
      affectedServices?: string
      allowSupportAccess?: boolean
      browserInformation?: string
      category: string
      library?: string
      message: string
      organizationSlug?: string
      pathname?: string
      projectRef?: string
      severity?: string
      siteUrl?: string
      subject?: string
      tags: string[]
      urlToAirTable?: string
      verified?: boolean
    }
    SendFeedbackResponse: {
      result: string
    }
    SendUpgradeSurveyBody: {
      additionalFeedback?: string
      currentPlan?: string
      orgSlug?: string
      prevPlan?: string
      reasons: string[]
    }
    ServiceApiKey: {
      api_key_encrypted?: string
      name: string
      tags: string
    }
    ServiceApiKeyResponse: {
      api_key?: string
      api_key_encrypted?: string
      name: string
      tags: string
    }
    ServiceResponse: {
      app: {
        id?: number
        name?: string
      }
      app_config: Record<string, never>
      id: number
      name: string
      service_api_keys: components['schemas']['ServiceApiKeyResponse'][]
    }
    ServiceVersions: {
      gotrue?: string
      postgrest?: string
      'supabase-postgres': string
    }
    SettingsResponse: {
      project: components['schemas']['ProjectResponse']
      services: components['schemas']['ServiceResponse'][]
    }
    SetupIntentResponse: {
      client_secret: string
      payment_method: Record<string, never>
    }
    SignedUrlOptions: {
      download?: boolean
      downloadName?: string
      transform?: components['schemas']['StorageObjectTransformOptions']
    }
    SignedUrlResponse: {
      signedUrl: string
    }
    SignedUrlsOptions: {
      download?: boolean
      downloadName?: string
    }
    SignedUrlsResponse: {
      error: string | null
      path: string | null
      signedUrl: string
    }
    SignUpBody: {
      email: string
      password: string
      redirectTo?: string
    }
    StorageBucket: {
      created_at: string
      id: string
      name: string
      owner: string
      public: boolean
      updated_at: string
    }
    StorageConfigResponse: {
      features: components['schemas']['StorageFeatures']
      /** Format: int64 */
      fileSizeLimit: number
    }
    StorageFeatureImageTransformation: {
      enabled: boolean
    }
    StorageFeatures: {
      imageTransformation: components['schemas']['StorageFeatureImageTransformation']
      s3Protocol: components['schemas']['StorageFeatureS3Protocol']
    }
    StorageFeatureS3Protocol: {
      enabled: boolean
    }
    StorageObject: {
      bucket_id: string
      buckets: components['schemas']['StorageBucket']
      created_at: string
      id: string
      last_accessed_at: string
      metadata: Record<string, never>
      name: string
      owner: string
      updated_at: string
    }
    StorageObjectSearchOptions: {
      limit?: number
      offset?: number
      search?: string
      sortBy?: components['schemas']['StorageObjectSortBy']
    }
    StorageObjectSortBy: {
      column?: string
      order?: string
    }
    StorageObjectTransformOptions: {
      /** @enum {string} */
      format?: 'origin'
      height?: number
      quality?: number
      /** @enum {string} */
      resize?: 'cover' | 'contain' | 'fill'
      width?: number
    }
    SupavisorConfigResponse: {
      connectionString: string
      /** @enum {string} */
      database_type: 'PRIMARY' | 'READ_REPLICA'
      db_host: string
      db_name: string
      db_port: number
      db_user: string
      default_pool_size: number | null
      identifier: string
      is_using_scram_auth: boolean
      max_client_conn: number | null
      /** @enum {string} */
      pool_mode: 'transaction' | 'session'
    }
    SyncVercelEnvError: {
      message: string
    }
    Table: {
      id: number
      name: string
      schema: string
    }
    TargetClonedProject: {
      name: string
      ref: string
    }
    TargetCloneStatus: {
      inserted_at: string | null
      project_id: number
      /** @enum {string} */
      status: 'COMPLETED' | 'IN_PROGRESS' | 'FAILED' | 'REMOVED'
      target_project: components['schemas']['TargetClonedProject']
      target_project_id: number
      updated_at: string | null
    }
    TaxId: {
      country: string
      type: string
      value: string
    }
    TaxIdResponse: {
      tax_id: components['schemas']['TaxId'] | null
    }
    TelemetryCallFeatureFlagsResponseDto: {
      [key: string]: unknown
    }
    TelemetryEventBodyV2Dto: {
      action: string
      custom_properties: {
        [key: string]: unknown
      }
      groups?: {
        organization?: string
        project?: string
      }
      page_title: string
      page_url: string
      pathname: string
      ph: {
        language: string
        referrer: string
        search: string
        user_agent: string
        viewport_height: number
        viewport_width: number
      }
    }
    TelemetryFeatureFlagBodyDto: {
      feature_flag_name: string
      feature_flag_value?: unknown
    }
    TelemetryGroupsIdentityBody: {
      organization_slug?: string
      project_ref?: string
    }
    TelemetryGroupsResetBody: {
      reset_organization?: boolean
      reset_project?: boolean
    }
    TelemetryIdentifyBodyV2: {
      organization_slug?: string
      project_ref?: string
      user_id: string
    }
    TelemetryPageBodyV2Dto: {
      feature_flags?: {
        [key: string]: unknown
      }
      page_title: string
      page_url: string
      pathname: string
      ph: {
        language: string
        referrer: string
        search: string
        user_agent: string
        viewport_height: number
        viewport_width: number
      }
    }
    TelemetryPageLeaveBodyDto: {
      feature_flags?: {
        [key: string]: unknown
      }
      page_title: string
      page_url: string
      pathname: string
    }
    TransferOrganizationBody: {
      member_gotrue_id: string
      member_id: number
      org_id: number
    }
    TransferProjectBody: {
      target_organization_slug: string
    }
    UnpauseProjectAvailableVersionsResponse: {
      available_versions: components['schemas']['ProjectUnpauseVersionInfo'][]
    }
    UnpauseProjectBodyDto: {
      /**
       * @description Postgres engine version. If not provided, the latest version from the given release channel will be used.
       * @enum {string}
       */
      postgres_engine?: '15' | '17' | '17-oriole'
      /**
       * @description Release channel version. If not provided, GeneralAvailability will be used.
       * @enum {string}
       */
      release_channel?: 'internal' | 'alpha' | 'beta' | 'ga' | 'withdrawn' | 'preview'
    }
    UnpauseProjectResponse: {
      back_ups: components['schemas']['BackupId'][]
      cloud_provider: string
      id: number
      organization_id: number
      region: string
      status: string
      subscription_id: string
    }
    UpcomingInvoice: Record<string, never>
    UpdateAddonBody: {
      addon_type: components['schemas']['ProjectAddonType']
      addon_variant: components['schemas']['AddonVariantId']
    }
    UpdateBackendParams: {
      config?: Record<string, never>
      description?: string
      name?: string
    }
    UpdateColumnBody: {
      check?: string
      comment?: string
      defaultValue?: Record<string, never>
      /** @enum {string} */
      defaultValueFormat?: 'expression' | 'literal'
      dropDefault?: boolean
      id?: number
      /** @enum {string} */
      identityGeneration?: 'BY DEFAULT' | 'ALWAYS'
      isIdentity?: boolean
      isNullable?: boolean
      isUnique?: boolean
      name?: string
      type?: string
    }
    UpdateContentFolderBodyDto: {
      name: string
    }
    UpdateDiskAutoscaleConfig: {
      /**
       * @description Growth percentage for disk autoscaling
       * @default 50
       */
      growth_percent?: number
      /**
       * @description Maximum limit the disk size will grow to in GB
       * @default 61440
       */
      max_size_gb?: number
      /**
       * @description Minimum increment size for disk autoscaling in GB
       * @default 4
       */
      min_increment_gb?: number
    }
    UpdateFunctionBody: {
      args?: string[]
      /** @enum {string} */
      behavior?: 'VOLATILE' | 'STABLE' | 'IMMUTABLE'
      config_params?: Record<string, never>
      definition?: string
      id?: number
      language?: string
      name?: string
      return_type?: string
      schema?: string
      security_definer?: boolean
    }
    UpdateGitHubConnectionsBody: {
      branch_limit?: number
      supabase_changes_only?: boolean
      workdir?: string
    }
    UpdateGoTrueConfigBody: {
      API_MAX_REQUEST_DURATION?: number
      DB_MAX_POOL_SIZE?: number
      DISABLE_SIGNUP?: boolean
      EXTERNAL_ANONYMOUS_USERS_ENABLED?: boolean
      EXTERNAL_APPLE_ADDITIONAL_CLIENT_IDS?: string
      EXTERNAL_APPLE_CLIENT_ID?: string
      EXTERNAL_APPLE_ENABLED?: boolean
      EXTERNAL_APPLE_SECRET?: string
      EXTERNAL_AZURE_CLIENT_ID?: string
      EXTERNAL_AZURE_ENABLED?: boolean
      EXTERNAL_AZURE_SECRET?: string
      EXTERNAL_AZURE_URL?: string
      EXTERNAL_BITBUCKET_CLIENT_ID?: string
      EXTERNAL_BITBUCKET_ENABLED?: boolean
      EXTERNAL_BITBUCKET_SECRET?: string
      EXTERNAL_DISCORD_CLIENT_ID?: string
      EXTERNAL_DISCORD_ENABLED?: boolean
      EXTERNAL_DISCORD_SECRET?: string
      EXTERNAL_EMAIL_ENABLED?: boolean
      EXTERNAL_FACEBOOK_CLIENT_ID?: string
      EXTERNAL_FACEBOOK_ENABLED?: boolean
      EXTERNAL_FACEBOOK_SECRET?: string
      EXTERNAL_FIGMA_CLIENT_ID?: string
      EXTERNAL_FIGMA_ENABLED?: boolean
      EXTERNAL_FIGMA_SECRET?: string
      EXTERNAL_GITHUB_CLIENT_ID?: string
      EXTERNAL_GITHUB_ENABLED?: boolean
      EXTERNAL_GITHUB_SECRET?: string
      EXTERNAL_GITLAB_CLIENT_ID?: string
      EXTERNAL_GITLAB_ENABLED?: boolean
      EXTERNAL_GITLAB_SECRET?: string
      EXTERNAL_GITLAB_URL?: string
      EXTERNAL_GOOGLE_ADDITIONAL_CLIENT_IDS?: string
      EXTERNAL_GOOGLE_CLIENT_ID?: string
      EXTERNAL_GOOGLE_ENABLED?: boolean
      EXTERNAL_GOOGLE_SECRET?: string
      EXTERNAL_GOOGLE_SKIP_NONCE_CHECK?: boolean
      EXTERNAL_KAKAO_CLIENT_ID?: string
      EXTERNAL_KAKAO_ENABLED?: boolean
      EXTERNAL_KAKAO_SECRET?: string
      EXTERNAL_KEYCLOAK_CLIENT_ID?: string
      EXTERNAL_KEYCLOAK_ENABLED?: boolean
      EXTERNAL_KEYCLOAK_SECRET?: string
      EXTERNAL_KEYCLOAK_URL?: string
      EXTERNAL_LINKEDIN_OIDC_CLIENT_ID?: string
      EXTERNAL_LINKEDIN_OIDC_ENABLED?: boolean
      EXTERNAL_LINKEDIN_OIDC_SECRET?: string
      EXTERNAL_NOTION_CLIENT_ID?: string
      EXTERNAL_NOTION_ENABLED?: boolean
      EXTERNAL_NOTION_SECRET?: string
      EXTERNAL_PHONE_ENABLED?: boolean
      EXTERNAL_SLACK_CLIENT_ID?: string
      EXTERNAL_SLACK_ENABLED?: boolean
      EXTERNAL_SLACK_OIDC_CLIENT_ID?: string
      EXTERNAL_SLACK_OIDC_ENABLED?: boolean
      EXTERNAL_SLACK_OIDC_SECRET?: string
      EXTERNAL_SLACK_SECRET?: string
      EXTERNAL_SPOTIFY_CLIENT_ID?: string
      EXTERNAL_SPOTIFY_ENABLED?: boolean
      EXTERNAL_SPOTIFY_SECRET?: string
      EXTERNAL_TWITCH_CLIENT_ID?: string
      EXTERNAL_TWITCH_ENABLED?: boolean
      EXTERNAL_TWITCH_SECRET?: string
      EXTERNAL_TWITTER_CLIENT_ID?: string
      EXTERNAL_TWITTER_ENABLED?: boolean
      EXTERNAL_TWITTER_SECRET?: string
      EXTERNAL_WORKOS_CLIENT_ID?: string
      EXTERNAL_WORKOS_ENABLED?: boolean
      EXTERNAL_WORKOS_SECRET?: string
      EXTERNAL_WORKOS_URL?: string
      EXTERNAL_ZOOM_CLIENT_ID?: string
      EXTERNAL_ZOOM_ENABLED?: boolean
      EXTERNAL_ZOOM_SECRET?: string
      HOOK_CUSTOM_ACCESS_TOKEN_ENABLED?: boolean
      HOOK_CUSTOM_ACCESS_TOKEN_SECRETS?: string
      HOOK_CUSTOM_ACCESS_TOKEN_URI?: string
      HOOK_MFA_VERIFICATION_ATTEMPT_ENABLED?: boolean
      HOOK_MFA_VERIFICATION_ATTEMPT_SECRETS?: string
      HOOK_MFA_VERIFICATION_ATTEMPT_URI?: string
      HOOK_PASSWORD_VERIFICATION_ATTEMPT_ENABLED?: boolean
      HOOK_PASSWORD_VERIFICATION_ATTEMPT_SECRETS?: string
      HOOK_PASSWORD_VERIFICATION_ATTEMPT_URI?: string
      HOOK_SEND_EMAIL_ENABLED?: boolean
      HOOK_SEND_EMAIL_SECRETS?: string
      HOOK_SEND_EMAIL_URI?: string
      HOOK_SEND_SMS_ENABLED?: boolean
      HOOK_SEND_SMS_SECRETS?: string
      HOOK_SEND_SMS_URI?: string
      JWT_EXP?: number
      MAILER_ALLOW_UNVERIFIED_EMAIL_SIGN_INS?: boolean
      MAILER_AUTOCONFIRM?: boolean
      MAILER_OTP_EXP?: number
      MAILER_OTP_LENGTH?: number
      MAILER_SECURE_EMAIL_CHANGE_ENABLED?: boolean
      MAILER_SUBJECTS_CONFIRMATION?: string
      MAILER_SUBJECTS_EMAIL_CHANGE?: string
      MAILER_SUBJECTS_INVITE?: string
      MAILER_SUBJECTS_MAGIC_LINK?: string
      MAILER_SUBJECTS_REAUTHENTICATION?: string
      MAILER_SUBJECTS_RECOVERY?: string
      MAILER_TEMPLATES_CONFIRMATION_CONTENT?: string
      MAILER_TEMPLATES_EMAIL_CHANGE_CONTENT?: string
      MAILER_TEMPLATES_INVITE_CONTENT?: string
      MAILER_TEMPLATES_MAGIC_LINK_CONTENT?: string
      MAILER_TEMPLATES_REAUTHENTICATION_CONTENT?: string
      MAILER_TEMPLATES_RECOVERY_CONTENT?: string
      MFA_MAX_ENROLLED_FACTORS?: number
      MFA_PHONE_ENROLL_ENABLED?: boolean
      MFA_PHONE_MAX_FREQUENCY?: number
      MFA_PHONE_OTP_LENGTH?: number
      MFA_PHONE_TEMPLATE?: string
      MFA_PHONE_VERIFY_ENABLED?: boolean
      MFA_TOTP_ENROLL_ENABLED?: boolean
      MFA_TOTP_VERIFY_ENABLED?: boolean
      MFA_WEB_AUTHN_ENROLL_ENABLED?: boolean
      MFA_WEB_AUTHN_VERIFY_ENABLED?: boolean
      PASSWORD_HIBP_ENABLED?: boolean
      PASSWORD_MIN_LENGTH?: number
      /** @enum {string} */
      PASSWORD_REQUIRED_CHARACTERS?:
        | 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ:0123456789'
        | 'abcdefghijklmnopqrstuvwxyz:ABCDEFGHIJKLMNOPQRSTUVWXYZ:0123456789'
        | 'abcdefghijklmnopqrstuvwxyz:ABCDEFGHIJKLMNOPQRSTUVWXYZ:0123456789:!@#$%^&*()_+-=[]{};\'\\\\:"|<>?,./`~'
        | ''
      RATE_LIMIT_ANONYMOUS_USERS?: number
      RATE_LIMIT_EMAIL_SENT?: number
      RATE_LIMIT_OTP?: number
      RATE_LIMIT_SMS_SENT?: number
      RATE_LIMIT_TOKEN_REFRESH?: number
      RATE_LIMIT_VERIFY?: number
      REFRESH_TOKEN_ROTATION_ENABLED?: boolean
      SAML_ALLOW_ENCRYPTED_ASSERTIONS?: boolean
      SAML_ENABLED?: boolean
      SAML_EXTERNAL_URL?: string
      SECURITY_CAPTCHA_ENABLED?: boolean
      SECURITY_CAPTCHA_PROVIDER?: string
      SECURITY_CAPTCHA_SECRET?: string
      SECURITY_MANUAL_LINKING_ENABLED?: boolean
      SECURITY_REFRESH_TOKEN_REUSE_INTERVAL?: number
      SECURITY_UPDATE_PASSWORD_REQUIRE_REAUTHENTICATION?: boolean
      SESSIONS_INACTIVITY_TIMEOUT?: number
      SESSIONS_SINGLE_PER_USER?: boolean
      SESSIONS_TAGS?: string
      SESSIONS_TIMEBOX?: number
      SITE_URL?: string
      SMS_AUTOCONFIRM?: boolean
      SMS_MAX_FREQUENCY?: number
      SMS_MESSAGEBIRD_ACCESS_KEY?: string
      SMS_MESSAGEBIRD_ORIGINATOR?: string
      SMS_OTP_EXP?: number
      SMS_OTP_LENGTH?: number
      SMS_PROVIDER?: string
      SMS_TEMPLATE?: string
      SMS_TEST_OTP?: string
      SMS_TEST_OTP_VALID_UNTIL?: string
      SMS_TEXTLOCAL_API_KEY?: string
      SMS_TEXTLOCAL_SENDER?: string
      SMS_TWILIO_ACCOUNT_SID?: string
      SMS_TWILIO_AUTH_TOKEN?: string
      SMS_TWILIO_CONTENT_SID?: string
      SMS_TWILIO_MESSAGE_SERVICE_SID?: string
      SMS_TWILIO_VERIFY_ACCOUNT_SID?: string
      SMS_TWILIO_VERIFY_AUTH_TOKEN?: string
      SMS_TWILIO_VERIFY_MESSAGE_SERVICE_SID?: string
      SMS_VONAGE_API_KEY?: string
      SMS_VONAGE_API_SECRET?: string
      SMS_VONAGE_FROM?: string
      SMTP_ADMIN_EMAIL?: string
      SMTP_HOST?: string
      SMTP_MAX_FREQUENCY?: number
      SMTP_PASS?: string
      SMTP_PORT?: string
      SMTP_SENDER_NAME?: string
      SMTP_USER?: string
      URI_ALLOW_LIST?: string
    }
    UpdateGoTrueConfigHooksBody: {
      HOOK_CUSTOM_ACCESS_TOKEN_ENABLED?: boolean
      HOOK_CUSTOM_ACCESS_TOKEN_SECRETS?: string
      HOOK_CUSTOM_ACCESS_TOKEN_URI?: string
      HOOK_MFA_VERIFICATION_ATTEMPT_ENABLED?: boolean
      HOOK_MFA_VERIFICATION_ATTEMPT_SECRETS?: string
      HOOK_MFA_VERIFICATION_ATTEMPT_URI?: string
      HOOK_PASSWORD_VERIFICATION_ATTEMPT_ENABLED?: boolean
      HOOK_PASSWORD_VERIFICATION_ATTEMPT_SECRETS?: string
      HOOK_PASSWORD_VERIFICATION_ATTEMPT_URI?: string
      HOOK_SEND_EMAIL_ENABLED?: boolean
      HOOK_SEND_EMAIL_SECRETS?: string
      HOOK_SEND_EMAIL_URI?: string
      HOOK_SEND_SMS_ENABLED?: boolean
      HOOK_SEND_SMS_SECRETS?: string
      HOOK_SEND_SMS_URI?: string
    }
    UpdateMemberBody: {
      role_id: number
    }
    UpdateMemberRoleBody: {
      description?: string
      name: string
      role_scoped_projects: string[]
    }
    UpdateNotificationBodyV2: {
      id: string
      /** @enum {string} */
      status: 'new' | 'seen' | 'archived'
    }
    UpdateNotificationsBodyV1: {
      ids: string[]
    }
    UpdateOrganizationBodyDto: {
      additional_billing_emails?: string[]
      /** Format: email */
      billing_email?: string
      name?: string
      opt_in_tags?: 'AI_SQL_GENERATOR_OPT_IN'[]
    }
    UpdateOrganizationResponse: {
      billing_email?: string
      id: number
      name: string
      opt_in_tags: string[]
      slug: string
      stripe_customer_id: string
    }
    UpdatePasswordBody: {
      password: string
    }
    UpdatePgbouncerConfigBody: {
      default_pool_size?: number
      ignore_startup_parameters: string
      max_client_conn?: number | null
      pgbouncer_enabled: boolean
      /** @enum {string} */
      pool_mode: 'transaction' | 'session' | 'statement'
    }
    UpdatePolicyBody: {
      check?: string
      definition?: string
      id?: number
      name?: string
      roles?: string[]
    }
    UpdatePoolingConfigResponse: {
      default_pool_size?: number
      ignore_startup_parameters: string
      max_client_conn?: number | null
      pgbouncer_enabled: boolean
      /** @enum {string} */
      pgbouncer_status: 'COMING_DOWN' | 'COMING_UP' | 'DISABLED' | 'ENABLED' | 'RELOADING'
      /** @enum {string} */
      pool_mode: 'transaction' | 'session' | 'statement'
    }
    UpdatePostgresConfigBody: {
      effective_cache_size?: string
      logical_decoding_work_mem?: string
      maintenance_work_mem?: string
      max_connections?: number
      max_locks_per_transaction?: number
      max_parallel_maintenance_workers?: number
      max_parallel_workers?: number
      max_parallel_workers_per_gather?: number
      max_replication_slots?: number
      max_slot_wal_keep_size?: string
      max_standby_archive_delay?: string
      max_standby_streaming_delay?: string
      max_wal_senders?: number
      max_wal_size?: string
      max_worker_processes?: number
      restart_database?: boolean
      /** @enum {string} */
      session_replication_role?: 'origin' | 'replica' | 'local'
      shared_buffers?: string
      statement_timeout?: string
      track_activity_query_size?: string
      track_commit_timestamp?: boolean
      wal_keep_size?: string
      wal_sender_timeout?: string
      work_mem?: string
    }
    UpdatePostgrestConfigBody: {
      db_extra_search_path?: string
      db_pool?: number
      db_schema?: string
      max_rows?: number
    }
    UpdateProfileBody: {
      first_name: string
      last_name: string
    }
    UpdateProjectBody: {
      name: string
    }
    UpdatePublicationBody: {
      id?: number
      name?: string
      owner?: string
      publish_delete?: boolean
      publish_insert?: boolean
      publish_truncate?: boolean
      publish_update?: boolean
      tables?: string[] | null
    }
    UpdateRealtimeConfigBodyDto: {
      /** @description Sets connection pool size for Realtime Authorization */
      connection_pool?: number
      /** @description Sets maximum number of bytes per second rate per channel limit */
      max_bytes_per_second?: number
      /** @description Sets maximum number of channels per client rate limit */
      max_channels_per_client?: number
      /** @description Sets maximum number of concurrent users rate limit */
      max_concurrent_users?: number
      /** @description Sets maximum number of events per second rate per channel limit */
      max_events_per_second?: number
      /** @description Sets maximum number of joins per second rate limit */
      max_joins_per_second?: number
      /** @description Whether to only allow private channels */
      private_only?: boolean
    }
    UpdateSchemaBody: {
      name?: string
      owner?: string
    }
    UpdateSecretsConfigBody: {
      change_tracking_id: string
      jwt_secret: string
    }
    UpdateSecretsResponse: {
      message: string
    }
    UpdateStorageBucketBody: {
      allowed_mime_types: string[]
      file_size_limit: number
      public: boolean
    }
    UpdateStorageConfigBody: {
      features?: components['schemas']['StorageFeatures']
      /** Format: int64 */
      fileSizeLimit?: number
    }
    UpdateSubscriptionBody: {
      payment_method?: string
      /** @enum {string} */
      tier: 'tier_payg' | 'tier_pro' | 'tier_free' | 'tier_team' | 'tier_enterprise'
    }
    UpdateSupavisorConfigBody: {
      default_pool_size?: number | null
      /**
       * @deprecated
       * @description This field is deprecated and is ignored in this request
       * @enum {string}
       */
      pool_mode?: 'transaction' | 'session'
    }
    UpdateSupavisorConfigResponse: {
      default_pool_size: number | null
      /** @enum {string} */
      pool_mode: 'transaction' | 'session'
    }
    UpdateTableBody: {
      comment?: string
      id?: number
      name?: string
      /** @enum {string} */
      replica_identity?: 'DEFAULT' | 'INDEX' | 'FULL' | 'NOTHING'
      replica_identity_index?: string
      rls_enabled?: boolean
      rls_forced?: boolean
      schema?: string
    }
    UpdateTriggerBody: {
      /** @enum {string} */
      activation?: 'AFTER' | 'BEFORE'
      /** @enum {string} */
      enabled_mode?: 'ORIGIN' | 'REPLICA' | 'ALWAYS' | 'DISABLED'
      events?: ('INSERT' | 'UPDATE' | 'DELETE')[]
      function_args?: string[]
      function_name?: string
      function_schema?: string
      id?: number
      name?: string
      /** @enum {string} */
      orientation?: 'ROW' | 'STATEMENT'
      schema?: string
      table?: string
      table_id?: number
    }
    UpdateUserBody: {
      ban_duration?: string
    }
    UpdateUserReponse: {
      aud?: string
      banned_until?: string
      confirmation_sent_at?: string
      confirmation_token?: string
      confirmed_at?: string
      created_at?: string
      deleted_at?: string
      email?: string
      email_change?: string
      email_change_confirm_status?: number
      email_change_sent_at?: string
      email_change_token_current?: string
      email_change_token_new?: string
      email_confirmed_at?: string
      encrypted_password?: string
      id?: string
      instance_id?: string
      invited_at?: string
      is_anonymous?: boolean
      is_sso_user?: boolean
      is_super_admin?: boolean
      last_sign_in_at?: string
      phone?: string
      phone_change?: string
      phone_change_sent_at?: string
      phone_change_token?: string
      phone_confirmed_at?: string
      raw_app_meta_data?: Record<string, never>
      raw_user_meta_data?: Record<string, never>
      reauthentication_sent_at?: string
      reauthentication_token?: string
      recovery_sent_at?: string
      recovery_token?: string
      role?: string
      updated_at?: string
    }
    UpdateVercelConnectionsBody: {
      /** @enum {array} */
      env_sync_targets?: 'production' | 'preview' | 'development'
      public_env_var_prefix?: string
    }
    UpsertContentBodyDto: {
      content?: {
        [key: string]: unknown
      }
      description?: string
      /** Format: uuid */
      folder_id?: (null | (string | null)) | null
      id: string
      name: string
      owner_id: number
      project_id?: number
      /** @enum {string} */
      type: 'sql' | 'report' | 'log_sql'
      /** @enum {string} */
      visibility: 'user' | 'project' | 'org' | 'public'
    }
    UserBody: {
      aud?: string
      banned_until?: string
      confirmation_sent_at?: string
      confirmation_token?: string
      confirmed_at?: string
      created_at?: string
      deleted_at?: string
      email?: string
      email_change?: string
      email_change_confirm_status?: number
      email_change_sent_at?: string
      email_change_token_current?: string
      email_change_token_new?: string
      email_confirmed_at?: string
      encrypted_password?: string
      id?: string
      instance_id?: string
      invited_at?: string
      is_anonymous?: boolean
      is_sso_user?: boolean
      is_super_admin?: boolean
      last_sign_in_at?: string
      phone?: string
      phone_change?: string
      phone_change_sent_at?: string
      phone_change_token?: string
      phone_confirmed_at?: string
      raw_app_meta_data?: Record<string, never>
      raw_user_meta_data?: Record<string, never>
      reauthentication_sent_at?: string
      reauthentication_token?: string
      recovery_sent_at?: string
      recovery_token?: string
      role?: string
      updated_at?: string
    }
    UserContentFolder: {
      id: string
      name: string
      owner_id: number
      parent_id?: string | null
      project_id: number
    }
    UserContentObject: {
      content: Record<string, never>
      description?: string
      favorite?: boolean | null
      folder_id?: string | null
      id: string
      inserted_at: string
      last_updated_by?: number
      name: string
      owner_id: number
      project_id: number
      /** @enum {string} */
      type: 'sql' | 'report' | 'log_sql'
      updated_at: string
      /** @enum {string} */
      visibility: 'user' | 'project' | 'org' | 'public'
    }
    UserContentObjectMeta: {
      description?: string
      favorite?: boolean | null
      folder_id?: string | null
      id: string
      inserted_at: string
      last_updated_by?: number
      name: string
      owner_id: number
      project_id: number
      /** @enum {string} */
      type: 'sql' | 'report' | 'log_sql'
      updated_at: string
      /** @enum {string} */
      visibility: 'user' | 'project' | 'org' | 'public'
    }
    V1PostgrestConfigResponse: {
      db_extra_search_path: string
      /** @description If `null`, the value is automatically configured based on compute size. */
      db_pool: number | null
      db_schema: string
      max_rows: number
    }
    ValidateQueryBody: {
      query: string
    }
    ValidateQueryResponse: {
      valid: boolean
    }
    ValidateSpamBodyDto: {
      content: string
      subject: string
    }
    ValidateSpamResponse: {
      rules: components['schemas']['ValidateSpamRule'][]
    }
    ValidateSpamRule: {
      desc: string
      name: string
      score: number
    }
    VercelProjectDeployHooks: {
      createdAt?: number
      id: string
      name: string
      ref: string
      url: string
    }
    VercelProjectLink: {
      deployHooks: components['schemas']['VercelProjectDeployHooks'][]
      gitCredentialId?: string
      productionBranch?: string
      type?: string
    }
    VercelRedirectResponse: {
      url: string
    }
    WorkflowRunResponse: {
      branch_id: string
      check_run_id: number | null
      created_at: string
      git_config: Record<string, never> | null
      id: string
      /** @enum {string} */
      status:
        | 'CREATING_PROJECT'
        | 'RUNNING_MIGRATIONS'
        | 'MIGRATIONS_PASSED'
        | 'MIGRATIONS_FAILED'
        | 'FUNCTIONS_DEPLOYED'
        | 'FUNCTIONS_FAILED'
      updated_at: string
      workdir: string | null
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  GoTrueConfigController_getGoTrueConfig: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GoTrueConfigResponse']
        }
      }
      /** @description Failed to retrieve GoTrue config */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  GoTrueConfigController_updateGoTrueConfig: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateGoTrueConfigBody']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GoTrueConfigResponse']
        }
      }
      /** @description Failed to update GoTrue config */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  GoTrueConfigController_updateGoTrueConfigHooks: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateGoTrueConfigHooksBody']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GoTrueConfigResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update GoTrue config hooks */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AuthInviteController_sendInvite: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to send an invite to the given email */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  MagicLinkController_sendMagicLink: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to send a magic link to the given email */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  OtpController_sendOtp: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to send an OTP to the given phone number */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  RecoverController_sendRecover: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UserBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to send a recovery email to the given email */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TemplateController_getTemplate: {
    parameters: {
      query?: never
      header?: never
      path: {
        ref: string
        template:
          | 'confirmation'
          | 'email-change'
          | 'invite'
          | 'magic-link'
          | 'recovery'
          | 'reauthentication'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string
        }
      }
      /** @description Failed to retrieve GoTrue template */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  UsersController_createUser: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateUserBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateUserReponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to create user */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  UsersController_deleteUserById: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to delete user */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  UsersController_updateUserById: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateUserBody']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UpdateUserReponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update user with given ID */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  FactorsController_deleteFactors: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to delete factors */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ValidateController_validateSpam: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ValidateSpamBodyDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ValidateSpamResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to validate spam based on the given email content */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  CliLoginController_createCliLoginSession: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCliLoginSessionBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to create CLI login session */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  CliLoginController_getCliLoginSession: {
    parameters: {
      query?: {
        device_code?: string
      }
      header?: never
      path: {
        session_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to retrieve CLI login session */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  BackupsController_getBackups: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BackupsResponse']
        }
      }
      /** @description Failed to get project backups */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  BackupsController_downloadBackup: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DownloadBackupBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DownloadBackupResponse']
        }
      }
      /** @description Failed to download project backup */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  BackupsController_getDownloadableBackups: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DownloadableBackupsResponse']
        }
      }
      /** @description Failed to get project backups */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  BackupsController_enablePhysicalBackup: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to enable usage of physical backups */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  BackupsController_restorePointInTimeBackup: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PointInTimeRestoreBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to restore project to a previous point in time */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  BackupsController_restoreBackup: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RestoreLogicalBackupBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to restore project backup */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  BackupsController_restorePhysicalBackup: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RestorePhysicalBackupBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to restore project with physical backup */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  CloneController_getValidBackups: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CloneBackupsResponse']
        }
      }
      /** @description Failed to list available valid backups */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  CloneController_cloneCurrentProject: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CloneProjectDto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProjectClonedResponse']
        }
      }
      /** @description Failed to clone the current project */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  CloneController_cloneProjectStatus: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProjectClonedStatusResponse']
        }
      }
      /** @description Failed to retrieve clone project status */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  HooksController_enableHooks: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to enable Database Webhooks on the project */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  HooksController_getHookLogs: {
    parameters: {
      query: {
        id: number
        limit?: string
        offset?: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get hook logs with the given ID */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  SendFeedbackController_sendDocsFeedback: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SendDocsFeedbackBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SendFeedbackResponse']
        }
      }
      /** @description Failed to send feedback for docs */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  SendFeedbackController_sendExitSurvey: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SendExitSurveyBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SendFeedbackResponse']
        }
      }
      /** @description Failed to send exit survey */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  SendFeedbackController_sendFeedback: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SendFeedbackBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SendFeedbackResponse']
        }
      }
      /** @description Failed to send feedback */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  SendFeedbackController_sendUpgradeSurvey: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SendUpgradeSurveyBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SendFeedbackResponse']
        }
      }
      /** @description Failed to send upgrade survey */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  IntegrationsController_getUserInstallations: {
    parameters: {
      query: {
        /** @description Filter results by integration name. Optional */
        integration_name: unknown
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetUserOrganizationIntegrationResponse'][]
        }
      }
      /** @description Failed to get user's integrations */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  IntegrationsController_getUserInstallationForOrg: {
    parameters: {
      query?: never
      header?: never
      path: {
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetOrganizationIntegrationResponse'][]
        }
      }
      /** @description Failed to get integration with the given organization slug */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  GitHubAuthorizationsController_getGitHubAuthorization: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GitHubAuthorization']
        }
      }
      /** @description Failed to get GitHub authorization */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  GitHubAuthorizationsController_createGitHubAuthorization: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateGitHubAuthorizationBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to create GitHub authorization */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  GitHubBranchesController_listConnectionBranches: {
    parameters: {
      query?: {
        page?: number
        per_page?: number
      }
      header?: never
      path: {
        connectionId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>[]
        }
      }
      /** @description Failed to list GitHub connection branches */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  GitHubBranchesController_getConnectionBranch: {
    parameters: {
      query?: never
      header?: never
      path: {
        branchName: string
        connectionId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Failed to get GitHub connection branch */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  GitHubConnectionsController_listOrganizationGitHubConnections: {
    parameters: {
      query: {
        organization_id: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ListGitHubConnectionsResponse']
        }
      }
      /** @description Failed to list organization GitHub connections */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  GitHubConnectionsController_createGitHubConnection: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateGitHubConnectionsBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to create project connections */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  GitHubConnectionsController_deleteGitHubConnection: {
    parameters: {
      query?: never
      header?: never
      path: {
        connection_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to delete github integration project connection */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  GitHubConnectionsController_updateGitHubConnection: {
    parameters: {
      query?: never
      header?: never
      path: {
        connection_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateGitHubConnectionsBody']
      }
    }
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update GitHub connection */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  GitHubRepositoriesController_listRepositories: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get GitHub repositories for user */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  VercelIntegrationController_createVercelIntegration: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateVercelIntegrationBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to create vercel integration */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  VercelIntegrationController_removeVercelIntegration: {
    parameters: {
      query?: never
      header?: never
      path: {
        organization_integration_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to remove Vercel organization integration with the given id */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  VercelConnectionsController_createVercelConnection: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateVercelConnectionsBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateVercelConnectionResponse']
        }
      }
      /** @description Failed to create project connection */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  VercelConnectionsController_deleteVercelConnection: {
    parameters: {
      query?: never
      header?: never
      path: {
        connection_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DeleteVercelConnectionResponse']
        }
      }
      /** @description Failed to delete vercel integration project connection */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  VercelConnectionsController_updateVercelConnection: {
    parameters: {
      query?: never
      header?: never
      path: {
        connection_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateVercelConnectionsBody']
      }
    }
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update Vercel connection */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  VercelConnectionsController_syncVercelConnectionEnvironments: {
    parameters: {
      query?: never
      header?: never
      path: {
        connection_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to sync supabase project envs with given connection id */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  VercelConnectionsController_getVercelConnections: {
    parameters: {
      query?: never
      header?: never
      path: {
        organization_integration_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetVercelConnections'][]
        }
      }
      /** @description Failed to get installed vercel connections for the given organization integration */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  VercelProjectController_getVercelProjects: {
    parameters: {
      query: {
        from?: string
        limit: string
        search?: string
      }
      header?: never
      path: {
        organization_integration_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetVercelProjectsResponse']
        }
      }
      /** @description Failed to get vercel projects with the given organization integration id */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  NotificationsController_getNotificationsV2: {
    parameters: {
      query?: {
        limit?: string
        offset?: string
        org_slug?: string
        priority?: 'Critical' | 'Warning' | 'Info'
        project_ref?: string
        status?: 'new' | 'seen' | 'archived'
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NotificationResponseV2'][]
        }
      }
      /** @description Failed to retrieve notifications */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  NotificationsController_deleteNotifications: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateNotificationsBodyV1']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NotificationResponseV1'][]
        }
      }
      /** @description Failed to delete notifications */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  NotificationsController_updateNotificationsV2: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateNotificationBodyV2'][]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NotificationResponseV2'][]
        }
      }
      /** @description Failed to update notifications */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  NotificationsController_archiveAllNotifications: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to archive all notifications */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  NotificationsController_getNotificationsSummary: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NotificationsSummary']
        }
      }
    }
  }
  OAuthAuthorizationsController_getAuthorizationRequest: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Oauth authorization id */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetOAuthAuthorizationResponse']
        }
      }
    }
  }
  OrganizationsController_getOrganizations: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OrganizationResponse'][]
        }
      }
      /** @description Failed to retrieve user's organizations */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  OrganizationsController_createOrganizationWithTier: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateOrganizationBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OrganizationResponse']
        }
      }
      /** @description Unexpected error creating an organization */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  OrganizationSlugController_getOrganization: {
    parameters: {
      query?: never
      header?: never
      path: {
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OrganizationSlugResponse']
        }
      }
    }
  }
  OrganizationSlugController_deleteOrganization: {
    parameters: {
      query?: never
      header?: never
      path: {
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to delete organization */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  OrganizationSlugController_updateOrganization: {
    parameters: {
      query?: never
      header?: never
      path: {
        slug: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateOrganizationBodyDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UpdateOrganizationResponse']
        }
      }
      /** @description Failed to update organization */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  OrgAuditLogsController_getAuditLogs: {
    parameters: {
      query?: {
        /** @description End timestamp */
        iso_timestamp_end?: string
        /** @description Start timestamp */
        iso_timestamp_start?: string
      }
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AuditLogsResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get an organization's audit logs */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  OrganizationSlugController_getAvailableImageVersions: {
    parameters: {
      query?: never
      header?: never
      path: {
        slug: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OrganizationSlugAvailableVersionsBodyDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OrganizationSlugAvailableVersionsResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to determine available Postgres versions */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  OrgCreditsController_createTopUp: {
    parameters: {
      query?: never
      header?: never
      path: {
        slug: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreditsTopUpRequestDto']
      }
    }
    responses: {
      /** @description Top up has been successfully created. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreditsTopUpResponseDto']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to top up credit balance */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  OrgInvoicesController_getInvoices: {
    parameters: {
      query: {
        limit: string
        offset: string
      }
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Invoice'][]
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to retrieve invoices */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  OrgInvoicesController_countInvoices: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          /** @description total count value */
          'X-Total-Count'?: number
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to retrieve the total count of invoices */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  OrgInvoicesController_getInvoice: {
    parameters: {
      query?: never
      header?: never
      path: {
        invoiceId: string
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Invoice']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to retrieve invoice */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  OrgInvoicesController_getInvoicePaymentLink: {
    parameters: {
      query?: never
      header?: never
      path: {
        invoiceId: string
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['InvoicePaymentLinkResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to retrieve invoice payment link */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  OrgInvoicesController_getUpcomingInvoice: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UpcomingInvoice']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to retrieve upcoming invoice */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  OrgPlansController_getAvailablePlans: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PlansResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get subscription Plans */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  SubscriptionController_getSubscription: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetSubscriptionResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to retrieve subscription */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  SubscriptionController_updateSubscription: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSubscriptionBody']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update subscription change */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  SubscriptionController_previewSubscriptionChange: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSubscriptionBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to preview subscription changes */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  CustomerController_getCustomer: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CustomerResponse']
        }
      }
      /** @description Failed to retrieve the Billing customer */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  updateCustomerV2: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['BillingCustomerUpdateBody']
      }
    }
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update the billing customer */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  OrgDailyStatsController_getDailyStats: {
    parameters: {
      query: {
        endDate: string
        interval: string
        metric:
          | 'EGRESS'
          | 'DATABASE_SIZE'
          | 'STORAGE_SIZE'
          | 'MONTHLY_ACTIVE_USERS'
          | 'MONTHLY_ACTIVE_SSO_USERS'
          | 'FUNCTION_INVOCATIONS'
          | 'STORAGE_IMAGES_TRANSFORMED'
          | 'REALTIME_MESSAGE_COUNT'
          | 'REALTIME_PEAK_CONNECTIONS'
          | 'DISK_SIZE_GB_HOURS_GP3'
          | 'DISK_SIZE_GB_HOURS_IO2'
          | 'AUTH_MFA_PHONE'
          | 'AUTH_MFA_WEB_AUTHN'
          | 'LOG_DRAIN_EVENTS'
          | 'MONTHLY_ACTIVE_THIRD_PARTY_USERS'
          | 'DISK_THROUGHPUT_GP3'
          | 'DISK_IOPS_GP3'
          | 'DISK_IOPS_IO2'
          | 'COMPUTE_HOURS_BRANCH'
          | 'COMPUTE_HOURS_XS'
          | 'COMPUTE_HOURS_SM'
          | 'COMPUTE_HOURS_MD'
          | 'COMPUTE_HOURS_L'
          | 'COMPUTE_HOURS_XL'
          | 'COMPUTE_HOURS_2XL'
          | 'COMPUTE_HOURS_4XL'
          | 'COMPUTE_HOURS_8XL'
          | 'COMPUTE_HOURS_12XL'
          | 'COMPUTE_HOURS_16XL'
          | 'CUSTOM_DOMAIN'
          | 'PITR_7'
          | 'PITR_14'
          | 'PITR_28'
          | 'IPV4'
          | 'LOG_DRAIN'
        projectRef?: string
        startDate: string
      }
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Failed to get daily organization stats */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  OrgDailyStatsController_getDailyStatsCompute: {
    parameters: {
      query: {
        endDate: string
        projectRef?: string
        startDate: string
      }
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get daily organization stats for compute */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  OrgDocumentsController_getSoc2Type2ReportUrl: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OrgDocumentUrlResponse']
        }
      }
    }
  }
  OrgDocumentsController_getStandardSecurityQuestionnaireUrl: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OrgDocumentUrlResponse']
        }
      }
    }
  }
  MembersController_getMembers: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Member'][]
        }
      }
      /** @description Failed to retrieve organization's members */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  MembersController_deleteMember: {
    parameters: {
      query?: never
      header?: never
      path: {
        gotrue_id: string
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to remove organization member */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  MembersController_assignMemberRoleV2: {
    parameters: {
      query?: never
      header?: never
      path: {
        gotrue_id: string
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AssignMemberRoleBodyV2']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to assign organization member with new role */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  MembersController_UpdateMemberRole: {
    parameters: {
      query?: never
      header?: never
      path: {
        gotrue_id: string
        role_id: string
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateMemberRoleBody']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update organization member role */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  MembersController_deleteMemberRole: {
    parameters: {
      query?: never
      header?: never
      path: {
        gotrue_id: string
        role_id: string
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to remove organization member role */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  InvitationsController_getAllInvitations: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['InvitationResponse']
        }
      }
      /** @description Failed to get organization invitations */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  InvitationsController_createInvitation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateInvitationBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to create organization invitation */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  InvitationsController_deleteInvitation: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to delete organization invitation with given id */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  InvitationsController_getInvitationByToken: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
        token: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['InvitationByTokenResponse']
        }
      }
      /** @description Failed to get organization invitation by token */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  InvitationsController_acceptInvitationByToken: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
        token: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to accept organization invitation by token */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ReachedFreeProjectLimitController_getMembersWhoReachedFreeProjectLimit: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MemberWithFreeProjectLimit'][]
        }
      }
      /** @description Failed to retrieve organization members who have reached their free project limit */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  OAuthAppsController_listOAuthApps: {
    parameters: {
      query: {
        type: 'published' | 'authorized'
      }
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OAuthAppResponse'][]
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  OAuthAppsController_createOAuthApp: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateOAuthAppBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateOAuthAppResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  OAuthAppsController_updateOAuthApp: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
        slug: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateOAuthAppBody']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PutOAuthAppResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  OAuthAppsController_removeOAuthApp: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DeleteOAuthAppResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  OAuthAppsController_revokeAuthorizedOAuthApp: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RevokeAuthorizedOAuthAppResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  OrganizationOAuthAuthorizationsController_approveAuthorizationRequest: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Oauth authorization id */
        id: string
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApproveAuthorizationResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  OrganizationOAuthAuthorizationsController_declineAuthorizationRequest: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Oauth authorization id */
        id: string
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DeclineAuthorizationResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getPaymentMethodsV2: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaymentsResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get Stripe payment methods */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  PaymentsController_detachPaymentMethod: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DetachPaymentMethodBody']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to detach Stripe payment method */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  PaymentsController_markPaymentMethodAsDefault: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MarkDefaultPaymentMethodBody']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to mark payment method as default */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  SetupIntentOrgController_setUpPaymentMethod: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['HCaptchaBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SetupIntentResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to set up a payment method */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  OrganizationProjectsController_getOrganizationProjects: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OrganizationProjectsResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to retrieve projects */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  OrganizationRolesController_getAllRoles: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OrganizationRoleResponse']
        }
      }
      /** @description Failed to retrieve the organization's roles */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TaxIdsController_getTaxId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TaxIdResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to retrieve the organization's tax ID */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TaxIdsController_updateTaxId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateTaxIdBody']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TaxIdResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to create the tax ID */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TaxIdsController_deleteTaxId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to delete the tax ID */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TransferController_transferOrganization: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TransferOrganizationBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update owner */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  OrgUsageController_getOrgUsage: {
    parameters: {
      query?: {
        end?: string
        project_ref?: string
        start?: string
      }
      header?: never
      path: {
        /** @description Organization slug */
        slug: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OrgUsageResponse']
        }
      }
      /** @description Failed to get usage stats */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  OrganizationsController_getOrganizationByFlyOrganizationId: {
    parameters: {
      query?: never
      header?: never
      path: {
        fly_organization_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetOrganizationByFlyOrganizationIdResponse']
        }
      }
    }
  }
  ColumnPrivilegesController_getColumnPrivileges: {
    parameters: {
      query?: never
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresColumnPrivileges'][]
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to retrieve column privileges */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ColumnPrivilegesController_grantColumnPrivileges: {
    parameters: {
      query?: never
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GrantColumnPrivilegesBody'][]
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresColumnPrivileges'][]
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to grant column privileges */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ColumnPrivilegesController_revokeColumnPrivileges: {
    parameters: {
      query?: never
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RevokeColumnPrivilegesBody'][]
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresColumnPrivileges'][]
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to revoke column privileges */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ColumnsController_getColumns: {
    parameters: {
      query: {
        excluded_schemas: string
        included_schemas: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresColumn'][]
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get pg.columns */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ColumnsController_createColumn: {
    parameters: {
      query?: never
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateColumnBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresColumn']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to create pg.column */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ColumnsController_deleteColumn: {
    parameters: {
      query: {
        cascade?: string
        /** @description Column ID */
        id: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresColumn']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to delete pg.column with the given ID */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ColumnsController_updateColumn: {
    parameters: {
      query: {
        /** @description Column ID */
        id: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateColumnBody']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresColumn']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update pg.column with the given ID */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ExtensionsController_getExtensions: {
    parameters: {
      query?: never
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresExtension'][]
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get pg.extensions */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ExtensionsController_createExtension: {
    parameters: {
      query?: never
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateExtensionBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresExtension']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to create pg.extension */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ExtensionsController_deleteExtension: {
    parameters: {
      query: {
        /** @description Extension ID */
        id: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresExtension']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to delete pg.extension with the given ID */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ForeignTablesController_getForeignTables: {
    parameters: {
      query: {
        id: string
        include_columns: string
        limit: string
        offset: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresForeignTable'][]
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to retrieve database foreign tables */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  FunctionsController_getFunctions: {
    parameters: {
      query: {
        excluded_schemas: string
        included_schemas: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresFunction'][]
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get pg.functions */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  FunctionsController_createFunction: {
    parameters: {
      query?: never
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateFunctionBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresFunction']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to create pg.function */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  FunctionsController_deleteFunction: {
    parameters: {
      query: {
        /** @description Function ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresFunction']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to delete pg.function with the given ID */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  FunctionsController_updateFunction: {
    parameters: {
      query: {
        /** @description Function ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateFunctionBody']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresFunction']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update pg.function with the given ID */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  MaterializedViewsController_getMaterializedViews: {
    parameters: {
      query: {
        excluded_schemas: string
        id: string
        include_columns: string
        included_schemas: string
        limit: string
        offset: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresMaterializedView'][]
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to retrieve database materialized views */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  PoliciesController_getPolicies: {
    parameters: {
      query: {
        excluded_schemas: string
        included_schemas: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresPolicy'][]
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get pg.policies */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  PoliciesController_createPolicy: {
    parameters: {
      query?: never
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePolicyBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresPolicy']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to create pg.policy */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  PoliciesController_deletePolicy: {
    parameters: {
      query: {
        /** @description Policy ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresPolicy']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to delete pg.policy with the given ID */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  PoliciesController_updatePolicy: {
    parameters: {
      query: {
        /** @description Policy ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePolicyBody']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresPolicy']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update pg.policy with the given ID */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  PublicationsController_getPublications: {
    parameters: {
      query?: never
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresPublication'][]
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get pg.publications */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  PublicationsController_createPublication: {
    parameters: {
      query?: never
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePublicationBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresPublication']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to create pg.publication */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  PublicationsController_deletePublication: {
    parameters: {
      query: {
        /** @description Publication ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresPublication']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to delete pg.publication with the given ID */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  PublicationsController_updatePublication: {
    parameters: {
      query: {
        /** @description Publication ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePublicationBody']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresPublication']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update pg.publication with the given ID */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  QueryController_runQuery: {
    parameters: {
      query?: never
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RunQueryBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to run sql query */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  QueryController_formatQuery: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['FormatQueryBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string
        }
      }
      /** @description Failed to format sql query */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  QueryController_validateQuery: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ValidateQueryBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ValidateQueryResponse']
        }
      }
      /** @description Failed to validate sql query */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  SchemasController_getSchemas: {
    parameters: {
      query?: never
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresSchema'][]
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get pg.schemas */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  SchemasController_createSchema: {
    parameters: {
      query?: never
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateSchemaBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresSchema']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to create pg.schema */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  SchemasController_deleteSchema: {
    parameters: {
      query: {
        /** @description Schema ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresSchema']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to delete pg.schema with the given ID */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  SchemasController_updateSchema: {
    parameters: {
      query: {
        /** @description Schema ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSchemaBody']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresSchema']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update pg.schema with the given ID */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TablesController_getTables: {
    parameters: {
      query: {
        excluded_schemas: string
        /** @description Table ID */
        id?: string
        include_columns: string
        include_system_schemas: string
        included_schemas: string
        limit: string
        offset: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresTable'][]
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get pg.tables or pg.table with the given ID */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TablesController_createTable: {
    parameters: {
      query?: never
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateTableBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresTable']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to create pg.table */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TablesController_deleteTable: {
    parameters: {
      query: {
        cascade: boolean
        /** @description Table ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresTable']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to delete pg.table with the given ID */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TablesController_updateTable: {
    parameters: {
      query: {
        /** @description Table ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateTableBody']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresTable']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update pg.table with the given ID */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TriggersController_getTriggers: {
    parameters: {
      query: {
        excluded_schemas: string
        included_schemas: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresTrigger'][]
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get pg.triggers */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TriggersController_createTrigger: {
    parameters: {
      query?: never
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateTriggerBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresTrigger']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to create pg.trigger */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TriggersController_deleteTrigger: {
    parameters: {
      query: {
        /** @description Trigger ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresTrigger']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to delete pg.trigger with the given ID */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TriggersController_updateTrigger: {
    parameters: {
      query: {
        /** @description Trigger ID */
        id: number
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateTriggerBody']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresTrigger']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update pg.trigger with the given ID */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TypesController_getTypes: {
    parameters: {
      query: {
        excluded_schemas: string
        included_schemas: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresType'][]
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get pg.types */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ViewsController_getViews: {
    parameters: {
      query: {
        excluded_schemas: string
        id: string
        include_columns: string
        include_system_schemas: string
        included_schemas: string
        limit: string
        offset: string
      }
      header: {
        'x-connection-encrypted': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresView'][]
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to retrieve database views */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProfileController_getProfile: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProfileResponse']
        }
      }
      /** @description Failed to retrieve user's profile */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProfileController_createProfile: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProfileResponse']
        }
      }
      /** @description Failed to create user's profile */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProfileController_deleteProfile: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Forbidden action */
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to delete user's profile */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProfileController_updateProfile: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateProfileBody']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProfileResponse']
        }
      }
      /** @description Failed to update user's profile */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AccessTokensController_getAccessTokens: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AccessToken'][]
        }
      }
      /** @description Failed to get user's access tokens */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AccessTokensController_createAccessToken: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAccessTokenBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateAccessTokenResponse']
        }
      }
      /** @description Failed to create access token */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AccessTokensController_getAccessToken: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Access token ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AccessToken']
        }
      }
      /** @description Failed to get access token */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AccessTokensController_deleteAccessToken: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Access token ID */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AccessToken']
        }
      }
      /** @description Failed to delete access token */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  UserAuditLogsController_getAuditLogs: {
    parameters: {
      query?: {
        /** @description End timestamp */
        iso_timestamp_end?: string
        /** @description Start timestamp */
        iso_timestamp_start?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AuditLogsResponse']
        }
      }
      /** @description Failed to get a user's audit logs */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProfileController_auditAccountLogin: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  PasswordCheckController_checkPassword: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PasswordCheckBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PasswordCheckResponse']
        }
      }
      /** @description Failed to check password strength */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  PermissionsController_getPermissions: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AccessControlPermission'][]
        }
      }
      /** @description Failed to retrieve permissions */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  SearchProfileController_searchProfile: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SearchProfileBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Profile'][]
        }
      }
      /** @description Failed to search profiles with the given keywords */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProjectsController_getProjects: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProjectInfo'][]
        }
      }
    }
  }
  ProjectsController_createProject: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateProjectBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateProjectResponse']
        }
      }
    }
  }
  ProjectsResourceWarningsController_getProjectsResourceWarnings: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProjectResourceWarningsResponse'][]
        }
      }
    }
  }
  ProjectsRefController_getProject: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProjectDetailResponse']
        }
      }
    }
  }
  ProjectsRefController_deleteProject: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProjectRefResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProjectsRefController_updateProject: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateProjectBody']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProjectRefResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update project */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  FunctionInvocationLogsController_getStatus: {
    parameters: {
      query: {
        function_id: string
        interval: '5min' | '15min' | '1hr' | '1day' | '7day'
      }
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AnalyticsResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get project's function invocation statistics */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  FunctionRequestLogsController_getStatus: {
    parameters: {
      query: {
        function_id: string
        interval: '5min' | '15min' | '1hr' | '1day' | '7day'
      }
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AnalyticsResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get project's function request statistics */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  FunctionResourceLogsController_getStatus: {
    parameters: {
      query: {
        function_id: string
        interval: '5min' | '15min' | '1hr' | '1day' | '7day'
      }
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AnalyticsResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get project's function resource usage */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  LogsController_getApiPaths: {
    parameters: {
      query?: {
        iso_timestamp_end?: string
        iso_timestamp_start?: string
        sql?: string
      }
      header?: never
      path: {
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AnalyticsResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get project's logs */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  UsageApiController_getApiCounts: {
    parameters: {
      query: {
        interval: 'minutely' | 'hourly' | 'daily'
      }
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AnalyticsResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get project's usage api counts */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  UsageApiController_getApiRequestsCount: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AnalyticsResponse']
        }
      }
      /** @description Failed to get project's usage api requests count */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  LogDrainController_listLogDrains: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LFBackend'][]
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to fetch log drains */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  LogDrainController_createLogDrain: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateBackendParams']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LFBackend']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to create a log drain */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  LogDrainController_updateLogDrain: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
        /** @description Log drains token */
        token: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateBackendParams']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LFBackend']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update log drain */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  LogDrainController_deleteLogDrain: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
        /** @description Log drains token */
        token: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to delete a log drain */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'v1-list-all-warehouse-tokens': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LFAccessToken'][]
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to fetch warehouse access tokens */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'v1-create-a-warehouse-token': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LFAccessToken']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to create warehouse access token */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'v1-delete-a-warehouse-token': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to delete warehouse access token */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'v1-list-all-telemetry-collections': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LFSource'][]
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to fetch telemetry collections */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'v1-create-a-telemetry-collection': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LFSource']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to create telemetry collection */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'v1-get-a-telemetry-collection': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LFSource']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to fetch telemetry collection */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'v1-delete-a-telemetry-collection': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LFSource']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to delete telemetry collection */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'v1-update-a-telemetry-collection': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LFSource']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update telemetry collection */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'v1-get-a-telemetry-collection-schema': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LFSource']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to fetch telemetry collection schema */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'v1-list-all-warehouse-endpoints': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LFEndpoint'][]
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to fetch warehouse endpoints */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'v1-create-a-warehouse-endpoint': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LFEndpoint']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to create warehouse endpoint */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'v1-update-a-warehouse-endpoint': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LFEndpoint']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update warehouse endpoint */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'v1-delete-a-warehouse-endpoint': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to delete warehouse endpoint */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'v1-list-all-warehouse-queries': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to fetch warehouse queries */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'v1-parse-warehouse-query': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to parse warehouse query */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'v1-provision-a-warehouse-tenant': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LFUser']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to fetch or provision warehouse tenant */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProjectsApiController_projectGraphql: {
    parameters: {
      query?: never
      header: {
        'x-graphql-authorization': string
      }
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['Buffer']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to query project Graphql */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProjectsApiController_projectOpenApi: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get project OpenApi */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProjectAddonController_getProjectAddons: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProjectAddonsResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get project addons */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProjectAddonController_updateAddon: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAddonBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update project addon */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProjectAddonController_removeAddon: {
    parameters: {
      query?: never
      header?: never
      path: {
        addon_variant: components['schemas']['AddonVariantId']
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to remove project addon */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  PgbouncerConfigController_getPgbouncerConfig: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PgbouncerConfigResponse']
        }
      }
      /** @description Failed to retrieve project's pgbouncer config */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  PgbouncerConfigController_updatePgbouncerConfig: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePgbouncerConfigBody']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UpdatePoolingConfigResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update project's pgbouncer config */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  PgbouncerConfigController_getPgbouncerStatus: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PgbouncerStatusResponse']
        }
      }
      /** @description Failed to retrieve project's pgbouncer status */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'v1-get-postgres-config': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresConfigResponse']
        }
      }
      /** @description Failed to retrieve project's Postgres config */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'v1-update-postgres-config': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePostgresConfigBody']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgresConfigResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update project's Postgres config */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  PostgrestConfigController_getPostgRESTConfig: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostgrestConfigResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to retrieve project's postgrest config */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  PostgrestConfigController_updatePostgRESTConfig: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePostgrestConfigBody']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['V1PostgrestConfigResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update project's postgrest config */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  RealtimeConfigController_getConfig: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Gets project's realtime configuration */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RealtimeConfigResponseDto']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  RealtimeConfigController_updateConfig: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateRealtimeConfigBodyDto']
      }
    }
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  SecretsConfigController_updateConfig: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSecretsConfigBody']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UpdateSecretsResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update project's secrets config */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  StorageConfigController_getConfig: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['StorageConfigResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to retrieve project's storage config */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  StorageConfigController_updateConfig: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateStorageConfigBody']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['StorageConfigResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update project's storage config */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'v1-get-supavisor-config': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SupavisorConfigResponse'][]
        }
      }
      /** @description Failed to retrieve project's supavisor config */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  'v1-update-supavisor-config': {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSupavisorConfigBody']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UpdateSupavisorConfigResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update project's supavisor config */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ContentController_getContent: {
    parameters: {
      query?: {
        cursor?: string
        favorite?: boolean
        limit?: string
        name?: string
        sort_by?: 'name' | 'inserted_at'
        sort_order?: 'asc' | 'desc'
        type?: 'sql' | 'report' | 'log_sql'
        visibility?: string
      }
      header?: never
      path: {
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetUserContentResponse']
        }
      }
      /** @description Failed to retrieve project's content */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ContentController_updateWholeContent: {
    parameters: {
      query?: never
      header?: never
      path: {
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpsertContentBodyDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update project's content */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ContentController_createContent: {
    parameters: {
      query?: never
      header?: never
      path: {
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateContentBodyDto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserContentObject']
        }
      }
      /** @description Failed to create project's content */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ContentController_deleteContents: {
    parameters: {
      query: {
        ids: string[]
      }
      header?: never
      path: {
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BulkDeleteUserContentResponse'][]
        }
      }
      /** @description Failed to delete project's contents */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ContentController_getContentCountV2: {
    parameters: {
      query?: {
        name?: string
        type?: 'sql' | 'report' | 'log_sql'
      }
      header?: never
      path: {
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetContentCountV2Response']
        }
      }
      /** @description Failed to retrieve user's content counts */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ContentFoldersController_getRootFolder: {
    parameters: {
      query?: {
        cursor?: string
        limit?: string
        name?: string
        sort_by?: 'name' | 'inserted_at'
        sort_order?: 'asc' | 'desc'
        type?: 'sql' | 'report' | 'log_sql'
        visibility?: string
      }
      header?: never
      path: {
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetUserContentFolderResponse']
        }
      }
      /** @description Failed to retrieve project's content root folder */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ContentFoldersController_createFolder: {
    parameters: {
      query?: never
      header?: never
      path: {
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateContentFolderBodyDto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateUserContentFolderResponse']
        }
      }
      /** @description Failed to create project's content folder */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ContentFoldersController_DeleteFolder: {
    parameters: {
      query: {
        ids: string[]
      }
      header?: never
      path: {
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to delete project's content folders */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ContentFoldersController_getFolder: {
    parameters: {
      query?: {
        cursor?: string
        limit?: string
        name?: string
        sort_by?: 'name' | 'inserted_at'
        sort_order?: 'asc' | 'desc'
      }
      header?: never
      path: {
        /** @description Content folder id */
        id: string
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetUserContentFolderResponse']
        }
      }
      /** @description Failed to retrieve project's content folder */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ContentFoldersController_updateFolder: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Content folder id */
        id: string
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateContentFolderBodyDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update project's content folder */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ContentController_getContentById: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetUserContentByIdResponse']
        }
      }
      /** @description Failed to retrieve project's content by the given id */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  DailyStatsController_getDailyStats: {
    parameters: {
      query: {
        attribute:
          | 'total_realtime_requests'
          | 'total_realtime_egress'
          | 'avg_cpu_usage'
          | 'total_ingress'
          | 'total_egress'
          | 'total_requests'
          | 'total_get_requests'
          | 'total_patch_requests'
          | 'total_post_requests'
          | 'total_delete_requests'
          | 'total_options_requests'
          | 'total_supavisor_egress_bytes'
          | 'total_rest_ingress'
          | 'total_rest_egress'
          | 'total_rest_requests'
          | 'total_rest_get_requests'
          | 'total_rest_post_requests'
          | 'total_rest_patch_requests'
          | 'total_rest_delete_requests'
          | 'total_rest_options_requests'
          | 'total_auth_billing_period_mau'
          | 'total_auth_billing_period_sso_mau'
          | 'total_auth_ingress'
          | 'total_auth_egress'
          | 'total_auth_requests'
          | 'total_auth_get_requests'
          | 'total_auth_post_requests'
          | 'total_auth_patch_requests'
          | 'total_auth_options_requests'
          | 'total_auth_delete_requests'
          | 'total_storage_ingress'
          | 'total_storage_egress'
          | 'total_storage_image_render_count'
          | 'total_storage_requests'
          | 'total_storage_get_requests'
          | 'total_storage_post_requests'
          | 'total_storage_delete_requests'
          | 'total_storage_options_requests'
          | 'total_storage_patch_requests'
        endDate: string
        interval: string
        startDate: string
      }
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Failed to get daily project stats */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  DatabasesController_getDatabases: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DatabaseDetailResponse'][]
        }
      }
    }
  }
  DatabasesStatusesController_getStatus: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DatabaseStatusResponse'][]
        }
      }
      /** @description Failed to get statuses of databases of a project */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  DbPasswordController_updatePassword: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePasswordBody']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update database password */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  DiskController_getDisk: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DiskResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get database disk attributes */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  DiskController_modifyDisk: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DiskRequestBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to modify database disk */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  DiskController_getDiskAutoscaleConfig: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DiskAutoscaleConfig']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get project disk autoscale config */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  DiskController_updateDiskAutoscaleConfig: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateDiskAutoscaleConfig']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DiskAutoscaleConfig']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update project disk autoscale config */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  DiskController_getDiskUtilization: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DiskUtilMetricsResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get disk utilization */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  InfraMonitoringController_getUsageMetrics: {
    parameters: {
      query: {
        attribute:
          | 'cpu_usage'
          | 'max_cpu_usage'
          | 'avg_cpu_usage'
          | 'disk_io_budget'
          | 'disk_io_consumption'
          | 'ram_usage'
          | 'swap_usage'
          | 'physical_replication_lag_physical_replica_lag_seconds'
          | 'pg_stat_database_num_backends'
          | 'supavisor_connections_active'
        databaseIdentifier?: string
        endDate: string
        interval?: '1m' | '5m' | '10m' | '30m' | '1h' | '1d'
        startDate: string
      }
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Failed to get project's usage metrics */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  HealthCheckController_projectHealthCheck: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get project health check */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  LoadBalancersController_getLoadBalancers: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LoadBalancerDetailResponse'][]
        }
      }
    }
  }
  PauseController_pauseProject: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to pause the project */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  PauseController_getProject: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PauseStatusResponse']
        }
      }
    }
  }
  ResizeController_resizeDatabase: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ResizeBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to resize database disk */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  RestartController_restartProject: {
    parameters: {
      query?: never
      header?: never
      path: {
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RestartProjectBodyDto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to restart project */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  RestartServicesController_restartServices: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RestartServicesBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to restart given services */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  UnpauseController_unpauseProject: {
    parameters: {
      query?: never
      header?: never
      path: {
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UnpauseProjectBodyDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UnpauseProjectResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to unpause project */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  UnpauseController_cancelProjectRestoration: {
    parameters: {
      query?: never
      header?: never
      path: {
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RestoreCancellation']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to cancel project restoration */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  UnpauseController_getAvailableImageVersions: {
    parameters: {
      query?: never
      header?: never
      path: {
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UnpauseProjectAvailableVersionsResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to retrieve available versions */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProjectRunLintsController_runProjectLints: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProjectLintResponse'][]
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProjectServiceVersionsController_getServiceVersions: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ServiceVersions']
        }
      }
    }
  }
  SettingsController_getProjectSettings: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProjectSettingsResponse']
        }
      }
      /** @description Failed to retrieve project's settings */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  SensitivityController_updateProjectSensitivity: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MarkSensitiveBody']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ProjectSensitivityResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update project */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProjectStatusController_getStatus: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get project's status */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProjectTransferController_transferProject: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TransferProjectBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProjectTransferController_previewTransfer: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TransferProjectBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PreviewProjectTransferResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ProjectsController_getProjectByFlyExtensionId: {
    parameters: {
      query?: never
      header?: never
      path: {
        fly_extension_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetProjectByFlyExtensionIdResponse']
        }
      }
    }
  }
  ApiController_getProjectApi: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ApiResponse']
        }
      }
      /** @description Failed to retrieve project's api info */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  JwtSecretUpdateStatusController_getJwtSecretUpdateStatus: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['JwtSecretUpdateStatus']
        }
      }
      /** @description Failed to retrieve JWT secret update status */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  PropsSettingsController_getProjectSettingsDeprecated: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SettingsResponse']
        }
      }
      /** @description Failed to retrieve project's settings */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ReplicationPipelinesController_getPipelines: {
    parameters: {
      query?: never
      header?: never
      path: {
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReplicationPipelinesResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get replication pipeline */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ReplicationPipelinesController_createPipeline: {
    parameters: {
      query?: never
      header?: never
      path: {
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateReplicationPipelineBody']
      }
    }
    responses: {
      /** @description Returns the created replication pipeline id. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreatePipelineResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to create pipeline */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ReplicationPipelinesController_deletePipeline: {
    parameters: {
      query?: never
      header?: never
      path: {
        pipeline_id: number
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to delete pipeline */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ReplicationPipelinesController_startPipeline: {
    parameters: {
      query?: never
      header?: never
      path: {
        pipeline_id: number
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to start pipeline */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ReplicationPipelinesController_getPipelineStatus: {
    parameters: {
      query?: never
      header?: never
      path: {
        pipeline_id: number
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReplicationPipelinesStatusResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get pipeline status */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ReplicationPipelinesController_stopPipeline: {
    parameters: {
      query?: never
      header?: never
      path: {
        pipeline_id: number
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to stop pipeline */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ReplicationSinksController_getSinks: {
    parameters: {
      query?: never
      header?: never
      path: {
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReplicationSinksResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get replication sinks */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ReplicationSinksController_createSink: {
    parameters: {
      query?: never
      header?: never
      path: {
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateReplicationSinkBody']
      }
    }
    responses: {
      /** @description Returns the created replication sink id. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateSinkResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to create sink */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ReplicationSinksController_deleteSink: {
    parameters: {
      query?: never
      header?: never
      path: {
        ref: string
        sink_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to delete sink */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ReplicationSourcesController_getSources: {
    parameters: {
      query?: never
      header?: never
      path: {
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns all sources. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReplicationSourcesResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Returned when the API fails to get replication sources. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ReplicationSourcesController_createSource: {
    parameters: {
      query?: never
      header?: never
      path: {
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns the created replication source id. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateSourceResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Returned when the API fails to create the replication source. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ReplicationSourcesController_getPublications: {
    parameters: {
      query?: never
      header?: never
      path: {
        ref: string
        source_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns all publications. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReplicationPublicationsResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Returned when the API fails to get source publications. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ReplicationSourcesController_createPublication: {
    parameters: {
      query?: never
      header?: never
      path: {
        ref: string
        source_id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateReplicationPublicationBody']
      }
    }
    responses: {
      /** @description Returned when the publication is created. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Returned when the API fails to create the publication. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ReplicationSourcesController_deletePublication: {
    parameters: {
      query?: never
      header?: never
      path: {
        publication_name: string
        ref: string
        source_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returned when the publication is deleted. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Returned when the API fails to delete the publication. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ReplicationSourcesController_getTables: {
    parameters: {
      query?: never
      header?: never
      path: {
        ref: string
        source_id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Returns all tables. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReplicationTablesResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Returned when the API fails to get source tables. */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  ResetPasswordController_resetPassword: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ResetPasswordBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  SignUpController_signUp: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SignUpBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  StatusController_getStatus: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to retrieve infrastructure status */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  StorageArchiveController_getArchive: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetArchiveResponse']
        }
      }
      /** @description Failed to get project storage archive */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  StorageArchiveController_createArchive: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to create project storage archive */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  StorageBucketsController_getBuckets: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['StorageBucket'][]
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get list of buckets */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  StorageBucketsController_createBucket: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateStorageBucketBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to create bucket */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  StorageBucketIdController_getBucket: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Storage bucket id */
        id: string
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['StorageBucket']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get bucket */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  StorageBucketIdController_deleteBucket: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Storage bucket id */
        id: string
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to delete bucket */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  StorageBucketIdController_updateBucket: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Storage bucket id */
        id: string
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateStorageBucketBody']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to update bucket */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  StorageBucketIdController_emptyBucket: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Storage bucket id */
        id: string
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to empty bucket */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  StorageObjectsController_deleteObjects: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Storage bucket id */
        id: string
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DeleteObjectsBody']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to delete objects */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  StorageObjectsController_copyObject: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Storage bucket id */
        id: string
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CopyObjectBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CopyObjectResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to copy object */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  StorageObjectsController_download: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Storage bucket id */
        id: string
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DownloadObjectBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to download the file */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  StorageObjectsController_getObjects: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Storage bucket id */
        id: string
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GetObjectsBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['StorageObject'][]
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get list of objects with the given bucket */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  StorageObjectsController_moveObject: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Storage bucket id */
        id: string
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MoveObjectBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to move object */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  StorageObjectsController_createPublicUrl: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Storage bucket id */
        id: string
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GetPublicUrlBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PublicUrlResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to create public URL */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  StorageObjectsController_createSignedUrl: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Storage bucket id */
        id: string
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GetSignedUrlBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SignedUrlResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to create a signed URL */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  StorageObjectsController_createSignedUrls: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Storage bucket id */
        id: string
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GetSignedUrlsBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SignedUrlsResponse'][]
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get multiple signed URLs */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  StorageS3CredentialsController_getAllCredentials: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetStorageCredentialsResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get project storage credentials */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  StorageS3CredentialsController_createCredential: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateStorageCredentialBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateStorageCredentialResponse']
        }
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to create project storage credential */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  StorageS3CredentialsController_deleteCredential: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Storage credential id */
        id: string
        /** @description Project ref */
        ref: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      403: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to delete project storage credential */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  InvoicesController_getOverdueInvoices: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OverdueInvoiceCount'][]
        }
      }
    }
  }
  SetupIntentController_setUpPaymentMethod: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['HCaptchaBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SetupIntentResponse']
        }
      }
      /** @description Failed to initiate a payment method setup */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TelemetryEventController_sendServerEventV2: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TelemetryEventBodyV2Dto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to send analytics server event */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TelemetryFeatureFlagsController_callFeatureFlag: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Feature flags called */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['TelemetryCallFeatureFlagsResponseDto']
        }
      }
      /** @description Failed to call feature flags */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TelemetryFeatureFlagsController_trackFeatureFlag: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TelemetryFeatureFlagBodyDto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to track feature flag called */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TelemetryGroupsController_groupIdentify: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TelemetryGroupsIdentityBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to send analytics group identify event */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TelemetryGroupsController_groupReset: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TelemetryGroupsResetBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to send analytics group reset event */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TelemetryIdentifyController_identifyV2: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TelemetryIdentifyBodyV2']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to send analytics identify event */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TelemetryPageController_sendServerPageV2: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TelemetryPageBodyV2Dto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to send server page event */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TelemetryPageLeaveController_trackPageLeave: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['TelemetryPageLeaveBodyDto']
      }
    }
    responses: {
      /** @description Page leave event sent */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to send analytics page leave event */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TelemetryResetController_reset: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to reset analytics */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  TermsOfServiceController_flyTosAccepted: {
    parameters: {
      query: {
        extension_id: string
        organization_id: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  VercelProjectsController_getVercelProjects: {
    parameters: {
      query: {
        id: string
        teamId: string
      }
      header: {
        vercel_authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>[]
        }
      }
      /** @description Failed to get projects */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  VercelProjectsController_getVercelProject: {
    parameters: {
      query: {
        id: string
        teamId: string
      }
      header: {
        vercel_authorization: string
      }
      path: {
        id: string
        teamId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Failed to get project */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  VercelEnvironmentVariablesController_getEnvironmentVariables: {
    parameters: {
      query: {
        projectId: string
        teamId?: string
      }
      header: {
        vercel_authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>[]
        }
      }
      /** @description Failed to get Vercel environment variables */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  VercelEnvironmentVariablesController_createEnvironmentVariable: {
    parameters: {
      query: {
        projectId: string
        teamId?: string
      }
      header: {
        vercel_authorization: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateVercelEnvironmentVariableBody']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Failed to create Vercel environment variables */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  VercelRedirectController_getRedirectUrl: {
    parameters: {
      query?: never
      header?: never
      path: {
        installation_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VercelRedirectResponse']
        }
      }
      /** @description Failed to get Vercel redirect url */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  VercelAccessTokenController_getAccessToken: {
    parameters: {
      query: {
        code: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to get Vercel access token */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  WorkflowRunController_listWorkflowRuns: {
    parameters: {
      query?: {
        /** @description Branch ID */
        branch_id?: string
        limit?: number
        offset?: number
        /** @description Project ref */
        project_ref?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['WorkflowRunResponse'][]
        }
      }
      /** @description Failed to list workflow runs */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  WorkflowRunController_countWorkflowRuns: {
    parameters: {
      query?: {
        /** @description Branch ID */
        branch_id?: string
        /** @description Project ref */
        project_ref?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          /** @description total count value */
          'X-Total-Count'?: number
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Failed to count workflow runs */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  WorkflowRunController_getWorkflowRunLogs: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Workflow run ID */
        workflow_run_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'text/plain': string
        }
      }
      /** @description Failed to get workflow run logs */
      500: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
}
