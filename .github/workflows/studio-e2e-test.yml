name: Studio E2E Tests
on:
  push:
    branches: [master]
    paths:
      - 'packages/pg-meta/**/*'
      - 'apps/studio/**'
      - 'e2e/studio/**'
      - 'pnpm-lock.yaml'
  pull_request:
    paths:
      - 'packages/pg-meta/**/*'
      - 'apps/studio/**'
      - 'e2e/studio/**'
      - 'pnpm-lock.yaml'
      - '.github/workflows/studio-e2e-test.yml'

# Cancel old builds on new commit for same workflow + branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    # Make the job non-blocking
    continue-on-error: true
    # Require approval only for external contributors
    environment: ${{ github.event.pull_request.author_association != 'MEMBER' && 'Studio E2E Tests' || '' }}

    env:
      EMAIL: ${{ secrets.CI_EMAIL }}
      PASSWORD: ${{ secrets.CI_PASSWORD }}
      PROJECT_REF: ${{ secrets.CI_PROJECT_REF }}
      NEXT_PUBLIC_IS_PLATFORM: true
      NEXT_PUBLIC_API_URL: https://api.supabase.green
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_STUDIO_HOSTED_PROJECT_ID }}
      NEXT_PUBLIC_HCAPTCHA_SITE_KEY: 10000000-ffff-ffff-ffff-000000000001

    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm i

      # Build Studio in CLI mode (is_platform=false)
      - name: Build Studio (CLI mode)
        env:
          NEXT_PUBLIC_IS_PLATFORM: false
        run: pnpm -C apps/studio build

      # Start the built Studio locally
      - name: Start Studio (next start)
        env:
          NEXT_PUBLIC_IS_PLATFORM: false
          PORT: 3000
        run: |
          pnpm -C apps/studio start & echo $! > /tmp/studio_pid

      - name: Wait for Studio to be ready
        run: |
          for i in {1..60}; do
            if curl -sSf http://localhost:3000 > /dev/null; then
              echo "Studio is up"; exit 0; fi; sleep 2; done; echo "Studio failed to start"; exit 1

      - name: Install Playwright Browsers
        run: pnpm -C e2e/studio exec playwright install --with-deps

      - name: Run Playwright tests against local Studio (CLI)
        id: playwright
        env:
          AUTHENTICATION: false
          STUDIO_URL: http://localhost:3000
          API_URL: http://localhost:3000
        run: pnpm e2e

      - name: Stop Studio
        if: always()
        run: |
          if [ -f /tmp/studio_pid ]; then
            kill $(cat /tmp/studio_pid) || true
          fi

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-artifacts
          path: |
            e2e/studio/playwright-report/
            e2e/studio/test-results/
          retention-days: 7

      - name: Comment summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs')
            const path = 'e2e/studio/test-results/test-results.json'
            let summary = { total: 0, passed: 0, failed: 0, skipped: 0, timedOut: 0, interrupted: 0, durationMs: 0 }
            try {
              const data = JSON.parse(fs.readFileSync(path, 'utf8'))
              const walk = (node) => {
                if (!node) return
                if (node.suites) node.suites.forEach(walk)
                if (node.specs) node.specs.forEach(spec => {
                  spec.tests?.forEach(test => {
                    test.results?.forEach(r => {
                      summary.total += 1
                      summary.durationMs += r.duration || 0
                      const s = r.status
                      if (summary[s] !== undefined) summary[s] += 1
                      else if (s === 'ok') summary.passed += 1
                    })
                  })
                })
              }
              walk(data)
            } catch (e) {
              summary.note = 'No JSON report found or parse error.'
            }
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            const body = [
              `**Studio E2E Results**`,
              '',
              summary.note ? `Note: ${summary.note}` : `- Total: ${summary.total}\n- Passed: ${summary.passed}\n- Failed: ${summary.failed}\n- Skipped: ${summary.skipped}\n- Timed out: ${summary.timedOut}\n- Interrupted: ${summary.interrupted}\n- Duration: ${(summary.durationMs/1000).toFixed(1)}s`,
              '',
              `[View artifacts and HTML report](${runUrl})`
            ].join('\n')
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body,
            })
