name: Studio E2E Tests
on:
  push:
    branches: [master]
    paths:
      - 'packages/pg-meta/**/*'
      - 'apps/studio/**'
      - 'e2e/studio/**'
      - 'pnpm-lock.yaml'
  pull_request:
    paths:
      - 'packages/pg-meta/**/*'
      - 'apps/studio/**'
      - 'e2e/studio/**'
      - 'pnpm-lock.yaml'
      - '.github/workflows/studio-e2e-test.yml'

# Cancel old builds on new commit for same workflow + branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    # Make the job non-blocking
    continue-on-error: true
    # Require approval only for external contributors
    environment: ${{ github.event.pull_request.author_association != 'MEMBER' && 'Studio E2E Tests' || '' }}

    env:
      EMAIL: ${{ secrets.CI_EMAIL }}
      PASSWORD: ${{ secrets.CI_PASSWORD }}
      PROJECT_REF: ${{ secrets.CI_PROJECT_REF }}
      NEXT_PUBLIC_API_URL: https://api.supabase.green
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      # Studio Self-Hosted project ID
      VERCEL_PROJECT_ID: prj_CnatEuo7L6bUZAgmujMrm5P1rxtv
      NEXT_PUBLIC_HCAPTCHA_SITE_KEY: 10000000-ffff-ffff-ffff-000000000001

    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm i

      # Deploy a preview to Vercel (CLI mode) and capture the URL
      - name: Install Vercel CLI
        run: pnpm add --global vercel@latest

      - name: Pull Vercel Environment Information (Preview)
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts for Vercel (is_platform=false)
        env:
          NEXT_PUBLIC_IS_PLATFORM: false
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project to Vercel and Get URL
        id: deploy_vercel
        run: |
          DEPLOY_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "Vercel Preview URL: $DEPLOY_URL"
          echo "DEPLOY_URL=$DEPLOY_URL" >> $GITHUB_OUTPUT

      - name: Install Playwright Browsers
        run: pnpm -C e2e/studio exec playwright install --with-deps

      - name: Run Playwright tests against Vercel Preview
        id: playwright
        continue-on-error: true
        env:
          AUTHENTICATION: false
          STUDIO_URL: ${{ steps.deploy_vercel.outputs.DEPLOY_URL }}?vercel-protection-bypass=${{ secrets.VERCEL_AUTOMATION_BYPASS_SELFHOSTED_STUDIO }}
          API_URL: ${{ steps.deploy_vercel.outputs.DEPLOY_URL }}?vercel-protection-bypass=${{ secrets.VERCEL_AUTOMATION_BYPASS_SELFHOSTED_STUDIO }}
        run: pnpm e2e

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-artifacts
          path: |
            e2e/studio/playwright-report/
            e2e/studio/test-results/
          retention-days: 7

      - name: Prepare summary (outputs)
        if: always()
        id: summarize
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs')
            const p = 'e2e/studio/test-results/test-results.json'
            let s={total:0,passed:0,failed:0,skipped:0,timedOut:0,interrupted:0,durationMs:0,note:''}
            try {
              const data = JSON.parse(fs.readFileSync(p,'utf8'))
              const walk=n=>{ if(!n)return; n.suites?.forEach(walk); n.specs?.forEach(sp=>sp.tests?.forEach(t=>t.results?.forEach(r=>{s.total++; s.durationMs+=r.duration||0; s[r.status]=(s[r.status]||0)+1;})))}
              walk(data)
            } catch { s.note='No JSON report found or parse error.' }
            const md = s.note ? `Note: ${s.note}` : `- Total: ${s.total}\n- Passed: ${s.passed||0}\n- Failed: ${s.failed||0}\n- Skipped: ${s.skipped||0}\n- Timed out: ${s.timedOut||0}\n- Interrupted: ${s.interrupted||0}\n- Duration: ${(s.durationMs/1000).toFixed(1)}s`
            core.setOutput('summary', md)

      - name: Comment summary on PR
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `${{ steps.summarize.outputs.summary }}`.replace(/^"|"$/g,'')
            const runUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`
            const body = [
              `**Studio E2E Results**`,
              '',
              summary,
              '',
              `Artifacts: ${runUrl}`
            ].join('\n')
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body,
            })
