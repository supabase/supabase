name: Studio E2E Tests (Vercel Preview)

on:
  repository_dispatch:
    types:
      - vercel.deployment.*
  # Allow manual runs for debugging
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.client_payload.git.branch || github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write

jobs:
  run-e2es:
    # Only run for Studio Self-Hosted Vercel project
    if: github.event_name == 'repository_dispatch' && github.event.client_payload.project.id == 'prj_CnatEuo7L6bUZAgmujMrm5P1rxtv'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    continue-on-error: true
    steps:
      - name: Debug incoming event
        run: |
          echo '${{ toJson(github.event) }}' | tee repository_dispatch_event.json
          echo 'Project ID from payload:'
          echo '${{ github.event.client_payload.project.id }}'
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.git.sha || github.sha }}

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm i

      - name: Install Playwright Browsers
        run: pnpm -C e2e/studio exec playwright install --with-deps

      - name: Run Playwright tests against Vercel Preview
        id: playwright
        env:
          # Vercel repository_dispatch payload
          PREVIEW_URL: ${{ github.event.client_payload.url }}
          PROJECT: ${{ github.event.client_payload.project }}
          TARGET: ${{ github.event.client_payload.target }}
          # Studio E2E env
          AUTHENTICATION: false
          STUDIO_URL: ${{ github.event.client_payload.url }}
          API_URL: ${{ github.event.client_payload.url }}
        run: |
          echo "Running E2E on Vercel preview: $PREVIEW_URL (project=$PROJECT, target=$TARGET)"
          pnpm e2e

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-artifacts-vercel
          path: |
            e2e/studio/playwright-report/
            e2e/studio/test-results/
          retention-days: 7

      - name: Comment summary on PR
        if: github.event.client_payload.git.pullRequestNumber && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs')
            const path = 'e2e/studio/test-results/test-results.json'
            let summary = { total: 0, passed: 0, failed: 0, skipped: 0, timedOut: 0, interrupted: 0, durationMs: 0 }
            try {
              const data = JSON.parse(fs.readFileSync(path, 'utf8'))
              const walk = (node) => {
                if (!node) return
                if (node.suites) node.suites.forEach(walk)
                if (node.specs) node.specs.forEach(spec => {
                  spec.tests?.forEach(test => {
                    test.results?.forEach(r => {
                      summary.total += 1
                      summary.durationMs += r.duration || 0
                      const s = r.status
                      if (summary[s] !== undefined) summary[s] += 1
                      else if (s === 'ok') summary.passed += 1
                    })
                  })
                })
              }
              walk(data)
            } catch (e) {
              summary.note = 'No JSON report found or parse error.'
            }
            const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            const body = [
              `**Studio E2E (Vercel Preview) Results**`,
              '',
              `Preview URL: ${{ github.event.client_payload.url }}`,
              '',
              summary.note ? `Note: ${summary.note}` : `- Total: ${summary.total}\n- Passed: ${summary.passed}\n- Failed: ${summary.failed}\n- Skipped: ${summary.skipped}\n- Timed out: ${summary.timedOut}\n- Interrupted: ${summary.interrupted}\n- Duration: ${(summary.durationMs/1000).toFixed(1)}s`,
              '',
              `[View artifacts and HTML report](${runUrl})`
            ].join('\n')
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.client_payload.git.pullRequestNumber }},
              body,
            })
